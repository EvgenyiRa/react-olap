[{"C:\\webclient\\rvkp-react\\src\\index.js":"1","C:\\webclient\\rvkp-react\\src\\App.js":"2","C:\\webclient\\rvkp-react\\src\\common.js":"3","C:\\webclient\\rvkp-react\\src\\Layout.js":"4","C:\\webclient\\rvkp-react\\src\\messages.js":"5","C:\\webclient\\rvkp-react\\src\\Enter.js":"6","C:\\webclient\\rvkp-react\\src\\config.js":"7","C:\\webclient\\rvkp-react\\src\\Aside.js":"8","C:\\webclient\\rvkp-react\\src\\Main.js":"9","C:\\webclient\\rvkp-react\\src\\components\\SelectC.js":"10","C:\\webclient\\rvkp-react\\src\\forms\\en\\Load_watermeter_values.js":"11","C:\\webclient\\rvkp-react\\src\\forms\\ab\\Load_watermeter_values.js":"12","C:\\webclient\\rvkp-react\\src\\forms\\ab\\Load_pays.js":"13","C:\\webclient\\rvkp-react\\src\\components\\LoadState.js":"14","C:\\webclient\\rvkp-react\\src\\components\\CustomAlert.js":"15","C:\\webclient\\rvkp-react\\src\\components\\InputBC.js":"16","C:\\webclient\\rvkp-react\\src\\components\\CheckboxC.js":"17","C:\\webclient\\rvkp-react\\src\\components\\ModalStage.js":"18","C:\\webclient\\rvkp-react\\src\\components\\PopupTable.js":"19","C:\\webclient\\rvkp-react\\src\\components\\SelectDB.js":"20","C:\\webclient\\rvkp-react\\src\\components\\TableDB.js":"21","C:\\webclient\\rvkp-react\\src\\components\\CustomConfirm.js":"22","C:\\webclient\\rvkp-react\\src\\components\\DivImgClick.js":"23","C:\\webclient\\rvkp-react\\src\\components\\InputDB.js":"24","C:\\webclient\\rvkp-react\\src\\components\\RadioGroupC.js":"25","C:\\webclient\\rvkp-react\\src\\components\\SelectB.js":"26","C:\\webclient\\rvkp-react\\src\\components\\DatePickerC.js":"27","C:\\webclient\\rvkp-react\\src\\components\\InputFileC.js":"28","C:\\webclient\\rvkp-react\\src\\forms\\ab\\Print_debtor.js":"29","C:\\webclient\\rvkp-react\\src\\forms\\en\\reports\\CalcOLAP.js":"30","C:\\webclient\\rvkp-react\\src\\forms\\admin\\Users.js":"31","C:\\webclient\\rvkp-react\\src\\components\\CircularProgressbarC.js":"32","C:\\webclient\\rvkp-react\\src\\components\\TableOLAP.js":"33"},{"size":198,"mtime":1597607659000,"results":"34","hashOfConfig":"35"},{"size":943,"mtime":1608809308293,"results":"36","hashOfConfig":"35"},{"size":18809,"mtime":1616484440122,"results":"37","hashOfConfig":"35"},{"size":1613,"mtime":1608809308309,"results":"38","hashOfConfig":"35"},{"size":1659,"mtime":1608809308385,"results":"39","hashOfConfig":"35"},{"size":5605,"mtime":1616398503271,"results":"40","hashOfConfig":"35"},{"size":408,"mtime":1606808455392,"results":"41","hashOfConfig":"35"},{"size":4924,"mtime":1616417376772,"results":"42","hashOfConfig":"35"},{"size":3726,"mtime":1608809308319,"results":"43","hashOfConfig":"35"},{"size":2089,"mtime":1604938555294,"results":"44","hashOfConfig":"35"},{"size":67740,"mtime":1616425798425,"results":"45","hashOfConfig":"35"},{"size":83269,"mtime":1608809308354,"results":"46","hashOfConfig":"35"},{"size":73169,"mtime":1608809308351,"results":"47","hashOfConfig":"35"},{"size":965,"mtime":1606236013939,"results":"48","hashOfConfig":"35"},{"size":1593,"mtime":1601912746201,"results":"49","hashOfConfig":"35"},{"size":2589,"mtime":1608809308339,"results":"50","hashOfConfig":"35"},{"size":1354,"mtime":1606839987037,"results":"51","hashOfConfig":"35"},{"size":3551,"mtime":1606304539704,"results":"52","hashOfConfig":"35"},{"size":12304,"mtime":1604938677434,"results":"53","hashOfConfig":"35"},{"size":6914,"mtime":1607073382567,"results":"54","hashOfConfig":"35"},{"size":9013,"mtime":1608809308342,"results":"55","hashOfConfig":"35"},{"size":1845,"mtime":1606750029784,"results":"56","hashOfConfig":"35"},{"size":1311,"mtime":1616425798421,"results":"57","hashOfConfig":"35"},{"size":11699,"mtime":1605093014432,"results":"58","hashOfConfig":"35"},{"size":3065,"mtime":1606321179958,"results":"59","hashOfConfig":"35"},{"size":4040,"mtime":1606404447614,"results":"60","hashOfConfig":"35"},{"size":4680,"mtime":1604938828208,"results":"61","hashOfConfig":"35"},{"size":2192,"mtime":1604938692682,"results":"62","hashOfConfig":"35"},{"size":8410,"mtime":1608809308358,"results":"63","hashOfConfig":"35"},{"size":7538,"mtime":1611758100539,"results":"64","hashOfConfig":"35"},{"size":38908,"mtime":1616391945063,"results":"65","hashOfConfig":"35"},{"size":2002,"mtime":1608809308336,"results":"66","hashOfConfig":"35"},{"size":85150,"mtime":1616420155565,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1p9blsp",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"70"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"70"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"70"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"70"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"70"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"70"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"70"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"70"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"70"},"C:\\webclient\\rvkp-react\\src\\index.js",[],["147","148"],"C:\\webclient\\rvkp-react\\src\\App.js",[],"C:\\webclient\\rvkp-react\\src\\common.js",["149","150","151"],"import axios from \"axios\";\r\nimport {settings} from './config.js';\r\n\r\nlet dataServer,\r\n    reportServer,\r\n    prVisiteReportServer=false,\r\n    reportServerHost,\r\n    axiosInstance,\r\n    userInfo,\r\n    tagExit=false;\r\n\r\nconst houreLifeCookies = 8,\r\n      idsLKKbyCity={vrn:1,\r\n                    omk:2,\r\n                    orn:3,\r\n                    krnd:4,\r\n                    brnl:5,\r\n                    tmn:6,\r\n                    arhk:7};\r\nexport { houreLifeCookies,idsLKKbyCity };\r\n\r\nsettings.then(function(settings){\r\n  dataServer=settings.dataServer;\r\n  reportServer=settings.reportServer;\r\n  axiosInstance = axios.create({\r\n    baseURL: dataServer\r\n  });\r\n});\r\n\r\nexport function getTagExit() {\r\n  return tagExit;\r\n}\r\n\r\nexport function getReportServerConfigs(callback) {\r\n  if (!!reportServerHost) {\r\n      callback(reportServerHost,reportServer);\r\n  }\r\n  else {\r\n    function axiosInstanceFunc() {\r\n      let data0 = {};\r\n      data0.sql=`SELECT sys_context('USERENV', 'SERVER_HOST')  SERVER_HOST FROM dual`;\r\n      getQuery(data0,(response0)=> {\r\n          reportServerHost=response0.data[0].SERVER_HOST;\r\n          callback(reportServerHost,reportServer);\r\n      })\r\n    }\r\n    if (!!!axiosInstance) {\r\n      var MyInt= setInterval(function(){\r\n          if (!!axiosInstance) {\r\n            clearInterval (MyInt);\r\n            axiosInstanceFunc();\r\n          }\r\n      },500);\r\n    }\r\n    else {\r\n      axiosInstanceFunc();\r\n    }\r\n  }\r\n}\r\n\r\n/*const axiosReportInstance = axios.create({\r\n  baseURL: reportServer\r\n});*/\r\nlet token;\r\n\r\nexport function getReportServer(catID,formID,params) {\r\n  //создаем токен если не заходили\r\n  if (!prVisiteReportServer) {\r\n    getReportServerConfigs((reportServerHost,reportServer) => {\r\n      var data = {};\r\n      data.exec_params_in={};\r\n      //data.query_params={};\r\n      data.execsql=`Declare\r\n                        p_token    VARCHAR2(32);\r\n                        p_id       NUMBER;\r\n                     BEGIN\r\n                        SELECT sys_guid() INTO p_token FROM dual;\r\n                        SELECT web_token_id_sq.nextval INTO p_id FROM dual;\r\n                        DELETE web_token WHERE accdate < (SYSDATE - 1);\r\n                        COMMIT;\r\n                        INSERT INTO web_token\r\n                         (id, parameters_list, guid, DATABASE)\r\n                        VALUES\r\n                         (p_id, :parameters_list, p_token, :p_database);\r\n                        COMMIT;\r\n                        :params_url:='id= ' || p_id || '&'||'token=' || p_token;\r\n                      END;`;\r\n      data.exec_params_in['p_database']=reportServerHost;\r\n      data.exec_params_in['parameters_list']='cat_id='+catID+'&form_id='+formID;\r\n      if (!!params) {\r\n          data.exec_params_in['parameters_list']+='&react_params='+params;\r\n      }\r\n      data.exec_params_out=[];\r\n      data.exec_params_out.push({name:'params_url',type:'string'});\r\n      getExecQuery(data,\r\n                   function(response) {\r\n                      prVisiteReportServer=true;\r\n                      const winC=window.open(reportServer+\"/print.php?\"+response.data.execout['params_url']+'&database='+reportServerHost);\r\n                   }\r\n                 );\r\n    });\r\n  }\r\n  else {\r\n    var react_params='';\r\n    if (!!params) {\r\n      react_params='&react_params='+params;\r\n    }\r\n    const winC=window.open(reportServer+\"/index.php?cat_id=\"+catID+\"&form_id=\"+formID+react_params);\r\n  }\r\n}\r\n\r\nexport function get_cookie(cookie_name)\r\n{\r\n  var results = document.cookie.match ( '(^|;) ?' + cookie_name + '=([^;]*)(;|$)' );\r\n  if ( results )\r\n    return ( unescape ( results[2] ) );\r\n  else\r\n    return null;\r\n}\r\n\r\nfunction set_cookie( name, value, houreLife, path, domain, secure)\r\n{\r\n  var cookie_string = name + \"=\" + escape ( value );\r\n  if ( !!houreLife )\r\n  {\r\n    var expires = new Date();\r\n    expires.setMilliseconds(houreLife * 60 * 60 * 1000);\r\n    cookie_string += \"; expires=\" + expires.toGMTString();\r\n  }\r\n  if ( path )\r\n        cookie_string += \"; path=\" + escape ( path );\r\n  if ( domain )\r\n        cookie_string += \"; domain=\" + escape ( domain );\r\n  if ( secure )\r\n        cookie_string += \"; secure\";\r\n  document.cookie = cookie_string;\r\n}\r\n\r\nexport function setAuth(data,callback) {\r\n  //{\"login\":process.env.REACT_APP_DSL,\"password\": process.env.REACT_APP_DSP}\r\n  axiosInstance.post('/auth/set',data)\r\n  .then(function(response) {\r\n    if (response.status !== 200) {\r\n      console.log('Authentication failed.' + response.status);\r\n    }\r\n    else {\r\n      if (!!response.data.token) {\r\n        set_cookie ('auth',response.data.token, houreLifeCookies);\r\n        token=response.data.token;\r\n        localStorage.setItem('tokenOne', response.data.tokenOne);\r\n      }\r\n    }\r\n    callback(response);\r\n  });\r\n}\r\n\r\nfunction delete_cookie( cookie_name )\r\n{\r\n  var cookie_date = new Date ( );  // Текущая дата и время\r\n  cookie_date.setTime ( cookie_date.getTime() - 1 );\r\n  document.cookie = cookie_name += \"=; expires=\" + cookie_date.toGMTString();\r\n}\r\n\r\nexport function delAuth(prReload) {\r\n  if (typeof prReload!=='boolean') {\r\n      prReload=true;\r\n  }\r\n  if (!!!token) {\r\n      token=get_cookie('auth');\r\n  }\r\n  if (!!token) {\r\n    tagExit=true;\r\n    let token_local=token;\r\n    delete_cookie('auth');\r\n    token=undefined;\r\n    axiosInstance.post('/auth/del',{authorization:token_local})\r\n    .then(function(response) {\r\n      if (response.status !== 200) {\r\n        console.log('Exit failed.' + response.status);\r\n      }\r\n      else {\r\n        let cityV=localStorage.getItem('city');\r\n        localStorage.clear();\r\n        localStorage.setItem('city', cityV);\r\n        userInfo=undefined;\r\n        tagExit=false;\r\n        console.log('node exit',response.data);\r\n      }\r\n      if (prReload) {\r\n        window.location.reload();\r\n      }\r\n    });\r\n  }\r\n  else if (prReload) {\r\n    window.location.reload();\r\n  }\r\n}\r\n\r\nexport function getParamForSQL(paramGroup,parParentID,data) {\r\n      if ((!!paramGroup) & (!!parParentID)) {\r\n        parParentID.forEach(function(item) {\r\n            if (!Array.isArray(paramGroup[item])) {\r\n              data.params[item]=paramGroup[item];\r\n            }\r\n            else {\r\n                if (paramGroup[item].length>0) {\r\n                  var str_for_sql_params=':'+item+'_0';\r\n                  data.params[item+'_0']=paramGroup[item][0];\r\n                  for (var i = 1; i < paramGroup[item].length; i++) {\r\n                    data.params[item+'_'+i]=paramGroup[item][i];\r\n                    str_for_sql_params+=',:'+item+'_'+i;\r\n                  }\r\n                  data.sql=data.sql.split(':'+item).join(str_for_sql_params);\r\n                }\r\n                else {\r\n                    data.params[item]='';\r\n                }\r\n            }\r\n        });\r\n      }\r\n}\r\n\r\nexport function getDiffArray(a,b) {\r\n  var result=false;\r\n  if (a.length!==b.length) {\r\n      result=true;\r\n  }\r\n  else {\r\n    for (var i = 0; i < a.length; i++) {\r\n        var resultOne=false;\r\n        for (var z = 0; z < b.length; z++) {\r\n            if (a[i] === b[z]) {\r\n                resultOne=true;\r\n                break;\r\n            }\r\n        }\r\n        if (!resultOne) {\r\n            result=true;\r\n            break;\r\n        }\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\nexport function getParamDiff(t_paramGroup,p_paramGroup,parParentID) {\r\n      var result=false;\r\n      if ((!!t_paramGroup) & (!!p_paramGroup) & (!!parParentID)) {\r\n        for (var j = 0; j < parParentID.length; j++) {\r\n            if (!Array.isArray(t_paramGroup[parParentID[j]])) {\r\n              if (t_paramGroup[parParentID[j]]!==p_paramGroup[parParentID[j]]) {\r\n                  result=true;\r\n                  break;\r\n              }\r\n            }\r\n            else {\r\n              if (getDiffArray(t_paramGroup[parParentID[j]],p_paramGroup[parParentID[j]])) {\r\n                  result=true;\r\n                  break;\r\n              }\r\n            }\r\n        }\r\n      }\r\n      return result;\r\n}\r\n\r\nfunction getAuthorization(data,callback0) {\r\n  //console.log(process.env);\r\n  if (!!!token) {\r\n      token=get_cookie('auth');\r\n  }\r\n  if (!!token) {\r\n      data.authorization=token;\r\n      data.tokenOne=localStorage.getItem('tokenOne');\r\n      callback0(true);\r\n  }\r\n  else {\r\n    alert('Вы не авторизованы');\r\n    callback0(false);\r\n  }\r\n}\r\n\r\nexport function getQuery(data,callback,stateLoadObj) {\r\n  getAuthorization(data,function(result){\r\n    if (result) {\r\n      if (!!stateLoadObj) {\r\n          stateLoadObj.current.setState((state) => ({vis:++state.vis}));\r\n      }\r\n      function axiosInstanceFunc() {\r\n        axiosInstance.post('/ora/query',data)\r\n        .then(function(response) {\r\n          if (response.status !== 200) {\r\n            console.log('Authentication failed.' + response.status);\r\n          }\r\n          if (!!stateLoadObj) {\r\n            if (stateLoadObj.current!==null) {\r\n              stateLoadObj.current.setState((state) => ({vis:--state.vis}));\r\n            }\r\n          }\r\n          if (!!!response.data.message) {\r\n            //set_cookie('tokenOne',response.data.tokenOne, houreLifeCookies);\r\n            localStorage.setItem('tokenOne', response.data.tokenOne);\r\n            let responseDR=[...response.data.rows];\r\n            delete response.data;\r\n            response.data=responseDR;\r\n            callback(response);\r\n          }\r\n          else {\r\n            alert('Ошибка верификации данных');\r\n            delAuth();\r\n          }\r\n        });\r\n      }\r\n      if (!!!axiosInstance) {\r\n        var MyInt= setInterval(function(){\r\n            if (!!axiosInstance) {\r\n              clearInterval (MyInt);\r\n              axiosInstanceFunc();\r\n            }\r\n        },500);\r\n      }\r\n      else {\r\n        axiosInstanceFunc();\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nexport function getHashPwd(data,callback,stateLoadObj) {\r\n  getAuthorization(data,function(result){\r\n      if (result) {\r\n      if (!!stateLoadObj) {\r\n          stateLoadObj.current.setState((state) => ({vis:++state.vis}));\r\n      }\r\n      function axiosInstanceFunc() {\r\n        axiosInstance.post('/auth/gethashpwd',data)\r\n        .then(function(response) {\r\n          if (response.status !== 200) {\r\n            console.log('Authentication failed.' + response.status);\r\n          }\r\n          if (!!stateLoadObj) {\r\n            if (stateLoadObj.current!==null) {\r\n              stateLoadObj.current.setState((state) => ({vis:--state.vis}));\r\n            }\r\n          }\r\n          if (!!!response.data.message) {\r\n            //set_cookie('tokenOne',response.data.tokenOne, houreLifeCookies);\r\n            localStorage.setItem('tokenOne', response.data.tokenOne);\r\n            callback({sol:response.data.sol,hash:response.data.hash});\r\n          }\r\n          else {\r\n            alert('Ошибка верификации данных');\r\n            delAuth();\r\n          }\r\n        });\r\n      }\r\n      if (!!!axiosInstance) {\r\n        var MyInt= setInterval(function(){\r\n            if (!!axiosInstance) {\r\n              clearInterval (MyInt);\r\n              axiosInstanceFunc();\r\n            }\r\n        },500);\r\n      }\r\n      else {\r\n        axiosInstanceFunc();\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nexport function getExecQuery(data,callback,stateLoadObj) {\r\n  getAuthorization(data,function(result){\r\n    if (result) {\r\n      if (!!stateLoadObj) {\r\n        stateLoadObj.current.setState((state) => ({vis:++state.vis}));\r\n      }\r\n      function axiosInstanceFunc() {\r\n        axiosInstance.post('/ora/execquery',data)\r\n        .then(function(response) {\r\n          if (response.status !== 200) {\r\n            console.log('Authentication failed.' + response.status);\r\n          }\r\n          if (!!stateLoadObj) {\r\n            stateLoadObj.current.setState((state) => ({vis:--state.vis}));\r\n          }\r\n          if (!!!response.data.message) {\r\n            //set_cookie('tokenOne',response.data.tokenOne, houreLifeCookies);\r\n            localStorage.setItem('tokenOne', response.data.tokenOne);\r\n            let responseDR={...response.data.rows};\r\n            delete response.data;\r\n            response.data=responseDR;\r\n            callback(response);\r\n          }\r\n          else {\r\n            alert('Ошибка верификации данных');\r\n            delAuth();\r\n          }\r\n        });\r\n      }\r\n      if (!!!axiosInstance) {\r\n        var MyInt= setInterval(function(){\r\n            if (!!axiosInstance) {\r\n              clearInterval (MyInt);\r\n              axiosInstanceFunc();\r\n            }\r\n        },500);\r\n      }\r\n      else {\r\n        axiosInstanceFunc();\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nexport function getAuth(callback,stateLoadObj) {\r\n  if (!!userInfo) {\r\n      callback(userInfo);\r\n  }\r\n  else {\r\n    let data={};\r\n    getAuthorization(data,function(){\r\n      if (!!stateLoadObj) {\r\n          stateLoadObj.current.setState((state) => ({vis:++state.vis}));\r\n      }\r\n      function axiosInstanceFunc() {\r\n        axiosInstance.post('/auth/get',data)\r\n        .then(function(response) {\r\n          if (response.status !== 200) {\r\n            console.log('Authentication failed.' + response.status);\r\n          }\r\n          if (!!stateLoadObj) {\r\n            if (stateLoadObj.current!==null) {\r\n              stateLoadObj.current.setState((state) => ({vis:--state.vis}));\r\n            }\r\n          }\r\n          if (!!!response.data.message) {\r\n            //set_cookie('tokenOne',response.data.tokenOne, houreLifeCookies);\r\n            localStorage.setItem('tokenOne', response.data.tokenOne);\r\n            userInfo=response.data.user;\r\n            callback(userInfo);\r\n          }\r\n          else {\r\n            alert('Ошибка верификации данных');\r\n            delAuth();\r\n          }\r\n        });\r\n      }\r\n      if (!!!axiosInstance) {\r\n        var MyInt= setInterval(function(){\r\n            if (!!axiosInstance) {\r\n              clearInterval (MyInt);\r\n              axiosInstanceFunc();\r\n            }\r\n        },500);\r\n      }\r\n      else {\r\n        axiosInstanceFunc();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function getCheckRight(rigth,callback) {\r\n    //callback м.б. не функция, а массив с правами,\r\n    //чтобы обойтись без функции обратного вызова, при этом проверить наличие права\r\n    if ((!!rigth) & (!!callback)) {\r\n      if (typeof callback===\"function\") {\r\n        getAuth((result) => {\r\n            if (!Array.isArray(result.rights)) {\r\n                callback(false);\r\n            }\r\n            else {\r\n              let res=false;\r\n              for (var i = 0; i < result.rights.length; i++) {\r\n                if (result.rights[i].RIGHT_SYSNAME===rigth) {\r\n                    res=true;\r\n                    break;\r\n                }\r\n              }\r\n              callback(res);\r\n            }\r\n        });\r\n      }\r\n      else {\r\n        if (!Array.isArray(callback)) {\r\n            return false;\r\n        }\r\n        else {\r\n          let res=false;\r\n          for (var i = 0; i < callback.length; i++) {\r\n            if (callback[i].RIGHT_SYSNAME===rigth) {\r\n                res=true;\r\n                break;\r\n            }\r\n          }\r\n          return res;\r\n        }\r\n      }\r\n    }\r\n    else {\r\n        callback('ошибка передачи параметров');\r\n    }\r\n}\r\n\r\nexport function setAuthByToken(data,callback) {\r\n  function axiosInstanceFunc() {\r\n    axiosInstance.post('/auth/bytoken',data)\r\n    .then(function(response) {\r\n      if (response.status !== 200) {\r\n        console.log('Authentication failed.', response);\r\n      }\r\n      if (!!!response.data.message) {\r\n        set_cookie('auth',response.data.token, houreLifeCookies);\r\n        token=response.data.token;\r\n        localStorage.setItem('tokenOne', response.data.tokenOne);\r\n      }\r\n      callback(response);\r\n    });\r\n  }\r\n\r\n  if (!!!axiosInstance) {\r\n    var MyInt= setInterval(function(){\r\n        if (!!axiosInstance) {\r\n          clearInterval (MyInt);\r\n          axiosInstanceFunc();\r\n        }\r\n    },500);\r\n  }\r\n  else {\r\n    axiosInstanceFunc();\r\n  }\r\n}\r\n\r\nexport function createPool(data,callback) {\r\n  function axiosInstanceFunc() {\r\n    axiosInstance.post('/auth/createpool',data)\r\n    .then(function(response) {\r\n      if (response.status !== 200) {\r\n        console.log('Create pool failed.', response);\r\n      }\r\n      callback(response);\r\n    });\r\n  }\r\n\r\n  if (!!!axiosInstance) {\r\n    var MyInt= setInterval(function(){\r\n        if (!!axiosInstance) {\r\n          clearInterval (MyInt);\r\n          axiosInstanceFunc();\r\n        }\r\n    },500);\r\n  }\r\n  else {\r\n    axiosInstanceFunc();\r\n  }\r\n}\r\n\r\nexport function getTableOLAP(data,callback,stateLoadObj) {\r\n  getAuthorization(data,function(){\r\n    if (!!stateLoadObj) {\r\n        stateLoadObj.current.setState((state) => ({vis:++state.vis}));\r\n    }\r\n    function axiosInstanceFunc() {\r\n      axiosInstance.post('/olap/gettable',data)\r\n      .then(function(response) {\r\n        if (response.status !== 200) {\r\n          console.log('Authentication failed.' + response.status);\r\n        }\r\n        if (!!stateLoadObj) {\r\n          if (stateLoadObj.current!==null) {\r\n            stateLoadObj.current.setState((state) => ({vis:--state.vis}));\r\n          }\r\n        }\r\n        if (!!!response.data.message) {\r\n          //set_cookie('tokenOne',response.data.tokenOne, houreLifeCookies);\r\n          localStorage.setItem('tokenOne', response.data.tokenOne);\r\n          callback(response.data.object);\r\n        }\r\n        else {\r\n          alert('Ошибка верификации данных');\r\n          delAuth();\r\n        }\r\n      });\r\n    }\r\n    if (!!!axiosInstance) {\r\n      var MyInt= setInterval(function(){\r\n          if (!!axiosInstance) {\r\n            clearInterval (MyInt);\r\n            axiosInstanceFunc();\r\n          }\r\n      },500);\r\n    }\r\n    else {\r\n      axiosInstanceFunc();\r\n    }\r\n  });\r\n}\r\n\r\nexport function secondstotime(time01,time00)\r\n{\r\n    var secs=(time01-time00)/1000,\r\n        t = new Date(1970,0,1);\r\n    t.setSeconds(secs);\r\n    var s = t.toTimeString().substr(0,8);\r\n    if(secs > 86399)\r\n        s = Math.floor((t - Date.parse(\"1/1/70\")) / 3600000) + s.substr(2);\r\n    s+=':'+String((time01-time00) % 1000);\r\n    return s;\r\n}\r\n\r\nexport function getCursorPosition(e) {\r\n  let posx = 0,\r\n      posy = 0;\r\n\r\n  if (!e) var e = window.event;\r\n\r\n  if (e.pageX || e.pageY) {\r\n    posx = e.pageX;\r\n    posy = e.pageY;\r\n  }\r\n  else if (e.clientX || e.clientY) {\r\n    posx = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\r\n    posy = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;\r\n  }\r\n  return {x:posx,y:posy};\r\n}\r\n","C:\\webclient\\rvkp-react\\src\\Layout.js",[],"C:\\webclient\\rvkp-react\\src\\messages.js",["152"],"export default {\r\n  ru: {\r\n    title: 'УК \"РОСВОДОКАНАЛ\"',\r\n    sidebarTitle: 'Меню',\r\n    description: 'Система РВК.П-РЕАКТ',\r\n    ab:'ФЛ',\r\n    en:'ЮЛ',\r\n    load_watermeter_values:'Ввод показаний',\r\n    load_pays:'Загрузка оплат',\r\n    exit:'Выход',\r\n    dashboard: 'لوحة القيادة',\r\n    components: 'مكونات',\r\n    dropdown: 'اسقاط',\r\n    submenu: 'قائمة فرعية',\r\n    multiLevel: 'متعدد المستويات',\r\n    collapsed: 'انطوى',\r\n    rtl: 'ر ت ل',\r\n    image: 'صورة الخلفية',\r\n    new: 'جديد',\r\n    withPrefix: 'مع البادئة',\r\n    withSuffix: 'مع اللاحقة',\r\n    viewSource: 'عرض الكود',\r\n  },\r\n  en: {\r\n    title: 'UK \"ROSVODOKANAL\"',\r\n    sidebarTitle: 'Menu',\r\n    description:'React sidebar library with dropdown menus and unlimited number of nested submenus',\r\n    ab:'Abonent',\r\n    en:'Enterprice',\r\n    load_watermeter_values:'Enter values for watermeters',\r\n    load_pays:'Load pays',\r\n    exit:'Exit',\r\n    dashboard: 'Dashboard',\r\n    components: 'Components',\r\n    dropdown: 'Dropdown',\r\n    submenu: 'Submenu',\r\n    multiLevel: 'Multi Level',\r\n    collapsed: 'Collapsed',\r\n    rtl: 'RTL',\r\n    image: 'Background image',\r\n    new: 'NEW',\r\n    withPrefix: 'With Prefix',\r\n    withSuffix: 'With Suffix',\r\n    viewSource: 'View Source',\r\n  },\r\n};\r\n","C:\\webclient\\rvkp-react\\src\\Enter.js",["153","154"],"import React, { useState, useRef, useEffect } from 'react';\r\nimport './styles/enter.css';\r\nimport EnterLogin from './img/enter_login.png';\r\nimport EnterPassword from './img/enter_password.png';\r\nimport {setAuth} from './common.js';\r\nimport SelectC from './components/SelectC';\r\nimport {Switch,Route} from 'react-router-dom';\r\nimport {setAuthByToken,createPool} from './common.js';\r\n\r\nfunction Enter({setIsAuth}) {\r\n  let [resultAuth,setResultAuth]=useState(null);\r\n  const refSelectC=useRef();\r\n  const butEnterClick=()=>{\r\n    /*alert('click');\r\n    console.log('setIsAuth',setIsAuth);*/\r\n    setAuth({\"login\":document.getElementById('user').value,\"password\":document.getElementById('password').value,\"city\":localStorage.getItem('city')},\r\n      function(response) {\r\n        if ((response.status===200) & (!!response.data.token)) {\r\n            setIsAuth(true);\r\n        }\r\n        else {\r\n          setResultAuth('Неправильное сочетание логин/пароль');\r\n          setIsAuth(false);\r\n        }\r\n      }\r\n    );\r\n  }\r\n  var cityV=localStorage.getItem('city');\r\n  if (cityV===null) {\r\n      cityV='vrn';\r\n      localStorage.setItem('city', cityV);\r\n  }\r\n\r\n  const EnterByToken=(props) => {\r\n    useEffect(() => {\r\n      let pr_ok=true;\r\n      if (!!props.match.params) {\r\n        if (!((!!props.match.params.id) & (!!props.match.params.token) & (!!props.match.params.id))) {\r\n          pr_ok=false;\r\n        }\r\n      }\r\n      else {\r\n          pr_ok=false;\r\n      }\r\n      if (pr_ok) {\r\n        let data={id:props.match.params.id,token:props.match.params.token,database:props.match.params.database.toUpperCase()}\r\n        //console.log(data);\r\n        setAuthByToken(data,(response) => {\r\n          if (!!!response.data.message) {\r\n            setIsAuth(true);\r\n            window.location.href = '#'+response.data.params;\r\n          }\r\n          else if (response.status===200) {\r\n            //const tekResultAuth=<label style={{position:'absolute',top: '7.5rem',color:'white',left:'7%',fontSize:'14px',textShadow: '0 1px red'}}>{response.data.message}</label>;\r\n            setResultAuth(response.data.message);\r\n          }\r\n        });\r\n      }\r\n      else {\r\n        setResultAuth('Ошибка передачи параметров');\r\n      }\r\n    }, []);\r\n    return null;\r\n  }\r\n\r\n  const CreatePool=(props) => {\r\n    useEffect(() => {\r\n      let pr_ok=true;\r\n      if (!!props.match.params) {\r\n        if (!((!!props.match.params.user) & (!!props.match.params.password) & (!!props.match.params.tnsname))) {\r\n          pr_ok=false;\r\n        }\r\n      }\r\n      else {\r\n          pr_ok=false;\r\n      }\r\n      if (pr_ok) {\r\n        let data={user:props.match.params.user,password:props.match.params.password,tnsname:props.match.params.tnsname.toUpperCase()}\r\n        console.log(data);\r\n        createPool(data,(response) => {\r\n          if (!!response.data.message) {\r\n            const questV=response.data.message+'\\n'+\r\n                        'Переназначить БД для работы значением '+props.match.params.tnsname+'?'\r\n            if (window.confirm(questV)) {\r\n              localStorage.setItem('city', props.match.params.tnsname);\r\n            }\r\n          }\r\n          else if (response.status===200) {\r\n            localStorage.setItem('city', props.match.params.tnsname);\r\n            window.alert('Пул '+props.match.params.tnsname+' создан');\r\n          }\r\n        });\r\n      }\r\n      else {\r\n        setResultAuth('Ошибка передачи параметров');\r\n      }\r\n\r\n    }, []);\r\n    return null;\r\n  }\r\n\r\n  return(\r\n    <div className=\"loginContainer\">\r\n      <div id=\"login\" className=\"login\">\r\n          <h2>Авторизация</h2>\r\n          <div className=\"divSelectCity\">\r\n            <SelectC\r\n              ref={refSelectC}\r\n              obj={{label:'Город',\r\n                    id:\"select-city\",\r\n                    defaultValue:cityV,\r\n                    onChange:(event,thisV) => {\r\n                      localStorage.setItem('city', event.target.value);\r\n                    },\r\n                    data:[{label:'Воронеж',value:'vrn'},\r\n                          {label:'Оренбург',value:'orn'},\r\n                          {label:'Тюмень',value:'tmn'},\r\n                          {label:'Барнаул',value:'brnl'}\r\n                        ],\r\n                  }}\r\n            />\r\n          </div>\r\n          <div className=\"divUsrPwd\">\r\n            <img htmlFor=\"user\" className=\"icon-user\" src={EnterLogin} title=\"Логин\" alt=\"Логин\" />\r\n            <input className=\"user\" id=\"user\" />\r\n            <img htmlFor=\"password\" className=\"icon-user\" src={EnterPassword} title=\"Пароль\" alt=\"Пароль\"/>\r\n            <input type=\"password\" className=\"password\" id=\"password\" />\r\n            <label htmlFor=\"remember\"><input type=\"checkbox\" id=\"remember\" /><span className=\"remember\"/>Запомнить меня</label>\r\n            <input type=\"submit\" value=\"Войти\" className=\"but_enter\" onClick={()=>butEnterClick()}/>\r\n            <label style={{position:'absolute',top: '7.5rem',color:'white',left:'7%',fontSize:'14px',textShadow: '0 1px red'}}>{resultAuth}</label>\r\n            <Switch>\r\n              <Route exact path='/enterbytoken/:id/:token/:database' component={EnterByToken}/>\r\n            </Switch>\r\n            <Switch>\r\n              <Route exact path='/createpool/:user/:password/:tnsname' component={CreatePool}/>\r\n            </Switch>\r\n          </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Enter;\r\n","C:\\webclient\\rvkp-react\\src\\config.js",["155"],"var json = {};\r\n\r\n\r\nconst settings = fetch('/settings.json'\r\n    ,{\r\n      headers : {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n       }\r\n    }\r\n    )\r\n    .then(function(response){\r\n        return response.json();\r\n    })\r\n    .then(function(myJson) {\r\n        console.log(myJson);\r\n        return myJson;\r\n    });\r\n\r\nconsole.log(settings);\r\n\r\nexport {settings};\r\n","C:\\webclient\\rvkp-react\\src\\Aside.js",[],"C:\\webclient\\rvkp-react\\src\\Main.js",[],"C:\\webclient\\rvkp-react\\src\\components\\SelectC.js",[],"C:\\webclient\\rvkp-react\\src\\forms\\en\\Load_watermeter_values.js",["156","157","158","159","160","161","162"],"import React,{ useState,useRef,useEffect } from 'react';\r\n\r\nimport PopupTable from '../../components/PopupTable';\r\nimport SelectDB from '../../components/SelectDB';\r\nimport TableDB from '../../components/TableDB';\r\nimport DivImgClick from '../../components/DivImgClick';\r\nimport LoadState from '../../components/LoadState';\r\nimport CustomAlert from '../../components/CustomAlert';\r\nimport CustomConfirm from '../../components/CustomConfirm';\r\nimport CheckboxC from '../../components/CheckboxC';\r\n//import CustomConfirm from '../../components/CustomConfirm';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\r\nimport ModalStage from '../../components/ModalStage';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { parse,startOfMonth } from 'date-fns';\r\n\r\nimport $ from 'jquery';\r\n\r\nimport {getQuery,getExecQuery,getAuth,getCheckRight,idsLKKbyCity} from '../../common.js';\r\n\r\nfunction Load_watermeter_values() {\r\n  //хук для отслеживания изменения параметров компонетов (для упрощения взаимодействия компонентов)\r\n  let [paramGroupV, setParamGroupV] = useState({'cntrctID':-888,'lsID':-888,'checkWtrmtrs':true});\r\n  //хук-ссылки на элементы для удобной работы с ними\r\n  const refTableDB=useRef(),\r\n        refLoadState=useRef(),\r\n        refCustomAlert=useRef(),\r\n        refCustomConfirm=useRef(),\r\n        refModalStage=useRef(),\r\n        refModalStageTable=useRef(),\r\n        refModalStageChecked=useRef(),\r\n        refModalStageLKK=useRef();\r\n\r\n  //информация о пользователе\r\n  const [userInfo, setUserInfo] = useState({});\r\n  if (Object.keys(userInfo).length === 0) {\r\n    getAuth((result) => {\r\n        setUserInfo(result);\r\n    });\r\n  }\r\n\r\n  //делаем чтобы события срабатывали вовремя\r\n  useEffect(() => {\r\n    $('div[id=\"elPT\"] input').focus().select();\r\n\r\n\r\n    $(document).on( \"keyup\", function(event) {\r\n      var param1=event.which;\r\n      if(param1 == 121) {\r\n          //F10 - сохранить\r\n          divImgClickObj.handleClick();\r\n      }\r\n      else if(param1 == 120) {\r\n          //F9 - перемиститься в поле поиска договора\r\n          $('div[id=\"elPT\"] input').focus().select();\r\n      }\r\n      else if(param1 == 119) {\r\n          //F8 - расширенный поиск по договору\r\n          //console.log('refPopupTable',refPopupTable);\r\n          $('elpt button').trigger('click');\r\n      }\r\n      else if(param1 == 118) {\r\n          //F7 - выпадающий список ЛС\r\n          var rms_but=$('div#divLS span.multiselect-native-select div.btn-group');\r\n          $(rms_but).find('button.multiselect.dropdown-toggle').trigger('click');\r\n          $(rms_but).addClass('open show');\r\n          $(rms_but).find('input.form-control.multiselect-search').focus();\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      $(document).off( \"keyup\");\r\n    };\r\n  }, []);\r\n\r\n  //объект для кнопки \"Сохранить\"\r\n  const divImgClickObj={id:'saveWtrmtrs',\r\n                        img:{src:require('../../img/save.png').default,style:{height:'33px',width:'auto',cursor:'pointer'},title:\"Сохранить\"},\r\n                        handleClick:(event) => {\r\n                            /*console.log('pTableOutRef',refTableDB.current);\r\n                            console.log('event.target',event.target);*/\r\n                            let m_wtrmts=[],\r\n                                pr_ok=true,\r\n                                err_text='',\r\n                                tab_wtrmts_tbody=$('table#tab1 tbody');\r\n                            if (refTableDB.current.state.items.length===0) {\r\n                              refCustomAlert.current.setState({show:true,text:'Отсутствуют ПУ, сохранение показаний не возможно'});\r\n                              return false;\r\n                            }\r\n                            //проверки,удаляем предыдущие ошибки\r\n                            refTableDB.current.state.items.forEach(function(item,index) {\r\n                              delete refTableDB.current.state.items[index]['NEW_VALUE_ERROR'];\r\n                              if ((+item.NEW_VALUE===1) && (+item.NEW_VALUE_NUMBER>=0)) {\r\n                                var in_lv_val=item['NEW_VALUE_NUMBER'],\r\n                                    in_ld_val=item['NEW_DATE'],\r\n                                    z_num_v=item['SERNUM'],\r\n                                    err_beg='Для ПУ с заводским № '+z_num_v,\r\n                                    wtrmtr_id=item['RVKP_W_ID'];\r\n                                if (!isNaN(in_lv_val)){\r\n                                    if (isNaN(wtrmtr_id)) {\r\n                                        pr_ok=false;\r\n                                        //customAlert(err_beg+' не существует соответствующего ПУ в РВК.П');\r\n                                        err_text+=err_beg+' не существует соответствующего ПУ в РВК.П\\n';\r\n                                    }\r\n                                    var prev_val=parseFloat(item['LAST_VALUE']);\r\n                                    if (prev_val>in_lv_val) {\r\n                                        //customAlert(err_beg+' \"Новое показание\" должно быть больше последнего \"Показания\"');\r\n                                        err_text+=err_beg+' \"Новое показание\" должно быть больше последнего \"Показания\"\\n';\r\n                                        pr_ok=false;\r\n                                    }\r\n                                }\r\n                                if (!isNaN(in_lv_val)){\r\n                                    if (in_ld_val.length===0) {\r\n                                        pr_ok=false;\r\n                                        //customAlert(err_beg+' не заполнено поле \"Новая дата снятия\"');\r\n                                        err_text+=err_beg+' не заполнено поле \"Новая дата снятия\"\\n';\r\n                                    }\r\n                                    else {\r\n                                        var dateH=item['LAST_DATE'],\r\n                                            mass_date=dateH.split(\".\"),\r\n                                            dayH=parseInt(mass_date[0]),\r\n                                            monthH=parseInt(mass_date[1]),\r\n                                            yearH=parseInt(mass_date[2]);\r\n                                        mass_date= in_ld_val.split(\"-\");\r\n                                        var year=parseInt(mass_date[0]),\r\n                                            month=parseInt(mass_date[1]),\r\n                                            day=parseInt(mass_date[2]);\r\n                                        if ((monthH===month) & (yearH===year) & (dayH===day)) {\r\n                                            pr_ok=false;\r\n                                            err_text+=err_beg+' показания на указанную дату уже внесены\\n';\r\n                                        }\r\n                                        else if (((monthH>month) & (yearH===year)) || (yearH>year)) {\r\n                                            pr_ok=false;\r\n                                            err_text+=err_beg+' дата вносимых показаний меньше уже внесенных в систему\\n';\r\n                                        }\r\n                                    }\r\n                                }\r\n                                if (pr_ok) {\r\n                                  m_wtrmts.push(item);\r\n                                }\r\n                              }\r\n                            });\r\n\r\n                            if ((pr_ok) && (m_wtrmts.length===0)) {\r\n                                pr_ok=false;\r\n                                err_text+='Отсутствуют показания для внесения';\r\n                            }\r\n\r\n                            if (!pr_ok) {\r\n                                refCustomAlert.current.setState({show:true,text:err_text});\r\n                                return false;\r\n                            }\r\n\r\n                            refTableDB.current.setState({items:[...refTableDB.current.state.items]});\r\n                            //Сортируем массив ПУ: сначала \"обратка\r\n                            m_wtrmts.sort(function(a,b){\r\n                              return +a.RETURN_COMBINED_ID - +b.RETURN_COMBINED_ID;\r\n                            });\r\n                            var data = {};\r\n                            data.exec_params_in={};\r\n                            //data.query_params={};\r\n                            data.execsql=`DECLARE\\n\r\n                                            watermeter_list EnWatermeterList := EnWatermeterList();\\n\r\n                                          BEGIN\\n`;\r\n                            var accdate,\r\n                                ind=0;\r\n                            m_wtrmts.forEach(function(item,index) {\r\n                                ++ind;\r\n                                var watermeter_id = item.RVKP_W_ID,\r\n                                    new_watermeter_value = +item.NEW_VALUE_NUMBER;\r\n                                accdate=item.NEW_DATE;\r\n                                data.exec_params_in['wtrmtr_id_'+ind]=watermeter_id;\r\n                                data.exec_params_in['val_'+ind]= new_watermeter_value;\r\n\r\n                                data.execsql+=`watermeter_list.EXTEND();\\n`;\r\n                                data.execsql+=`watermeter_list(${ind}) := EnWatermeterType(:wtrmtr_id_${ind}`;\r\n                                data.execsql+=`,NULL`; // pipe_name\r\n                                data.execsql+=`,NULL`; // pipe_name\r\n                                data.execsql+=`,NULL`;\r\n                                data.execsql+=`,NULL`;\r\n                                data.execsql+=`,NULL`;\r\n                                data.execsql+=`,:val_${ind}`;\r\n                                data.execsql+=`,0`;\r\n                                data.execsql+=`,NULL);\\n`;\r\n                            });\r\n\r\n                            data.exec_params_in['accdate']= accdate;\r\n                            data.execsql+=`en_terminal_pkg.load_watermeter_values2(`;\r\n                            data.execsql+=`TO_DATE(:accdate, 'RRRR-MM-DD'), `;\r\n                            data.execsql+=`watermeter_list, `;\r\n                            data.execsql+=`:service, `;\r\n                            data.execsql+=`:async_mode, `;\r\n                            data.execsql+=`:usr_fio); END;`;\r\n                            data.exec_params_in['async_mode']= ($('#loadAsyncMode').prop('checked'))? 1:0;\r\n                            data.exec_params_in['service']='Терминал';\r\n                            data.exec_params_in['usr_fio']=userInfo.fio;\r\n\r\n                            data.sql=`SELECT watermeter_id\r\n                                            ,status\r\n                                            ,error_text\r\n                                        FROM TABLE (en_terminal_pkg.get_watermeter_values_result2())`;\r\n                            if (!!data.exec_params_in['wtrmtr_id_1']) {\r\n                              getExecQuery(data,function(response) {\r\n                                                  console.log(response);\r\n                                                  var pr_ok=true;\r\n                                                  $(tab_wtrmts_tbody).find('tr div.usr_error').text('');\r\n                                                  response.data.sqlrows.forEach(function(item0) {\r\n                                                    if (+item0['STATUS']===0) {\r\n                                                      pr_ok=false;\r\n                                                      //ищем нужный ПУ для сохранения текста ошибки\r\n                                                      refTableDB.current.state.items.forEach(function(item,index) {\r\n                                                          if (item['RVKP_W_ID']==item0['WATERMETER_ID']) {\r\n                                                            refTableDB.current.state.items[index]['NEW_VALUE_ERROR']=item0['ERROR_TEXT'];\r\n                                                            $(tab_wtrmts_tbody).find('tr:eq('+index+') div.usr_error').text(item0['ERROR_TEXT']);\r\n                                                          }\r\n                                                      });\r\n                                                    }\r\n                                                  });\r\n                                                  if (pr_ok) {\r\n                                                    //если нет ошибок, то перезапрашиваем данные из БД для их обновления в таблице\r\n                                                    refTableDB.current.getDataSQL();\r\n                                                  }\r\n                                                  else {\r\n                                                    //перерисовка таблицы с текстом ошибок\r\n                                                    //refTableDB.current.setState({items:newItems});\r\n                                                    refTableDB.current.setState({items:[...refTableDB.current.state.items]})\r\n                                                  }\r\n                                              },\r\n                                          refLoadState\r\n                                          );\r\n                            }\r\n                        },\r\n                        div:{style:null}\r\n                      };\r\n  //объект для поля с вызовом модального окна с таблицей с данными из БД\r\n  const popupTableObj={stateLoadObj:refLoadState,\r\n                       in_id:\"elPT\",\r\n                       tab_id:\"pt1\",\r\n                       modal_header:\"Выберите договор\",\r\n                       label:'№ договора',\r\n                       paramGroup:paramGroupV,\r\n                       setParamGroup:setParamGroupV,\r\n                       //наименование параметра для зависимых(дочерних) элементов\r\n                       parChealdID:\"cntrctID\",\r\n                       sql:`SELECT T.VAL VAL,\r\n                                    T.NAME,\r\n                                   T.C_NAME,\r\n                                   T.C_INN\r\n                              FROM (\r\n                                   select distinct\r\n                                         D2.SQUID VAL,\r\n                                         c1.sname C_NAME,\r\n                                         c1.inn C_INN,\r\n                                         d2.refid NAME\r\n                                   from documents d2\r\n                                   JOIN counterparties c1\r\n                                    ON d2.refsquid = C1.squid\r\n                                   WHERE d2.transblock = 1\r\n                                   AND d2.type IN (SELECT t.type1\r\n                                                     FROM type2type t\r\n                                                    WHERE t.relation = 'Является'\r\n                                                      AND t.type2 = 'СоглашениеЮрЛиц'\r\n                                                  )\r\n                                  ) T\r\n                             /*WHERE ROWNUM<=100*/\r\n                             ORDER BY C_NAME`,\r\n                      selectRowProp: {mode: 'radio',\r\n                                      //mode: 'checkbox',\r\n                                      bgColor: '#0070BA', // you should give a bgcolor, otherwise, you can't regonize which row has been selected\r\n                                      hideSelectColumn: true,  // enable hide selection column.\r\n                                      clickToSelect: true\r\n                                    },\r\n                      /*наличие полей(колонок) со служебными именами NAME и VAL(ключевое поле) обязательно*/\r\n                      columns:[{dataField:'VAL',text:'ID Договора',className:null,columnClassName:null,hidden:true\r\n                              },\r\n                              {dataField:'C_NAME',text:'Наименование контрагента',\r\n                               filter: textFilter({\r\n                                         delay: 1000,\r\n                                         placeholder: '...',\r\n                                       }),\r\n                              },\r\n                              {dataField:'C_INN',text:'ИНН контрагента',\r\n                               filter: textFilter({\r\n                                        delay: 1000,\r\n                                        placeholder: '...',\r\n                                      }),\r\n                              },\r\n                              {dataField:'NAME',text:'№ Договора',\r\n                               filter: textFilter({\r\n                                        delay: 1000,\r\n                                        placeholder: '...',\r\n                                      }),\r\n                              }\r\n                            ],\r\n                      paginationFactory:paginationFactory,\r\n                      paginationOptions:{paginationSize: 7,\r\n                                          sizePerPageList: [{\r\n                                              text: '10', value: 10\r\n                                            }, {\r\n                                              text: '50', value: 50\r\n                                            }, {\r\n                                              text: '100', value:100\r\n                                            }, {\r\n                                              text: '500', value:500\r\n                                            }]\r\n                                        },\r\n                      filterFactory:filterFactory\r\n              }\r\n  //объект для выпадающего списка с данными из БД\r\n  const selectDBobj={stateLoadObj:refLoadState,\r\n                    label:'ЛС',\r\n                    divID:'divLS',\r\n                    paramGroup:paramGroupV,\r\n                    setParamGroup:setParamGroupV,\r\n                    //массив параметров от которых зависит компонент\r\n                    parParentID:['cntrctID'],\r\n                    //наименование параметра для зависимых(дочерних) элементов\r\n                    parChealdID:\"lsID\",\r\n                    //необходимо наличие двух полей с именами value,label\r\n                    sql:`SELECT VAL \"value\",\r\n                               NAME \"label\"\r\n                          FROM (\r\n                        SELECT DISTINCT\r\n                                D.SQUID VAL,\r\n                                D.REFID||', '||DECODE(a2.id, NULL, NVL(d.description,NVL(lsa.adress,'Не опредлён')), a2.value) NAME,\r\n                                CASE WHEN lsa.adress IS NULL THEN 0\r\n                                    ELSE 1\r\n                                END SORT\r\n                          FROM documents d2\r\n                              ,documents d\r\n                              ,V_JUR_LS_WATER_OBJECT_ADRESS lsa\r\n                              ,attr_texts a2\r\n                         WHERE d2.transblock = 1\r\n                           AND d2.type IN (SELECT\r\n                                           t.type1\r\n                                          FROM\r\n                                           type2type t\r\n                                          WHERE\r\n                                           t.relation = 'Является'\r\n                                          AND t.type2 = 'СоглашениеЮрЛиц')\r\n                          AND d.did=d2.squid\r\n                          and lsa.ls_squid(+)=D.SQUID\r\n                          AND d2.squid in (:cntrctID)\r\n                          AND lsa.adress IS NOT NULL\r\n                          AND a2.obj_id(+) = d.squid\r\n                          AND a2.type_id(+) = mc.type_id('НаименованиеЛицевогоСчета')\r\n                          AND a2.transblock(+) >= 1\r\n                          AND a2.accdate(+) <= SYSDATE AND a2.endaccdate(+) > SYSDATE\r\n                        )\r\n                        ORDER BY SORT DESC,NAME`,\r\n                    //multiple:true\r\n                   };\r\n  //отрисовка тела модального окна отображения истории ПУ\r\n  const modalBody=(row) => {\r\n    const buttonRender=(row) => {\r\n      var date1=startOfMonth(new Date(row.ND_VAL)),\r\n          date2=parse(row.LAST_DATE, 'dd.MM.yyyy', new Date());\r\n      if (date2>=date1) {\r\n        return <Button\r\n                  onClick={() => {\r\n                    refCustomConfirm.current\r\n                      .setState({show:true,\r\n                                 text:'Вы действительно хотите удалить последнее показание?',\r\n                                 callback:(val) => {\r\n                                    if (val) {\r\n                                      var data = {};\r\n                                      data.exec_params_in={};\r\n                                      //data.query_params={};\r\n                                      data.execsql=`DECLARE\r\n                                                        t_error_text_rvkp VARCHAR2(1000);\r\n                                                    BEGIN\r\n                                                        t_error_text_rvkp:='';\r\n                                                        BEGIN\r\n                                                            en_watermeter.delete_value(:id_r);\r\n                                                            commit;\r\n                                                        EXCEPTION\r\n                                                            WHEN OTHERS THEN\r\n                                                              t_error_text_rvkp := SUBSTR(SQLERRM, 1, 1000);\r\n                                                              ROLLBACK;\r\n                                                        END;\r\n                                                        :error_text:=t_error_text_rvkp;\r\n                                                    END;`;\r\n                                      data.exec_params_in['id_r']=row.VALUE_ID;\r\n                                      data.exec_params_out=[];\r\n                                      data.exec_params_out.push({name:'error_text',type:'string'});\r\n                                      getExecQuery(data,\r\n                                                   function(response0) {\r\n                                                      if (response0.data.execout['error_text']===null) {\r\n                                                        refTableDB.current.getDataSQL();\r\n                                                      }\r\n                                                      else {\r\n                                                        refCustomAlert.current.setState({show:true,text:'При удалении показания произошла ошибка\\n'+response0.data.execout['error_text']});\r\n                                                      }\r\n                                                   }\r\n                                                 );\r\n                                    }\r\n                                 }\r\n                     });\r\n                  }}\r\n              >\r\n                  Удалить последнее показание\r\n              </Button>\r\n      }\r\n      else {\r\n        return null;\r\n      }\r\n    }\r\n    const tabHistoryPUID='tab_history_pu';\r\n    const changeDelHistory=(checked) => {\r\n        var tableHistoryPUtr=$('table#'+tabHistoryPUID+' tbody tr').show();\r\n        if (checked) {\r\n          refModalStageTable.current.state.items.forEach((item, i) => {\r\n              if (+item.TRANSBLOCK<1) {\r\n                $(tableHistoryPUtr).filter(':eq('+i+')').hide();\r\n              }\r\n          });\r\n        }\r\n    }\r\n    return <Container fluid>\r\n            <Row style={{marginBottom:'0.5rem'}}>\r\n               <Col>\r\n                  {buttonRender(row)}\r\n               </Col>\r\n               <Col>\r\n                  <CheckboxC\r\n                    ref={refModalStageChecked}\r\n                    obj={{id:'checkHistoryW',\r\n                          label:'Скрывать удаленные показания',\r\n                          onChange:(event,thisV) => {\r\n                            thisV.setState({checked:event.target.checked});\r\n                            changeDelHistory(event.target.checked);\r\n                          }\r\n                        }}\r\n                  />\r\n               </Col>\r\n             </Row>\r\n             <Row>\r\n               <Col>\r\n                 <TableDB\r\n                    ref={refModalStageTable}\r\n                    obj={{stateLoadObj:refLoadState,\r\n                          tab_id:tabHistoryPUID,\r\n                          sql:`WITH WH_R AS (\r\n                                 SELECT DISTINCT wv.accdate DATE_R,\r\n                                        wv.ID id_r,\r\n                                        wv.indication value_r,\r\n                                        case WHEN wv.transblock >= 1 AND wv.transblock IS NOT NULL then 'Не удалено'\r\n                                         WHEN wv.transblock<1 AND wv.transblock IS NOT NULL THEN 'Удалено'\r\n                                         ELSE NULL\r\n                                       end pr_del,\r\n                                       wv.transblock,\r\n                                       wv.INFO_FROM,\r\n                                       t3.name V_TYPE\r\n                                   FROM en_watermeter_values wv,\r\n                                      mc_types t3\r\n                                  WHERE wv.watermeter_id=:wtrmtr_id\r\n                                    AND wv.type_id=T3.ID\r\n                                    AND wv.accdate IS NOT NULL\r\n                                 )\r\n                                 SELECT TO_CHAR(DATE_R,'DD.MM.RRRR') DATE_V,\r\n                                      value_r,\r\n                                      CASE WHEN value_r IS NOT NULL AND transblock>=1 THEN value_r-\r\n                                         NVL((SELECT MAX(WH2.value_r) keep (dense_rank first  ORDER BY WH2.DATE_R DESC)\r\n                                            FROM WH_R WH2\r\n                                           WHERE WH2.DATE_R<WH_R.DATE_R\r\n                                             AND WH2.value_R IS NOT NULL\r\n                                             AND transblock>=1\r\n                                           ),0)\r\n                                      END volume_r,\r\n                                      id_r,\r\n                                      PR_DEL,\r\n                                      INFO_FROM,\r\n                                      V_TYPE,\r\n                                      transblock\r\n                                   FROM WH_R\r\n                                 ORDER BY DATE_R DESC,id_r DESC`,\r\n                          paginationFactory:paginationFactory,\r\n                          paginationOptions:{paginationSize: 7,\r\n                                             sizePerPageList: [{\r\n                                                 text: '50', value: 50\r\n                                               }, {\r\n                                                 text: '100', value:100\r\n                                               }, {\r\n                                                 text: '500', value:500\r\n                                               },{\r\n                                                   text: '1000', value: 1000\r\n                                                 }]\r\n                                           },\r\n                          keyField:'ID_R',\r\n                          columns:[{dataField:'DATE_V',text:'Дата',headerAttrs: (column, colIndex) => ({ 'width': `110px` })},\r\n                                  {dataField:'VALUE_R',text:'Значение',headerAttrs: (column, colIndex) => ({ 'width': `100px` })},\r\n                                  {dataField:'VOLUME_R',text:'Расход',headerAttrs: (column, colIndex) => ({ 'width': `100px` })},\r\n                                  {dataField:'PR_DEL',text:'Признак удаления',headerAttrs: (column, colIndex) => ({ 'width': `150px` })},\r\n                                  {dataField:'INFO_FROM',text:'Получено от',headerAttrs: (column, colIndex) => ({ 'width': `100px` })},\r\n                                  {dataField:'V_TYPE',text:'Тип',headerAttrs: (column, colIndex) => ({ 'width': `170px` })},\r\n                                ],\r\n                          parSQL:{wtrmtr_id:row.RVKP_W_ID},\r\n                          afterLoadData:function(thisV) {\r\n                            //по-умолчанию чекбокс \"Скрывать удаленные показания\" включен, запускаем обработку для этого\r\n                            changeDelHistory(refModalStageChecked.current.state.checked);\r\n                          }\r\n                         }}\r\n                 />\r\n               </Col>\r\n            </Row>\r\n         </Container>\r\n  }\r\n  //объект для таблицы с данными из БД\r\n  const tableDBObj={stateLoadObj:refLoadState,\r\n                    tableContainerClass:'max-content',\r\n                    bodyClasses:'body_row_dblclick',\r\n                    tab_id:\"tab1\",\r\n                    paramGroup:paramGroupV,\r\n                    parParentID:['cntrctID','lsID'],\r\n                    sql:`WITH T AS (\r\n                            SELECT x2.watermeter_id\r\n                                  ,x2.serial_number\r\n                                  ,x2.unit_name\r\n                                  ,X2.W_ACCDATE\r\n                                  ,X2.W_ENDACCDATE\r\n                                  ,v3.indication last_value\r\n                                  ,CASE WHEN v3.info_from LIKE 'Waterman' THEN 'РВК.Платформа'\r\n                                        ELSE v3.info_from\r\n                                   END last_info_from\r\n                                  ,DECODE(t3.name, 'Показание', v3.accdate, NULL) last_value_accdate\r\n                                  ,DECODE(t3.name, 'Показание', v3.Textinfo, NULL) USR\r\n                                  ,MAX(DECODE(t3.name, 'ОкончаниеПоверки', v3.accdate, NULL)) OVER (PARTITION BY x2.watermeter_id) last_check_endaccdate\r\n                                  ,return_combined_id\r\n                                  ,CASE WHEN return_combined_id=1 THEN 'Обрат.'\r\n                                        WHEN return_combined_id=2 THEN 'Комб.'\r\n                                        ELSE 'Прямые'\r\n                                  END return_combined_name\r\n                                  ,TO_CHAR(MAX(s.mount_accdate) OVER (PARTITION BY x2.watermeter_id),'DD.MM.RRRR') mount_accdate\r\n                                  ,X2.transblock\r\n                                  ,ROW_NUMBER() OVER (PARTITION BY x2.watermeter_id ORDER BY DECODE(t3.name, 'Показание', v3.accdate, NULL) DESC NULLS LAST) rn\r\n                                  ,v3.ID VALUE_ID\r\n                            FROM (SELECT DISTINCT w.id watermeter_id\r\n                                         ,w.serial_number\r\n                                         ,w.accdate W_ACCDATE\r\n                                         ,w.endaccdate W_ENDACCDATE\r\n                                         ,DECODE(mc2.name, 'ТрубаХВ', 'ХВ','ТрубаГВ', 'ГВ', 'ТрубаСтоки', 'Стоки', 'Стоки') unit_name\r\n                                         ,DECODE(mc.name,'ПриборУчетаПоТрубе',3,'ПриборУчетаПоТрубеОбр',1,'ПриборУчетаПоТрубеКомб',2) return_combined_id\r\n                                         ,w.transblock\r\n                                      from en_pipes p\r\n                                      join attr_ids ai\r\n                                        on ai.obj_id=p.id\r\n                                      join mc_types mc\r\n                                        on mc.id=ai.type_id\r\n                                       and mc.name in ('ПриборУчетаПоТрубе','ПриборУчетаПоТрубеОбр','ПриборУчетаПоТрубеКомб')\r\n                                      join en_fact_specifications f on f.pipe_id=p.id and f.transblock>=1\r\n                                      join en_consumption_points cp on cp.id=f.consume_point_id\r\n                        \t\t\t        join en_contract_balances cb on (cb.id = cp.balance_id and cb.transblock >= 0)\r\n                                      join documents ls\r\n                                        on ls.squid=cp.jur_ls_squid\r\n                                       AND ls.type = 'ABONENT'\r\n                                       AND ls.transblock = 1\r\n                                      join documents dc\r\n                                        on ls.did = dc.squid\r\n                                        AND dC.transblock = 1\r\n                                      join en_watermeters w\r\n                                        on w.id=ai.value\r\n                                      join mc_types mc2\r\n                                        on mc2.id = p.type_id\r\n                                      where p.transblock>=1\r\n                                      and dc.squid in (:cntrctID)\r\n                                      and ls.squid in (:lsID)\r\n                                union all\r\n                                    SELECT distinct w.id watermeter_id\r\n                                         ,w.serial_number\r\n                                         ,w.accdate W_ACCDATE\r\n                                         ,w.endaccdate W_ENDACCDATE\r\n                                         ,DECODE(mc2.name, 'ТрубаХВ', 'ХВ','ТрубаГВ', 'ГВ', 'ТрубаСтоки', 'Стоки', 'Стоки') unit_name\r\n                                         ,DECODE(mc.name,'ВходитВАгрегат',4, 'СетьВодоснабжения',5) return_combined_id\r\n                                         ,w.transblock\r\n                                      from en_pipes p\r\n                                      join attr_ids ai\r\n                                        on ai.obj_id = p.agr_pipe_id\r\n                                      join en_fact_specifications f on f.pipe_id=p.agr_pipe_id and f.transblock>=1\r\n                                      join en_consumption_points cp on cp.id=f.consume_point_id\r\n                        \t\t\t  join en_contract_balances cb on (cb.id = cp.balance_id and cb.transblock >= 0)\r\n                                      join documents ls\r\n                                        on ls.squid=cp.jur_ls_squid\r\n                                       AND ls.type = 'ABONENT'\r\n                                       AND ls.transblock = 1\r\n                                      join documents dc\r\n                                        on ls.did = dc.squid\r\n                                        AND dC.transblock = 1\r\n                                    join attr_ids ai1\r\n                                        on ai1.obj_id=p.id\r\n                                    join mc_types mc\r\n                                        on mc.id=ai1.type_id\r\n                                     and mc.name in ('ПриборУчетаПоТрубе','ПриборУчетаПоТрубеОбр','ПриборУчетаПоТрубеКомб', 'ВходитВАгрегат' )\r\n                                      join en_watermeters w\r\n                                        on w.id=ai1.value and w.transblock = 1\r\n                                      join mc_types mc2\r\n                                        on mc2.id = p.type_id\r\n                                      where p.transblock>=1\r\n                                      and dc.squid in (:cntrctID)\r\n                                      and ls.squid in (:lsID)\r\n                             ) x2\r\n                                ,en_watermeter_values v3\r\n                                ,mc_types t3\r\n                                ,w_seals s\r\n                          WHERE v3.watermeter_id(+) = x2.watermeter_id\r\n                            AND v3.transblock(+) >= 1\r\n                            AND t3.id(+) = v3.type_id\r\n                            AND S.EN_WATERMETER_ID(+) = x2.watermeter_id\r\n                        )\r\n\r\n                        SELECT T.watermeter_id RVKP_W_ID\r\n                              ,NVL(T.serial_number,'ID'||T.watermeter_id) SERNUM\r\n                              ,T.unit_name NAME\r\n                              ,T.last_value\r\n                              ,T.last_info_from\r\n                              ,TO_CHAR(T.last_value_accdate,'DD.MM.RRRR') LAST_DATE\r\n                              ,TO_CHAR(T.last_check_endaccdate,'DD.MM.RRRR') DATETEST\r\n                              ,NVL(T.last_value,0)-NVL(T2.VALUE_PREV,0) VOLUME\r\n                              ,case when (NVL(T.last_check_endaccdate,TO_DATE('01.01.4000','DD.MM.RRRR'))<ADD_MONTHS(trunc(sysdate,'mm'),-1))\r\n                                        OR (w_accdate>SYSDATE OR w_endaccdate < sysdate)\r\n                                        OR transblock<1 THEN 0\r\n                                    else 1\r\n                               end new_value,\r\n                               NVL(ND.VAL,TO_CHAR(LAST_DAY(SYSDATE), 'RRRR-MM-DD'))  new_date,\r\n                               0 NEW_VOLUME,\r\n                               T.USR,\r\n                               return_combined_id,\r\n                               return_combined_name,\r\n                               mount_accdate,\r\n                               NVL(ND.VAL,TO_CHAR(SYSDATE,'RRRR-MM-DD')) ND_VAL,\r\n                               t.VALUE_ID\r\n                          FROM T\r\n                          LEFT JOIN (SELECT T.last_value VALUE_PREV,\r\n                                            T.watermeter_id\r\n                                       FROM T\r\n                                      WHERE T.RN=2\r\n                                    )  T2 ON T.watermeter_id=T2.watermeter_id\r\n                        LEFT JOIN (select TO_CHAR(max(p.endaccdate),'RRRR-MM-DD') VAL from POSTS p\r\n                                    where nvl(p.transblock,2)=1\r\n                                      and p.cracc='ПредельнаяДата_WATER'\r\n                                      and p.crhid='0'\r\n                                   ) ND ON 1=1\r\n                         WHERE T.rn = 1`,\r\n                   /*selectRowProp: {mode: 'radio',\r\n                                   bgColor: '#0070BA', // you should give a bgcolor, otherwise, you can't regonize which row has been selected\r\n                                   hideSelectColumn: true,  // enable hide selection column.\r\n                                   clickToSelect: true,  // you should enable clickToSelect, otherwise, you can't select column.\r\n                                   selected:['RVKP_W_ID']\r\n                                 },*/\r\n                   keyField:'RVKP_W_ID',\r\n                   columns:[{dataField:'RVKP_W_ID',text:'ID ПУ',className:null,classes:null,hidden:true},\r\n                           {dataField:'NAME',text:'Усл.',headerAttrs: (column, colIndex) => ({ 'width': `50px` })},\r\n                           {dataField:'SERNUM',text:'Заводской №',headerAttrs: (column, colIndex) => ({ 'width': `100px` }),\r\n                             filter: textFilter({\r\n                                        //delay: 1000, // default is 500ms\r\n                                        /*style: {\r\n                                          backgroundColor: 'yellow'\r\n                                        },*/\r\n                                        //className: 'test-classname',\r\n                                        placeholder: '...',\r\n                                        //onClick: e => console.log(e)\r\n                                        /*onFilter: filterVal => {\r\n                                          //console.log(`Filter Value: ${filterVal}`)\r\n                                          deltaCheckWtrmtrs(paramGroupV['checkWtrmtrs']);\r\n                                        }*/\r\n                                      })\r\n                           },\r\n                           {dataField:'DATETEST',text:'Окончание поверки',headerAttrs: (column, colIndex) => ({ 'width': `110px` })},\r\n                           {dataField:'LAST_DATE',text:'Дата снятия',headerAttrs: (column, colIndex) => ({ 'width': `110px` }),classes:'LAST_DATE'},\r\n                           {dataField:'LAST_VALUE',text:'Показание',headerAttrs: (column, colIndex) => ({ 'width': `110px` })},\r\n                           {dataField:'VOLUME',text:'Расход',headerAttrs: (column, colIndex) => ({ 'width': `90px` })},\r\n                           {dataField:'LAST_INFO_FROM',text:'Источник',headerAttrs: (column, colIndex) => ({ 'width': `110px` })},\r\n                           {dataField:'NEW_DATE',text:'Новая дата снятия',headerAttrs: (column, colIndex) => ({ 'width': `180px` }),\r\n                            formatter:(cell, row, rowIndex)=>{\r\n                                const thisV=refTableDB.current;\r\n                                function handleChange(event) {\r\n                                  //row['NEW_DATE']=event.target.value;\r\n                                  var newStateItems=[...thisV.state.items];\r\n                                  newStateItems[rowIndex]['NEW_DATE']=event.target.value;\r\n                                  thisV.setState({items:newStateItems});\r\n                                }\r\n                                if (+row['NEW_VALUE']===1) {\r\n                                  return (\r\n                                  <FormControl\r\n                                    aria-describedby=\"basic-addon2\"\r\n                                    type=\"date\"\r\n                                    onChange={handleChange}\r\n                                    defaultValue={cell}\r\n                                    id={'ld_'+row['RVKP_W_ID']}\r\n                                    style={{width:'10em'}}\r\n                                    bsPrefix=\"bootstrap-form-control\"\r\n                                  />);\r\n                                }\r\n                              }\r\n                           },\r\n                           {dataField:'NEW_VALUE',text:'Новое показание',headerAttrs: (column, colIndex) => ({ 'width': `140` }),\r\n                            formatter:(cell, row, rowIndex)=> {\r\n                               const thisV=refTableDB.current;\r\n\r\n                               function handleChange(event) {\r\n                                 var value=0;\r\n                                 if (+row['NEW_VALUE']===1) {\r\n                                   if (!!event.target.value) {\r\n                                     if (!!row['LAST_VALUE']) {\r\n                                         value=+event.target.value-+row['LAST_VALUE'];\r\n                                     }\r\n                                     thisV.state.items[rowIndex]['NEW_VOLUME']=value;\r\n                                     thisV.state.items[rowIndex]['NEW_VALUE_NUMBER']=+event.target.value;\r\n                                     thisV.setState({items:[...thisV.state.items]});\r\n                                     //таблица не перерисовывается автоматически, т.к. это происходит внутри formatter, а это блокировано самим компонентом\r\n                                     $(event.target).closest('td').next().html(value);\r\n                                   }\r\n                                 }\r\n                               }\r\n\r\n                               function handleKeyDown(event) {\r\n                                 if (event.keyCode === 13) {\r\n                                    //ищем ближайшую строку, если нету, сохраняем\r\n                                    var tr_tek=$(event.target).closest('tr');\r\n                                    if ((+event.target.value>0) & (!$(tr_tek).hasClass('usr_sel'))) {\r\n                                        $(tr_tek).addClass('usr_sel');\r\n                                    }\r\n                                    tr_tek=$(tr_tek).next();\r\n                                    while (($(tr_tek).is('tr')) & ($(tr_tek).find(\"div[id='new_volume_block']\").length===0)) {\r\n                                        tr_tek=$(tr_tek).next();\r\n                                    }\r\n                                    if ($(tr_tek).is('tr')) {\r\n                                        $(tr_tek).find(\"div[id='new_volume_block'] input\").focus().select();\r\n                                    }\r\n                                    else {\r\n                                        $('#saveWtrmtrs').trigger('click');\r\n                                    }\r\n                                 }\r\n                               }\r\n\r\n                               if (+cell===1) {\r\n                                 return (\r\n                                     <div id=\"new_volume_block\">\r\n                                       <FormControl\r\n                                         aria-describedby=\"basic-addon2\"\r\n                                         type=\"number\"\r\n                                         onChange={handleChange}\r\n                                         onKeyDown={handleKeyDown}\r\n                                         style={{width:'7em'}}\r\n                                         bsPrefix=\"bootstrap-form-control\"\r\n                                       />\r\n                                       <div className=\"usr_error\"></div>\r\n                                     </div>\r\n                                 );\r\n                               }\r\n                             }\r\n                           },\r\n                           {dataField:'NEW_VOLUME',text:'Новый расход',headerAttrs: (column, colIndex) => ({ 'width': `90px` })},\r\n                           {dataField:'RETURN_COMBINED_NAME',text:'Вид ПУ',headerAttrs: (column, colIndex) => ({ 'width': `100px` })},\r\n                           {dataField:'USR',text:'Пользователь',headerAttrs: (column, colIndex) => ({ 'width': `110px` })},\r\n                           {dataField:'MOUNT_ACCDATE',text:'Дата последней опломбировки',headerAttrs: (column, colIndex) => ({ 'width': `130px` })},\r\n                           {dataField:'RETURN_COMBINED_ID',text:'ID Вида ПУ',hidden:true},\r\n                         ],\r\n                    afterLoadData:function(thisV) {\r\n                        deltaCheckWtrmtrs(paramGroupV['checkWtrmtrs']);\r\n                        var tab_tr=$('table#tab1 tbody tr'),\r\n                            tr_tek=$(tab_tr).first();\r\n                        while (($(tr_tek).is('tr')) & ($(tr_tek).find(\"div#new_volume_block\").length===0)) {\r\n                            tr_tek=$(tr_tek).next();\r\n                        }\r\n                        if ($(tr_tek).is('tr')) {\r\n                            $(tr_tek).find(\"div#new_volume_block input\").focus().select();\r\n                        }\r\n                        if (refModalStage.current.state.modalShow) {\r\n                            //ищем новую строку по сохраненному ID\r\n                            for (var i = 0; i < thisV.state.items.length; i++) {\r\n                              if (thisV.state.items[i][thisV.props.obj.keyField]===thisV.state.selectRow[0][thisV.props.obj.keyField]) {\r\n                                  refModalStage.current.setState({body:modalBody(thisV.state.items[i])});\r\n                                  refModalStageTable.current.getDataSQL();\r\n                                  break;\r\n                              }\r\n                            }\r\n                        }\r\n                    },\r\n                    //paginationFactory:paginationFactory,\r\n                    filterFactory:filterFactory,\r\n                    filterFactoryIn:{afterFilter:function (newResult, newFilters) {\r\n                                                  /*console.log(newResult);\r\n                                                  console.log(newFilters);*/\r\n                                                  deltaCheckWtrmtrs(paramGroupV['checkWtrmtrs']);\r\n                                                }\r\n                                    },\r\n                    rowEvents: {onDoubleClick: (e, row, rowIndex) => {\r\n                                 if (!$(e.target).is('input')) {\r\n                                   refTableDB.current.setState({selectRow:[row]});\r\n                                   refModalStage.current.setState({\r\n                                     modalShow:true,\r\n                                     header:'История показаний ПУ № '+row.SERNUM,\r\n                                     nextButtonDisplay:'none',\r\n                                     body:modalBody(row)\r\n                                   });\r\n                                 }\r\n                               }},\r\n                   };\r\n  //объект для работы со стилями полосы загрузки\r\n  const deltaCheckWtrmtrs=(checked)=>{\r\n    $('table#tab1 tbody tr').each(function(i,elem) {\r\n      $(elem).show();\r\n      $(elem).removeClass('usr_sel');\r\n      var el_wtrmtr_val=$(elem).find('div[id=\"new_volume_block\"] input');\r\n      if (($(elem).find('td').length>1) && ($(el_wtrmtr_val).length===0) && (checked)) {\r\n        $(elem).hide();\r\n      }\r\n\r\n      if ($(el_wtrmtr_val).length>0) {\r\n          var in_ld_val=$(elem).find('input[id^=\"ld_\"]').val().trim(),\r\n              dateH=$(elem).find('td.LAST_DATE').text();\r\n          var mass_date=dateH.split(\".\"),\r\n              dayH=parseInt(mass_date[0]),\r\n              monthH=parseInt(mass_date[1]),\r\n              yearH=parseInt(mass_date[2]);\r\n          mass_date=in_ld_val.split(\"-\");\r\n          var year=parseInt(mass_date[0]),\r\n              month=parseInt(mass_date[1]),\r\n              day=parseInt(mass_date[2]);\r\n          if ((dayH===1) & (month===monthH) & (year===yearH)) {\r\n              monthH-=1;\r\n          }\r\n          if (monthH==0) {\r\n              monthH=12;\r\n              yearH-=1;\r\n          }\r\n          if (((monthH>=month) & (yearH>=year)) || (yearH>year)) {\r\n              $(elem).addClass('usr_sel');\r\n          }\r\n      }\r\n    });\r\n  }\r\n  deltaCheckWtrmtrs(paramGroupV['checkWtrmtrs']);\r\n  const checkWtrmtrsHandleChange = (event) => {\r\n    let newObj = { ...paramGroupV };\r\n    newObj['checkWtrmtrs']=event.target.checked;\r\n    setParamGroupV(newObj);\r\n  };\r\n  //отрисовка кнопки \"удалить пользователя\" в соответствии с правами\r\n  const ButtonDelUserLKK=()=>{\r\n    if (Object.keys(userInfo).length > 0) {\r\n      if (!Array.isArray(userInfo.rights)) {\r\n          return null;\r\n      }\r\n      else {\r\n        if (getCheckRight('delUserLKK',userInfo.rights)) {\r\n          return  <div>\r\n                    <ModalStage ref={refModalStageLKK}/>\r\n                    <Button\r\n                      onClick={() => {\r\n                          if (paramGroupV.cntrctID===-888) {\r\n                              refCustomAlert.current.setState({show:true,text:'Не выбран договор ЮЛ'});\r\n                          }\r\n                          else {\r\n                              //ищем пользователя, в 2 итерации: сначала самого пользователя,\r\n                              //потом все возможные договоры и контрагенты по нему\r\n                              let data = {};\r\n                              data.params={cntrctID:paramGroupV.cntrctID};\r\n                              data.sql=`SELECT U.ID,\r\n                                               U.PAYER_SQUIDS,\r\n                                               U.LOGIN,\r\n                                               U.EMAIL\r\n                                          FROM counterparties c1\r\n                                         JOIN documents d\r\n                                           ON d.refsquid = C1.squid\r\n                                          AND d.transblock = 1\r\n                                          AND d.type IN (SELECT\r\n                                                          t.type1\r\n                                                         FROM\r\n                                                          type2type t\r\n                                                         WHERE\r\n                                                          t.relation = 'Является'\r\n                                                         AND t.type2 = 'СоглашениеЮрЛиц')\r\n                                         JOIN WWW_EN_USERS@WWWORA U\r\n                                           ON REGEXP_LIKE (U.PAYER_SQUIDS, '(^|,|\\\\s)'||c1.squid||'($|,|\\\\s)')\r\n                                        WHERE d.SQUID=:cntrctID\r\n                                          AND U.FILIAL_ID=`+idsLKKbyCity[localStorage.getItem('city')];\r\n                              getQuery(data,(response)=> {\r\n                                          if (response.data.length===1) {\r\n                                              let modalBody=<Container fluid>\r\n                                                              <Row style={{marginBottom:'0.5rem'}}>\r\n                                                                 <Col>\r\n                                                                    {'Логин - '+response.data[0]['LOGIN']+', Email - '+response.data[0]['EMAIL']}\r\n                                                                 </Col>\r\n                                                               </Row>\r\n                                                               <Row style={{marginBottom:'0.5rem'}}>\r\n                                                                  <Col>\r\n                                                                     Договора и контрагенты, привязанные к пользователю\r\n                                                                  </Col>\r\n                                                                </Row>\r\n                                                               <Row>\r\n                                                                 <Col>\r\n                                                                   <TableDB\r\n                                                                      obj={{stateLoadObj:refLoadState,\r\n                                                                            tab_id:'tabPayersUser',\r\n                                                                            sql:`SELECT c1.squid\r\n                                                                                        ,c1.sname name\r\n                                                                                        ,c1.originlocation jur_address\r\n                                                                                        ,c1.inn\r\n                                                                                        ,c1.kpp\r\n                                                                                        ,d.squid id\r\n                                                                                        ,d.refid\r\n                                                                                        ,TO_CHAR(d.accdate, 'DD.MM.RRRR') accdate\r\n                                                                                   FROM counterparties c1\r\n                                                                                       ,documents d\r\n                                                                                  WHERE d.refsquid = C1.squid\r\n                                                                                    AND d.transblock = 1\r\n                                                                                    AND d.type IN (SELECT\r\n                                                                                                    t.type1\r\n                                                                                                   FROM\r\n                                                                                                    type2type t\r\n                                                                                                   WHERE\r\n                                                                                                    t.relation = 'Является'\r\n                                                                                                   AND t.type2 = 'СоглашениеЮрЛиц')\r\n                                                                                    AND c1.squid in (`+response.data[0]['PAYER_SQUIDS']+`)\r\n                                                                                  ORDER BY C1.SNAME,C1.SQUID,d.refid`,\r\n                                                                            keyField:'ID',\r\n                                                                            columns:[{dataField:'NAME',text:'Наименование контрагента',headerAttrs: (column, colIndex) => ({ 'width': `110px` })},\r\n                                                                                    {dataField:'JUR_ADDRESS',text:'Юр. адрес',headerAttrs: (column, colIndex) => ({ 'width': `150px` })},\r\n                                                                                    {dataField:'INN',text:'ИНН',headerAttrs: (column, colIndex) => ({ 'width': `100px` })},\r\n                                                                                    {dataField:'KPP',text:'КПП',headerAttrs: (column, colIndex) => ({ 'width': `100px` })},\r\n                                                                                    {dataField:'REFID',text:'Номер договора',headerAttrs: (column, colIndex) => ({ 'width': `100px` })},\r\n                                                                                    {dataField:'ACCDATE',text:'Дата начала\\nдействия договора',headerAttrs: (column, colIndex) => ({ 'width': `100px` })},\r\n                                                                                  ],\r\n                                                                           }}\r\n                                                                   />\r\n                                                                 </Col>\r\n                                                              </Row>\r\n                                                           </Container>;\r\n                                              const getHandleButtonNext=() => {\r\n                                                  let data2={};\r\n                                                  data2.execsql=`BEGIN\r\n                                                                    delete from WWW_EN_CONNECT_REQUESTS t\r\n                                                                    where t.USER_ID=`+response.data[0]['ID']+`;\r\n                                                                    delete from WWW_EN_USERS t\r\n                                                                    where t.id=`+response.data[0]['ID']+`;\r\n                                                                 END;`;\r\n                                                  getExecQuery(data2,function(response2) {\r\n                                                                  console.log(response2);\r\n                                                                  refModalStageLKK.current.setState({modalShow:false});\r\n                                                                  refCustomAlert.current.setState({show:true,text:'Пользователь успешно удален'});\r\n                                                              },\r\n                                                              refLoadState\r\n                                                              );\r\n\r\n                                              };\r\n                                              refModalStageLKK.current.setState({modalShow:true,\r\n                                                                              header:'Найденный пользователь',\r\n                                                                              nextButtonLabel:'Удалить пользователя',\r\n                                                                              nextButtonDisplay:'block',\r\n                                                                              body:modalBody,\r\n                                                                              handleButtonNext:getHandleButtonNext\r\n                                                                             });\r\n                                          }\r\n                                          else  {\r\n                                              let txt;\r\n                                              if (response.data.length>1) {\r\n                                                  txt='По выбранному договору найдено более одного пользователя, удаление не возможно, обратитесь в тех. поддержку'\r\n                                              }\r\n                                              else {\r\n                                                  txt='По выбранному договору не найден пользователь';\r\n                                              }\r\n                                              refCustomAlert.current.setState({show:true,text:txt});\r\n                                          }\r\n                                       },\r\n                                       refLoadState\r\n                                      );\r\n                          }\r\n                      }}\r\n                   >\r\n                      Удалить пользователя ЛКК\r\n                  </Button>\r\n                </div>;\r\n        }\r\n        else {\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    else {\r\n      return null;\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"App En_load_watermeter_values\">\r\n      <LoadState ref={refLoadState} />\r\n      <CustomAlert ref={refCustomAlert}/>\r\n      <Container fluid>\r\n        <Row>\r\n          <Col>\r\n            <PopupTable obj={ popupTableObj }/>\r\n          </Col>\r\n          <Col style={{margin: 'auto 0'}}>\r\n            <ButtonDelUserLKK/>\r\n          </Col>\r\n          <Col>\r\n            <DivImgClick obj={ divImgClickObj } />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <SelectDB obj={ selectDBobj }/>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={paramGroupV.checkWtrmtrs}\r\n                  onChange={checkWtrmtrsHandleChange}\r\n                  id=\"checkWTRMTRS\"\r\n                  color=\"primary\"\r\n                />\r\n              }\r\n              label=\"Скрывать недействующие ПУ\"\r\n            />\r\n          </Col>\r\n          <Col>\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  id=\"loadAsyncMode\"\r\n                  color=\"primary\"\r\n                />\r\n              }\r\n              label=\"Ввод/удаление показаний в несинхронном режиме\"\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row style={{marginTop:'1%'}}>\r\n          <Col >\r\n            <TableDB ref={refTableDB} obj={ tableDBObj }/>\r\n            <ModalStage ref={refModalStage}/>\r\n            <CustomConfirm ref={refCustomConfirm}/>\r\n          </Col>\r\n        </Row>\r\n        <Row style={{marginTop:'1%'}}>\r\n          <Col>\r\n            F10 - сохранить\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            F9 - переместиться в поле поиска договора\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            F8 - расширенный поиск по договору\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            F7 - выпадающий список ЛС\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            Enter при нахождении в поле поиска договора - запуск поиска\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            Tab при нахождении в поле поиска ЛС - переход к отфильтрованным ЛС\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            Enter при нахождении в поле \"Новое показание\" - переход к следующему показанию или сохранение (если текущий ПУ последний в списке)\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Load_watermeter_values;\r\n","C:\\webclient\\rvkp-react\\src\\forms\\ab\\Load_watermeter_values.js",["163","164","165","166","167","168","169","170","171","172","173","174","175"],"import React,{ useState,useRef,useEffect } from 'react';\r\n\r\nimport paginationFactory from 'react-bootstrap-table2-paginator'\r\nimport SelectDB from '../../components/SelectDB';\r\nimport TableDB from '../../components/TableDB';\r\nimport DivImgClick from '../../components/DivImgClick';\r\nimport LoadState from '../../components/LoadState';\r\nimport InputDB from '../../components/InputDB';\r\nimport CustomAlert from '../../components/CustomAlert';\r\nimport CustomConfirm from '../../components/CustomConfirm';\r\nimport CheckboxC from '../../components/CheckboxC';\r\nimport ModalStage from '../../components/ModalStage';\r\nimport InputBC from '../../components/InputBC';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { parse,startOfMonth } from 'date-fns';\r\n//import InputGroup from 'react-bootstrap/InputGroup';\r\n\r\nimport $ from 'jquery'\r\n\r\nimport {getExecQuery} from '../../common.js';\r\n\r\nfunction Load_watermeter_values(props) {\r\n  //хук для отслеживания изменения параметров компонетов (для упрощения взаимодействия компонентов)\r\n  let [paramGroupV, setParamGroupV] = useState({lsNum:'-888',placeName:'',checkWtrmtrs:true});\r\n  //хук-ссылки на элементы для удобной работы с ними\r\n  let refTableDB=useRef(),\r\n      refLoadState=useRef(),\r\n      refInputDB=useRef(),\r\n      refCustomAlert=useRef(),\r\n      refCustomConfirm=useRef(),\r\n      refModalStage=useRef(),\r\n      refModalStageTable=useRef(),\r\n      refModalStageChecked=useRef();\r\n\r\n  //строка текста по найденному абоненту\r\n  let [abonentSearhe,setAbonentSearhe] = useState('');\r\n\r\n  const cityC=localStorage.getItem('city');\r\n\r\n  //параметры пришедшие извне\r\n  let params;\r\n  if (!!props.match.params.params) {\r\n    //console.log(props.match.params.params);\r\n    params=JSON.parse(props.match.params.params);\r\n  }\r\n\r\n  //делаем чтобы события срабатывали вовремя\r\n  useEffect(() => {\r\n    $('input#ls').focus().select();\r\n\r\n    $(document).on(\"keyup\", function(event) {\r\n      var param1=event.which;\r\n      if(param1 == 121) {\r\n          //F10 - сохранить\r\n          divImgClickObj.handleClick();\r\n      }\r\n      else if(param1 == 120) {\r\n          //F9 - перемиститься в поле поиска по ЛС\r\n          $('input#ls').focus().select();\r\n      }\r\n      else if(param1 == 119) {\r\n          //F8 - Запуск поиска\r\n          $('#butSearcheLS').trigger('click');\r\n      }\r\n      else if(param1 == 118) {\r\n          //F7 - Переместиться в поле поиска \"Улица\"\r\n          $('input#street').focus().select();\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      $(document).off(\"keyup\");\r\n    };\r\n\r\n  }, []);\r\n\r\n  const divImgClickObj={id:'saveWtrmtrs',\r\n                        img:{src:require('../../img/save.png'),style:{height:'33px',width:'auto',cursor:'pointer'},title:\"Сохранить\"},\r\n                        handleClick:function(event) {\r\n                            /*console.log('pTableOutRef',refTableDB.current);\r\n                            console.log('event.target',event.target);*/\r\n                            //удаляем предыдущие ошибки\r\n                            let m_wtrmts=[],\r\n                                pr_ok=true,\r\n                                err_text='',\r\n                                tab_wtrmts_tbody=$('table.tab_wtrmtrs tbody');\r\n                            if (refTableDB.current.state.items.length===0) {\r\n                              refCustomAlert.current.setState({show:true,text:'Отсутствуют ПУ, сохранение показаний не возможно'});\r\n                              return false;\r\n                            }\r\n                            //проверки,удаляем предыдущие ошибки\r\n                            refTableDB.current.state.items.forEach(function(item,index) {\r\n                              delete refTableDB.current.state.items[index]['NEW_VALUE_ERROR'];\r\n                              if ((item['PR_OPEN']!=='Закрыт') && (item.NEW_VALUE_NUMBER>0)) {\r\n                                var in_lv_val=item['NEW_VALUE_NUMBER'],\r\n                                    in_ld_val=item['NEW_DATE'],\r\n                                    z_num_v=item['SERNUM'],\r\n                                    err_beg='Для ПУ с заводским № '+z_num_v,\r\n                                    wtrmtr_id=item['RVKP_W_ID'];\r\n                                if (!isNaN(in_lv_val)){\r\n                                    if (isNaN(wtrmtr_id)) {\r\n                                        pr_ok=false;\r\n                                        //customAlert(err_beg+' не существует соответствующего ПУ в РВК.П');\r\n                                        err_text+=err_beg+' не существует соответствующего ПУ в РВК.П\\n';\r\n                                    }\r\n                                    var prev_val=parseFloat(item['LAST_VALUE']);\r\n                                    if (prev_val>in_lv_val) {\r\n                                        //customAlert(err_beg+' \"Новое показание\" должно быть больше последнего \"Показания\"');\r\n                                        err_text+=err_beg+' \"Новое показание\" должно быть больше последнего \"Показания\"\\n';\r\n                                        pr_ok=false;\r\n                                    }\r\n                                }\r\n                                if (!isNaN(in_lv_val)){\r\n                                    if (in_ld_val.length===0) {\r\n                                        pr_ok=false;\r\n                                        //customAlert(err_beg+' не заполнено поле \"Новая дата снятия\"');\r\n                                        err_text+=err_beg+' не заполнено поле \"Новая дата снятия\"\\n';\r\n                                    }\r\n                                    else {\r\n                                        var dateH=item['LAST_DATE'],\r\n                                            mass_date=dateH.split(\".\"),\r\n                                            dayH=parseInt(mass_date[0]),\r\n                                            monthH=parseInt(mass_date[1]),\r\n                                            yearH=parseInt(mass_date[2]);\r\n                                        mass_date= in_ld_val.split(\"-\");\r\n                                        var year=parseInt(mass_date[0]),\r\n                                            month=parseInt(mass_date[1]),\r\n                                            day=parseInt(mass_date[2]);\r\n                                        if ((monthH===month) & (yearH===year) & (dayH)) {\r\n                                            pr_ok=false;\r\n                                            //customAlert(err_beg+' показания за текущий расчетный месяц уже внесены');\r\n                                            err_text+=err_beg+' показания за текущий расчетный месяц уже внесены\\n';\r\n                                        }\r\n                                        else if (((monthH>month) & (yearH===year)) || (yearH>year)) {\r\n                                            pr_ok=false;\r\n                                            err_text+=err_beg+' дата вносимых показаний меньше уже внесенных в систему\\n';\r\n                                        }\r\n                                    }\r\n                                }\r\n                                if (pr_ok) {\r\n                                  m_wtrmts.push(item);\r\n                                }\r\n                              }\r\n                            });\r\n\r\n                            if ((pr_ok) && (m_wtrmts.length===0)) {\r\n                                pr_ok=false;\r\n                                err_text+='Отсутствуют показания для внесения';\r\n                            }\r\n\r\n                            if (!pr_ok) {\r\n                                refCustomAlert.current.setState({show:true,text:err_text});\r\n                                return false;\r\n                            }\r\n\r\n                            refTableDB.current.setState({items:[...refTableDB.current.state.items]});\r\n\r\n                            //Сортируем массив ПУ: сначала \"обратка\r\n                            m_wtrmts.sort(function(a,b){\r\n                              return +a.RETURN_COMBINED_ID - +b.RETURN_COMBINED_ID;\r\n                            });\r\n                            var data = {};\r\n                            data.exec_params_in={};\r\n                            //data.query_params={};\r\n                            data.execsql=`DECLARE\\n\r\n                                            watermeter_list AbWatermeterList := AbWatermeterList();\\n\r\n                                          BEGIN\\n`;\r\n                            var accdate,\r\n                                ind=0;\r\n                            m_wtrmts.forEach(function(item,index) {\r\n                                ++ind;\r\n                                var watermeter_id = item.RVKP_W_ID,\r\n                                    new_watermeter_value = +item.NEW_VALUE_NUMBER;\r\n                                accdate=item.NEW_DATE;\r\n                                data.exec_params_in['wtrmtr_id_'+ind]=watermeter_id;\r\n                                data.exec_params_in['val_'+ind]= new_watermeter_value;\r\n\r\n                                data.execsql+=`watermeter_list.EXTEND();\\n`;\r\n                                data.execsql+=`watermeter_list(${ind}) := AbWatermeterType(:wtrmtr_id_${ind}`;\r\n                                data.execsql+=`,NULL`; // pipe_name\r\n                                data.execsql+=`,:service`; // service\r\n                                data.execsql+=`,NULL`;// factory_number\r\n                                data.execsql+=`,NULL`;// last_value\r\n                                data.execsql+=`,NULL`;// last_accdate\r\n                                data.execsql+=`,:val_${ind}`; // new_value\r\n                                data.execsql+=`,NULL`; // last_check_endaccdate\r\n                                data.execsql+=`,0`;// status\r\n                                data.execsql+=`,NULL);\\n`;// error_text\r\n                            });\r\n\r\n                            data.exec_params_in['accdate']= accdate;\r\n                            data.execsql+=`ab_terminal_pkg.load_watermeter_values(`;\r\n                            data.execsql+=`TO_DATE(:accdate, 'RRRR-MM-DD'), `;\r\n                            data.execsql+=`watermeter_list, `;\r\n                            data.execsql+=`:service); END;`;\r\n                            //data.exec_params_in['async_mode']= ($('#loadAsyncMode').prop('checked'))? 1:0;\r\n                            data.exec_params_in['service']='Терминал';\r\n                            //data.exec_params_in['usr_fio']='Тест-реакт';\r\n\r\n                            data.sql=`SELECT watermeter_id\r\n                                            ,status\r\n                                            ,error_text\r\n                                        FROM TABLE (ab_terminal_pkg.get_watermeter_values_result())`;\r\n                            if (!!data.exec_params_in['wtrmtr_id_1']) {\r\n                              getExecQuery(data,function(response) {\r\n                                                  console.log(response);\r\n                                                  var pr_ok=true,\r\n                                                      tab_wtrmts_tbody=$('table.tab_wtrmtrs tbody');\r\n                                                  $(tab_wtrmts_tbody).find('tr div.usr_error').text('');\r\n                                                  response.data.sqlrows.forEach(function(item0) {\r\n                                                    if (+item0['STATUS']===0) {\r\n                                                      pr_ok=false;\r\n                                                      //ищем нужный ПУ для сохранения текста ошибки\r\n                                                      refTableDB.current.state.items.forEach(function(item,index) {\r\n                                                          if (item['RVKP_W_ID']==item0['WATERMETER_ID']) {\r\n                                                            refTableDB.current.state.items[index]['NEW_VALUE_ERROR']=item0['ERROR_TEXT'];\r\n                                                            $(tab_wtrmts_tbody).find('tr:eq('+index+') div.usr_error').text(item0['ERROR_TEXT']);\r\n                                                          }\r\n                                                      });\r\n                                                    }\r\n                                                  });\r\n                                                  //если форма открыта по ссылке, то после сохранения показаний выполняются доп.действия,\r\n                                                  //но момент их выполнения пока отличается в зависимости от филиала\r\n                                                  function after_save_wtrmtrs() {\r\n                                                      if (!!params) {\r\n                                                        if (params.placeFrom==='Load_pays') {\r\n                                                          //если форма открыта по ссылке из \"Загрузки оплат\", то обновляем запись\r\n                                                          //формируем строку для апдейта/инсерта по всем счетчикам по заводским номерам\r\n                                                          var upd_str_dop='',\r\n                                                              wtrm_date,\r\n                                                              data0={};\r\n                                                          data0.exec_params_in={};\r\n                                                          params.wtrmtrs.forEach(function(item0,i) {\r\n                                                            m_wtrmts.forEach(function(item1) {\r\n                                                              if (item1.SERNUM!==null) {\r\n                                                                if (item1.SERNUM.split(' ')[0]===item0) {\r\n                                                                  var par_name='wtrmtrVal'+String(i+1);\r\n                                                                  data0.exec_params_in[par_name]=String(item1.NEW_VALUE_NUMBER);\r\n                                                                  if (params.prInsert===1) {\r\n                                                                      upd_str_dop+=\",:\"+par_name;\r\n                                                                  }\r\n                                                                  else {\r\n                                                                      upd_str_dop+=',WATERMETER_VALUE'+String(i+1)+\"=:\"+par_name;\r\n                                                                  }\r\n                                                                  var tek_date=new Date(item1.NEW_DATE);\r\n                                                                  if (!!!wtrm_date) {\r\n                                                                      wtrm_date=tek_date;\r\n                                                                      data0.exec_params_in.wtrmtrDate=item1.NEW_DATE;\r\n                                                                  }\r\n                                                                  else if (tek_date>wtrm_date) {\r\n                                                                      wtrm_date=tek_date;\r\n                                                                      data0.exec_params_in.wtrmtrDate=item1.NEW_DATE;\r\n                                                                  }\r\n                                                                }\r\n                                                              }\r\n                                                            });\r\n                                                          });\r\n                                                          if (upd_str_dop!=='') {\r\n                                                            if (params.prInsert===1) {\r\n                                                                for (var j=(params.wtrmtrs.length+1); j<=6; j++) {\r\n                                                                    upd_str_dop+=\",NULL\";\r\n                                                                }\r\n                                                            }\r\n\r\n                                                            data0.exec_params_in.strId=params.strId;\r\n                                                            data0.execsql=`BEGIN\\n`;\r\n                                                            if (params.prInsert!==1) {\r\n                                                                data0.execsql+=`UPDATE LP_REESTR_STATUS\r\n                                                                                   SET WATERMETER_STATUS_CW='Внесен',\r\n                                                                                       WATERMETER_STATUS_HW='Внесен',\r\n                                                                                       WATERMETER_ERROR_TEXT_CW='Внесен',\r\n                                                                                       WATERMETER_ERROR_TEXT_HW='Внесен',\r\n                                                                                       WATERMETER_DATE=TO_DATE(:wtrmtrDate,'RRRR-MM-DD'),\r\n                                                                                       UPDDATE=SYSDATE`+\r\n                                                                                       upd_str_dop+`\r\n                                                                                 WHERE LP_REESTR_ID=:strId;\\n`;\r\n                                                            }\r\n                                                            else {\r\n                                                                data0.execsql+=`INSERT INTO LP_REESTR_STATUS\r\n                                                                                       (lp_reestr_id,\r\n                                                                                        watermeter_value1,\r\n                                                                                        watermeter_value2,\r\n                                                                                        watermeter_value3,\r\n                                                                                        watermeter_value4,\r\n                                                                                        watermeter_value5,\r\n                                                                                        watermeter_value6,\r\n                                                                                        watermeter_date,\r\n                                                                                        watermeter_status_cw,\r\n                                                                                        watermeter_error_text_cw,\r\n                                                                                        upddate,\r\n                                                                                        watermeter_status_hw,\r\n                                                                                        watermeter_error_text_hw\r\n                                                                                        )\r\n                                                                                VALUES (:strId\\n`+\r\n                                                                                         upd_str_dop+`\r\n                                                                                        ,TO_CHAR(TO_DATE(:wtrmtrDate,'RRRR-MM-DD'),'DD/MM/RRRR')\r\n                                                                                        ,'Внесен'\r\n                                                                                        ,'Внесен'\r\n                                                                                        ,SYSDATE\r\n                                                                                        ,'Внесен'\r\n                                                                                        ,'Внесен'\r\n                                                                                      );\\n`;\r\n                                                            }\r\n                                                            data0.execsql+=\"END;\";;\r\n                                                            getExecQuery(data0,\r\n                                                                         function(response0) {\r\n                                                                            console.log('обновление в файле загрузке реестра: '+response0);\r\n                                                                            //обновляем тиблицу в родительском окне\r\n                                                                            if (window.opener!==null) {\r\n                                                                                window.opener.postMessage(JSON.stringify({formSysName:'ab_load_watermeter_values',action:'updTabLoadPay'}), window.location.origin);\r\n                                                                            }\r\n                                                                         }\r\n                                                                       );\r\n                                                          }\r\n                                                        }\r\n                                                    }\r\n                                                  }\r\n                                                  if ((pr_ok) & (cityC==='vrn')) {\r\n                                                    //если нет ошибок, то пытаемся положить в историческую БД, если все ок, то перезапрашиваем данные из БД для их обновления в таблице\r\n                                                    refLoadState.current.setState((state) => ({vis:++state.vis}));\r\n                                                    var pr_ok_idb=true;\r\n                                                    refTableDB.current.state.items.forEach(function(item,index) {\r\n                                                        refTableDB.current.state.items[index]['STATE_QUERY_HBD']=true;\r\n                                                        if ((item['PR_OPEN']!=='Закрыт') && (item.NEW_VALUE_NUMBER>0)) {\r\n                                                          refTableDB.current.state.items[index]['STATE_QUERY_HBD']=false;\r\n                                                          var data0={};\r\n                                                          data0.exec_params_in={};\r\n                                                          data0.exec_params_in.wtrmtr_id_h=item['W_ID_H'];\r\n                                                          data0.exec_params_in.CurrValue=item['NEW_VALUE_NUMBER'];\r\n                                                          data0.exec_params_in.CurrDate=item['NEW_DATE'];\r\n                                                          data0.exec_params_in.item_index_in=index;\r\n                                                          data0.exec_params_out=[];\r\n                                                          data0.exec_params_out.push({name:'t_error',type:'number'});\r\n                                                          data0.exec_params_out.push({name:'t_error_text',type:'string'});\r\n                                                          data0.exec_params_out.push({name:'item_index_out',type:'number'});\r\n                                                          data0.execsql=`declare\r\n                                                                            vHouseId Number;\r\n                                                                            ID_H_NUM NUMBER;\r\n                                                                            t_error_text VARCHAR2(1000);\r\n                                                                            t_error       NUMBER(1);\r\n                                                                          begin\r\n                                                                              t_error := 1;\r\n                                                                              t_error_text:='';\r\n                                                                              BEGIN\r\n                                                                                ID_H_NUM:=TO_NUMBER(:wtrmtr_id_h);\r\n                                                                                Update prvp.prvCounterValue@RH set Value = :CurrValue, cDate = TO_DATE(:CurrDate, 'RRRR-MM-DD')\r\n                                                                                 where prvCounterId = ID_H_NUM\r\n                                                                                   and cDate between Trunc(LAST_DAY(TO_DATE(:CurrDate, 'RRRR-MM-DD')), 'MM') and LAST_DAY(TO_DATE(:CurrDate, 'RRRR-MM-DD'));\r\n                                                                                if SQL%NotFound then\r\n                                                                                  SELECT Max(hd.houseid) into vHouseId\r\n                                                                                   FROM prvp.prvhouseaddress@RH hd, prvp.prvaddress@RH ad, prvp.prvaccount@RH ac, prvp.prvCounter@RH c\r\n                                                                                   WHERE ac.prvaddressid = ad.id AND ad.houseid = hd.houseid\r\n                                                                                     AND ac.accountid = c.AccountId\r\n                                                                                     and c.id = ID_H_NUM;\r\n                                                                                  INSERT INTO prvp.prvCounterValue@RH\r\n                                                                                     (ID, PRVCOUNTERID, CDATE, VALUE, INPUTDATE, USERNAME, HOUSEID)\r\n                                                                                   VALUES\r\n                                                                                     (prvp.sq_prvCounterValue.NextVal@RH, ID_H_NUM, TO_DATE(:CurrDate, 'RRRR-MM-DD'), :CurrValue, sysDate, 'internet_rvkp', vHouseId);\r\n                                                                                end if;\r\n                                                                                prvp.FILL_COMMUNA_COUNTER_VALUES@RH(ID_H_NUM, Pac_Month.Date_To_Month@RH(LAST_DAY(TO_DATE(:CurrDate, 'RRRR-MM-DD'))));\r\n                                                                                Commit;\r\n                                                                               EXCEPTION\r\n                                                                                    WHEN OTHERS THEN\r\n                                                                                      ROLLBACK;\r\n                                                                                      t_error := 0;\r\n                                                                                      t_error_text := SUBSTR(SQLERRM, 1, 1000);\r\n                                                                               END;\r\n                                                                               :t_error:=t_error;\r\n                                                                               :t_error_text:=t_error_text;\r\n                                                                               :item_index_out:=:item_index_in;\r\n                                                                          end;`;\r\n                                                          getExecQuery(data0,\r\n                                                                       function(response0) {\r\n                                                                          var item_index=response0.data.execout['item_index_out'];\r\n                                                                          if (response0.data.execout['t_error']===0) {\r\n                                                                              pr_ok_idb=false;\r\n                                                                              var t_error_text=response0.data.execout['t_error_text'];\r\n                                                                              refTableDB.current.state.items[item_index]['NEW_VALUE_ERROR']=t_error_text;\r\n                                                                              $(tab_wtrmts_tbody).find('tr:eq('+item_index+') div.usr_error').text(t_error_text);\r\n                                                                          }\r\n                                                                          refTableDB.current.state.items[item_index]['STATE_QUERY_HBD']=true;\r\n                                                                       }\r\n                                                                     );\r\n                                                       }\r\n                                                    });\r\n                                                    var MyInt= setInterval(function(){\r\n                                                        var pr_end=true;\r\n                                                        refTableDB.current.state.items.forEach(function(item,index) {\r\n                                                          if (!item['STATE_QUERY_HBD']) {\r\n                                                              pr_end=false;\r\n                                                          }\r\n                                                        });\r\n                                                        if (pr_end) {\r\n                                                            clearInterval (MyInt);\r\n                                                            refLoadState.current.setState((state) => ({vis:--state.vis}));\r\n                                                            if (pr_ok_idb) {\r\n                                                                refTableDB.current.getDataSQL();\r\n                                                                after_save_wtrmtrs();\r\n                                                            }\r\n                                                            else {\r\n                                                                refTableDB.current.setState({items:[...refTableDB.current.state.items]});\r\n                                                            }\r\n                                                        }\r\n                                                    },500);\r\n\r\n                                                  }\r\n                                                  else if (pr_ok) {\r\n                                                    after_save_wtrmtrs();\r\n                                                  }\r\n                                                  else {\r\n                                                    //перерисовка таблицы с текстом ошибок\r\n                                                    //refTableDB.current.setState({items:newItems});\r\n                                                    refTableDB.current.setState({items:[...refTableDB.current.state.items]})\r\n                                                  }\r\n                                              },\r\n                                          refLoadState\r\n                                          );\r\n                            }\r\n                        },\r\n                        div:{style:null}\r\n                      };\r\n  //объект для выпадающего списка с данными из БД\r\n  const selectDBobj={stateLoadObj:refLoadState,\r\n                    label:'Населённый пункт',\r\n                    paramGroup:paramGroupV,\r\n                    setParamGroup:setParamGroupV,\r\n                    //наименование параметра для зависимых(дочерних) элементов\r\n                    parChealdID:\"placeName\",\r\n                    //необходимо наличие двух полей с именами value,label\r\n                    sql:`SELECT DISTINCT p.name \"value\",\r\n                                p.name \"label\"\r\n                           FROM ab_places p\r\n                          WHERE p.name IS NOT NULL\r\n                          ORDER BY p.name`\r\n                   };\r\n  //отрисовка тела модального окна отображения истории ПУ\r\n  const modalBody=(row) => {\r\n    const buttonRender=(row) => {\r\n      var date1=startOfMonth(new Date(row.NEW_DATE)),\r\n          date2=parse(row.LAST_DATE, 'dd.MM.yyyy', new Date());\r\n      if (date2>=date1) {\r\n        return <Button\r\n                  onClick={() => {\r\n                    refCustomConfirm.current\r\n                      .setState({show:true,\r\n                                 text:'Вы действительно хотите удалить последнее показание?',\r\n                                 callback:(val) => {\r\n                                    if (val) {\r\n                                      //ищем подходящую строку для удаления\r\n                                      let tr_first;\r\n                                      for (var i = 0; i < refModalStageTable.current.state.items.length; i++) {\r\n                                        if (refModalStageTable.current.state.items[i].PR_DEL!=='Удалено') {\r\n                                          tr_first=refModalStageTable.current.state.items[i];\r\n                                          break;\r\n                                        }\r\n                                      }\r\n                                      if (!!tr_first) {\r\n                                        let id_r=+tr_first.ID_R,\r\n                                            id_h=-777;\r\n                                        if (cityC==='vrn') {\r\n                                            id_h=+tr_first.ID_H;\r\n                                        }\r\n                                        const data = {};\r\n                                        data.exec_params_in={};\r\n                                        //data.query_params={};\r\n                                        data.execsql=`DECLARE\r\n                                                          t_error_text VARCHAR2(1000);\r\n                                                          t_error_text_rvkp VARCHAR2(1000);\r\n                                                      BEGIN\r\n                                                          t_error_text:='';\r\n                                                          t_error_text_rvkp:='';\\n`;\r\n                                        data.exec_params_out=[];\r\n                                        if ((id_h!==-777) & (cityC==='vrn')) {\r\n                                          data.exec_params_in.id_h=id_h;\r\n                                          data.exec_params_in.wtrmtr_id_h=row.W_ID_H;\r\n                                          data.exec_params_out.push({name:'erText',type:'string'});\r\n                                          data.execsql+=` BEGIN\r\n                                                            Delete FROM prvp.prvCounterValue@RH where ID=:id_h;\r\n                                                            prvp.FILL_COMMUNA_COUNTER_VALUES@RH(:wtrmtr_id_h, Pac_Month.Date_To_Month@RH(sysdate));\r\n                                                            commit;\r\n                                                         EXCEPTION\r\n                                                            WHEN OTHERS THEN\r\n                                                              ROLLBACK;\r\n                                                              t_error_text := SUBSTR(SQLERRM, 1, 1000);\r\n                                                        END;\\n`;\r\n                                        }\r\n                                        if (id_r!=-777) {\r\n                                          data.exec_params_in.id_r=id_r;\r\n                                          data.execsql+=` BEGIN\r\n                                                              ab_watermeter.delete_value (:id_r);\r\n                                                              commit;\r\n                                                          EXCEPTION\r\n                                                              WHEN OTHERS THEN\r\n                                                                t_error_text_rvkp := SUBSTR(SQLERRM, 1, 1000);\r\n                                                          END;\\n`;\r\n                                        }\r\n                                        data.execsql+=`   :erTextRvkp:=t_error_text_rvkp;\\n`;\r\n                                        if (cityC==='vrn') {\r\n                                          data.execsql+=`   :erText:=t_error_text;\\n`;\r\n                                        }\r\n                                        data.execsql+=`END;`;\r\n                                        data.exec_params_out.push({name:'erTextRvkp',type:'string'});\r\n                                        getExecQuery(data,\r\n                                                     function(response0) {\r\n                                                        let pr_ok=false;\r\n                                                        if (response0.data.execout['erTextRvkp']!==null) {\r\n                                                            refCustomAlert.current.setState({show:true,text:'Не удалось удалить показание в РВК.П.\\n'+\r\n                                                                                                            'Ошибка: '+response0.data.execout['erTextRvkp']});\r\n                                                        }\r\n                                                        else if (id_r!=-777) {\r\n                                                            pr_ok=true;\r\n                                                        }\r\n                                                        if (cityC==='vrn') {\r\n                                                          if (response0.data.execout['erText']!==null) {\r\n                                                              refCustomAlert.current.setState({show:true,text:'Не удалось удалить показание в исторической системе.\\n'+\r\n                                                                                                              'Ошибка: '+response0.data.execout['erText']});\r\n                                                          }\r\n                                                          else if (id_h!=-777) {\r\n                                                              pr_ok=true;\r\n                                                          }\r\n                                                        }\r\n                                                        if (pr_ok) {\r\n                                                          refTableDB.current.getDataSQL();\r\n                                                        }\r\n                                                     }\r\n                                                   );\r\n                                      }\r\n                                    }\r\n                                 }\r\n                     });\r\n                  }}\r\n              >\r\n                  Удалить последнее показание\r\n              </Button>\r\n      }\r\n      else {\r\n        return null;\r\n      }\r\n    }\r\n    const tabHistoryPUID='tab_history_pu';\r\n    const changeDelHistory=(checked) => {\r\n        var tableHistoryPUtr=$('table#'+tabHistoryPUID+' tbody tr').show();\r\n        if (checked) {\r\n          refModalStageTable.current.state.items.forEach((item, i) => {\r\n              if ((item.PR_DEL!=='Действует') & (item.PR_DEL!==null)) {\r\n                $(tableHistoryPUtr).filter(':eq('+i+')').hide();\r\n              }\r\n          });\r\n        }\r\n    };\r\n    const modalTableDBObj={stateLoadObj:refLoadState,\r\n                          tab_id:tabHistoryPUID,\r\n                          sql:((cityC==='vrn')?\r\n                              `WITH WH AS (\r\n                                  Select DISTINCT\r\n                                        c.Id W_ID_H,\r\n                                        PWTV.Value value_h,\r\n                                        PWTV.CDate DATE_H,\r\n                                        PWTV.ID id_h\r\n                                   from prvp.prvCounter@rh c\r\n                                   JOIN prvp.prvCounterValue@RH PWTV\r\n                                     ON PWTV.prvCounterId=C.ID\r\n                                  where C.ID=:wtrmtr_id_h\r\n                              ),`:``)+\r\n                               `WH_R AS (\r\n                                  SELECT DISTINCT wv.accdate DATE_R,\r\n                                         wv.ID id_r,\r\n                                         wv.VALUE value_r,\r\n                                         wv.status pr_del\r\n                                    FROM ab_watermeter_values wv\r\n                                   where wv.watermeter_id=:wtrmtr_id\r\n                                     AND wv.accdate IS NOT NULL\r\n                                     and wv.type = 'Показание'\r\n                                  )\r\n                                  SELECT TO_CHAR(T.DATE_V,'DD.MM.RRRR') DATE_V,\r\n                                         `+((cityC==='vrn')?`\r\n                                         NVL(ID_H,-777) ID_H,\r\n                                         value_h,\r\n                                         CASE WHEN value_h IS NOT NULL THEN value_h-\r\n                                                NVL((SELECT MAX(WH2.value_h) keep (dense_rank first  ORDER BY WH2.DATE_H DESC)\r\n                                                       FROM WH WH2\r\n                                                      WHERE WH2.DATE_H<WH.DATE_H\r\n                                                        AND WH2.value_h IS NOT NULL\r\n                                                    ),0)\r\n                                         END VOLUME_H,`:``)+`\r\n                                         NVL(id_r,-777) id_r,\r\n                                         value_r,\r\n                                         CASE WHEN value_r IS NOT NULL AND pr_del= 'Действует' THEN value_r-\r\n                                                NVL((SELECT MAX(WH2.value_r) keep (dense_rank first  ORDER BY WH2.DATE_R DESC)\r\n                                                       FROM WH_R WH2\r\n                                                      WHERE WH2.DATE_R<WH_R.DATE_R\r\n                                                        AND WH2.value_R IS NOT NULL\r\n                                                        AND WH2.pr_del = 'Действует'\r\n                                                    ),0)\r\n                                         END volume_r,\r\n                                         PR_DEL,\r\n                                         ND.VAL ND_VAL,\r\n                                         ROW_NUMBER() OVER (ORDER BY T.DATE_V DESC,`+((cityC==='vrn')?`NVL(id_r,ID_H)`:`ID_R`)+` DESC) RN\r\n                                    FROM (\r\n                                        SELECT DISTINCT date_v\r\n                                          FROM (\r\n                                        `+((cityC==='vrn')?`\r\n                                        SELECT WH.DATE_H date_v\r\n                                          FROM WH\r\n                                         UNION ALL`:``)+`\r\n                                        SELECT WH_R.DATE_R date_v\r\n                                          FROM WH_R\r\n                                        )\r\n                                        WHERE date_v IS NOT NULL\r\n                                        ) T\r\n                                  `+((cityC==='vrn')?`\r\n                                   LEFT JOIN WH\r\n                                     ON WH.DATE_H=T.DATE_V`:``)+`\r\n                                   LEFT JOIN WH_R\r\n                                     ON WH_R.DATE_R=T.DATE_V\r\n                                   LEFT JOIN (SELECT TO_CHAR(SYSDATE,'RRRR-MM-DD') VAL FROM DUAL\r\n                                              /*select TO_CHAR(max(p.endaccdate),'RRRR-MM-DD') VAL from POSTS p\r\n                                              where nvl(p.transblock,2)=1\r\n                                                and p.cracc='ПредельнаяДата_WATER'\r\n                                                and p.crhid='0'*/\r\n                                             ) ND ON 1=1\r\n                                          ORDER BY RN`,\r\n                          paginationFactory:paginationFactory,\r\n                          paginationOptions:{paginationSize: 7,\r\n                                             sizePerPageList: [{\r\n                                                 text: '50', value: 50\r\n                                               }, {\r\n                                                 text: '100', value:100\r\n                                               }, {\r\n                                                 text: '500', value:500\r\n                                               },{\r\n                                                   text: '1000', value: 1000\r\n                                                 }]\r\n                                           },\r\n                          keyField:'RN',\r\n                          columns:[{dataField:'DATE_V',text:'Дата',headerAttrs: (column, colIndex) => ({ 'width': `110px` })},\r\n                                  {dataField:'VALUE_R',text:'Значение',headerAttrs: (column, colIndex) => ({ 'width': `100px` })},\r\n                                  {dataField:'VOLUME_R',text:'Расход',headerAttrs: (column, colIndex) => ({ 'width': `100px` })},\r\n                                  {dataField:'PR_DEL',text:'Признак удаления',headerAttrs: (column, colIndex) => ({ 'width': `150px` })}\r\n                                ],\r\n                          parSQL:{wtrmtr_id:row.RVKP_W_ID},\r\n                          afterLoadData:function(thisV) {\r\n                            //по-умолчанию чекбокс \"Скрывать удаленные показания\" включен, запускаем обработку для этого\r\n                            changeDelHistory(refModalStageChecked.current.state.checked);\r\n                          }\r\n                         }\r\n    if (cityC==='vrn') {\r\n      modalTableDBObj.parSQL.wtrmtr_id_h=row.W_ID_H;\r\n      modalTableDBObj.columns.splice(3, 0,\r\n                                  {dataField:'VALUE_H',text:'ИС значение',headerAttrs: (column, colIndex) => ({ 'width': `110px` })},\r\n                                  {dataField:'VOLUME_H',text:'ИС расход',headerAttrs: (column, colIndex) => ({ 'width': `110px` })}\r\n                                );\r\n    }\r\n    return <Container fluid>\r\n            <Row style={{marginBottom:'0.5rem'}}>\r\n               <Col>\r\n                  {buttonRender(row)}\r\n               </Col>\r\n               <Col>\r\n                  <CheckboxC\r\n                    ref={refModalStageChecked}\r\n                    obj={{id:'checkHistoryW',\r\n                          label:'Скрывать удаленные показания',\r\n                          onChange:(event,thisV) => {\r\n                            thisV.setState({checked:event.target.checked});\r\n                            changeDelHistory(event.target.checked);\r\n                          }\r\n                        }}\r\n                  />\r\n               </Col>\r\n             </Row>\r\n             <Row>\r\n               <Col>\r\n                 <TableDB\r\n                    ref={refModalStageTable}\r\n                    obj={modalTableDBObj}\r\n                 />\r\n               </Col>\r\n            </Row>\r\n         </Container>\r\n  }\r\n  //объект для таблицы с данными из БД\r\n  const tableDBObj={stateLoadObj:refLoadState,\r\n                    tableContainerClass:'tab_wtrmtrs max-content',\r\n                    bodyClasses:'body_row_dblclick',\r\n                    paramGroup:paramGroupV,\r\n                    parParentID:['lsNum'],\r\n                    sql:`WITH WTRM AS (\r\n                          SELECT /*+ MATERIALIZE */\r\n                              x.id watermeter_id\r\n                             ,x.unit\r\n                             ,x.unit_short\r\n                             ,x.factory_number_and_pipe\r\n                             ,x.last_check_endaccdate\r\n                             ,x.transblock w_transblock\r\n                             ,w_accdate\r\n                             ,w_endaccdate\r\n                             ,case when (NVL(last_check_endaccdate,TO_DATE('01.01.4000','DD.MM.RRRR'))<ADD_MONTHS(trunc(sysdate,'mm'),-1))\r\n                                        OR (w_accdate>SYSDATE OR w_endaccdate < sysdate)\r\n                                        OR x.transblock<1 THEN 'Закрыт'\r\n                                    else 'Действует'\r\n                               end PR_OPEN\r\n                             `+((cityC==='vrn')?`\r\n                             ,WH.ID watermeter_id_h\r\n                             ,CASE WHEN WH.closeDate is null and NVL(WH.EndDate,TO_DATE('31.12.4000','DD.MM.RRRR')) > ADD_MONTHS(trunc(sysdate,'mm'),-1) THEN 'Действует'\r\n                                      ELSE 'Закрыт'\r\n                                 END PR_OPEN_H`:``)+`\r\n                             ,ROW_NUMBER() OVER (PARTITION BY x.unit ORDER BY x.unit DESC, w_accdate DESC,x.id) watermeter_num\r\n                             FROM (\r\n                              SELECT\r\n                               DECODE(u.unit\r\n                                  ,'ВодопотрГор.1гр', 'гор. водоснабжение'\r\n                                  ,'ВодопотрХол.1гр', 'хол. водоснабжение'\r\n                                  ,'ВодопотрОсн.2гр', 'Полив и др. нужды'\r\n                                  ,'---') unit\r\n                              ,DECODE(u.unit\r\n                                  ,'ВодопотрГор.1гр', 'ГВС'\r\n                                  ,'ВодопотрХол.1гр', 'ХВС'\r\n                                  ,'ВодопотрОсн.2гр', 'полив'\r\n                                  ,'---') unit_short\r\n                              ,w.factory_number||' '||p.pipe_name factory_number_and_pipe\r\n                              ,MAX(c.endaccdate) last_check_endaccdate\r\n                              ,ls_squid\r\n                              ,w.id\r\n                              ,w.transblock\r\n                              ,w.accdate w_accdate\r\n                              ,w.endaccdate w_endaccdate\r\n                              FROM\r\n                               documents ls\r\n                              ,ab_pipe2ls p2l\r\n                              ,ab_watermeters w\r\n                              ,ab_pipes p\r\n                              ,w_watermeter_checks c\r\n                              ,units u\r\n                              WHERE ls.refid=:lsNum\r\n                              AND ls.transblock = 1\r\n                              AND ls.type = 'ЛицевойСчет'\r\n                              AND p2l.ls_squid = ls.squid\r\n                              AND p2l.accdate < SYSDATE\r\n                              AND p2l.endaccdate > SYSDATE\r\n                              AND p2l.transblock >= 1\r\n                              AND w.pipe_id = p2l.pipe_id\r\n                              AND p.id = w.pipe_id\r\n                              AND p.accdate < SYSDATE\r\n                              AND p.endaccdate > SYSDATE\r\n                              AND p.transblock >= 1\r\n                              AND c.ab_watermeter_id(+) = w.id\r\n                              AND c.transblock(+) >= 1\r\n                              AND u.squid = p.unit\r\n                            GROUP BY\r\n                               DECODE(u.unit\r\n                                  ,'ВодопотрГор.1гр', 'гор. водоснабжение'\r\n                                  ,'ВодопотрХол.1гр', 'хол. водоснабжение'\r\n                                  ,'ВодопотрОсн.2гр', 'Полив и др. нужды'\r\n                                  ,'---')\r\n                              ,DECODE(u.unit\r\n                               ,'ВодопотрГор.1гр', 'ГВС'\r\n                               ,'ВодопотрХол.1гр', 'ХВС'\r\n                               ,'ВодопотрОсн.2гр', 'полив'\r\n                               ,'---')\r\n                              ,w.factory_number||' '||p.pipe_name\r\n                              ,DECODE(u.unit, 'ВодопотрГор.1гр', 3, 'ВодопотрХол.1гр', 1, 10)\r\n                              ,ls_squid\r\n                              ,w.id\r\n                              ,w.transblock\r\n                              ,w.accdate\r\n                              ,w.endaccdate\r\n                             ) x\r\n                             `+((cityC==='vrn')?`\r\n                             LEFT JOIN MAPS_HIST MH\r\n                              ON MH.TABLE_NAME='load_ab_watermeters'\r\n                             AND MH.PREFIX='P'\r\n                             AND MH.ID=X.id\r\n                             LEFT JOIN prvp.prvCounter@RH WH\r\n                              ON WH.ID=TO_NUMBER(substr(MH.EXTERNAL_ID,2))`:``)+`\r\n                          ),\r\n                          WTRM_V AS (\r\n                          SELECT\r\n                              v.watermeter_id\r\n                             ,v.accdate\r\n                             ,v.value\r\n                             ,v.info_from\r\n                             ,ROW_NUMBER() OVER (PARTITION BY v.watermeter_id ORDER BY v.accdate DESC) rn\r\n                             FROM ab_watermeter_values v\r\n                             JOIN WTRM W ON W.watermeter_id=v.watermeter_id\r\n                             WHERE v.type = 'Показание'\r\n                               AND v.status = 'Действует'\r\n                          )`+((cityC==='vrn')?`,\r\n                          WTRM_H_V AS (\r\n                          SELECT w_id_h\r\n                                ,VALUE\r\n                                ,accdate\r\n                                ,watermeter_id\r\n                                ,PR_OPEN\r\n                            FROM TABLE(WTRMTRS_FROM_DBH.AB_GET_ROWS(:lsNum))\r\n                          )`:``)+`\r\n\r\n                        SELECT w.watermeter_id RVKP_W_ID\r\n                                ,w.factory_number_and_pipe SERNUM\r\n                                ,TO_CHAR(w.last_check_endaccdate, 'DD.MM.YYYY') DATETEST\r\n                                ,NVL(TO_CHAR(v.accdate, 'DD.MM.YYYY'), '-') LAST_DATE\r\n                                ,NVL(v.value, 0) last_value\r\n                                ,v.info_from last_info_from\r\n                                ,NVL(v.value, 0)-NVL(v2.value,0) VOLUME\r\n                                ,TRIM(w.unit_short) NAME\r\n                                ,W.PR_OPEN\r\n                                ,null new_value\r\n                               ,NVL(ND.VAL,TO_CHAR(LAST_DAY(SYSDATE), 'RRRR-MM-DD')) new_date\r\n                               ,0 NEW_VOLUME\r\n                               --,T.USR\r\n                               `+((cityC==='vrn')?`\r\n                               ,vh.w_id_h\r\n                               ,vh.pr_open pr_open_h\r\n                               ,NVL(TO_CHAR(VH.accdate, 'DD.MM.YYYY'), '-') LAST_DATE_H\r\n                               ,VH.value last_value_h`:``)+`\r\n                          FROM WTRM W\r\n                          JOIN WTRM_V V\r\n                            ON V.watermeter_id=W.watermeter_id\r\n                          LEFT JOIN WTRM_V v2\r\n                            ON w.watermeter_id = v2.watermeter_id and v2.rn=2\r\n                          `+((cityC==='vrn')?`\r\n                          LEFT JOIN  WTRM_H_V VH\r\n                            ON VH.watermeter_id=W.watermeter_id`:``)+`\r\n                          LEFT JOIN (SELECT TO_CHAR(SYSDATE,'RRRR-MM-DD') VAL FROM DUAL\r\n                                    /*select TO_CHAR(max(p.endaccdate),'RRRR-MM-DD') VAL from POSTS p\r\n                                    where nvl(p.transblock,2)=1\r\n                                      and p.cracc='ПредельнаяДата_WATER'\r\n                                      and p.crhid='0'*/\r\n                                   ) ND ON 1=1\r\n                          WHERE V.rn=1\r\n                         ORDER BY watermeter_num`,\r\n                   /*selectRowProp: {mode: 'radio',\r\n                                   bgColor: '#0070BA', // you should give a bgcolor, otherwise, you can't regonize which row has been selected\r\n                                   hideSelectColumn: true,  // enable hide selection column.\r\n                                   clickToSelect: true,  // you should enable clickToSelect, otherwise, you can't select column.\r\n                                   selected:['RVKP_W_ID']\r\n                                 },*/\r\n                   keyField:'RVKP_W_ID',\r\n                   columns:[{dataField:'NAME',text:'Усл.',headerAttrs: (column, colIndex) => ({ 'width': `50px` })},\r\n                           {dataField:'SERNUM',text:'Заводской номер, место установки',headerAttrs: (column, colIndex) => ({ 'width': `120px` })},\r\n                           {dataField:'DATETEST',text:'РВК.П окончание поверки',headerAttrs: (column, colIndex) => ({ 'width': `110px` })},\r\n                           {dataField:'LAST_DATE',text:'РВК.П дата снятия',classes:'LAST_DATE',headerAttrs: (column, colIndex) => ({ 'width': `110px` })},\r\n                           {dataField:'LAST_VALUE',text:'РВК.П показание',headerAttrs: (column, colIndex) => ({ 'width': `110px` })},\r\n                           {dataField:'VOLUME',text:'РВК.П расход',headerAttrs: (column, colIndex) => ({ 'width': `90px` })},\r\n                           {dataField:'LAST_INFO_FROM',text:'РВК.П источник',headerAttrs: (column, colIndex) => ({ 'width': `110px` })},\r\n                           {dataField:'PR_OPEN',text:'РВК.П статус',headerAttrs: (column, colIndex) => ({ 'width': `110px` })},\r\n                           {dataField:'NEW_DATE',text:'Новая дата снятия',headerAttrs: (column, colIndex) => ({ 'width': `110px` }),\r\n                            formatter:(cell, row, rowIndex)=>{\r\n                                const thisV=refTableDB.current;\r\n                                function handleChange(event) {\r\n                                  thisV.state.items[rowIndex]['NEW_DATE']=event.target.value;\r\n                                  thisV.setState({items:thisV.state.items});\r\n                                }\r\n                                if (row['PR_OPEN']!=='Закрыт') {\r\n                                  return (\r\n                                  <FormControl\r\n                                    aria-describedby=\"basic-addon2\"\r\n                                    type=\"date\"\r\n                                    onChange={handleChange}\r\n                                    defaultValue={cell}\r\n                                    id={'ld_'+row['RVKP_W_ID']}\r\n                                    style={{width:'10em'}}\r\n                                  />);\r\n                                }\r\n                              }\r\n                           },\r\n                           {dataField:'NEW_VALUE',text:'Новое показание',headerAttrs: (column, colIndex) => ({ 'width': `110px` }),\r\n                            formatter:(cell, row, rowIndex)=> {\r\n                               const thisV=refTableDB.current;\r\n\r\n                               function handleChange(event) {\r\n                                 var value=0;\r\n                                 if (row['PR_OPEN']!=='Закрыт') {\r\n                                   if (!!event.target.value) {\r\n                                     if (!!row['LAST_VALUE']) {\r\n                                         value=+event.target.value-+row['LAST_VALUE'];\r\n                                     }\r\n                                     thisV.state.items[rowIndex]['NEW_VOLUME']=value;\r\n                                     thisV.state.items[rowIndex]['NEW_VALUE_NUMBER']=+event.target.value;\r\n                                     thisV.setState({items:[...thisV.state.items]});\r\n                                     //таблица не перерисовывается автоматически, т.к. это происходит внутри formatter, а это блокировано самим компонентом\r\n                                     $(event.target).closest('td').next().html(value);\r\n                                   }\r\n                                 }\r\n                               }\r\n\r\n                               function handleKeyDown(event) {\r\n                                 if (event.keyCode === 13) {\r\n                                    //ищем ближайшую строку, если нету, сохраняем\r\n                                    var tr_tek=$(event.target).closest('tr');\r\n                                    if ((+event.target.value>0) & (!$(tr_tek).hasClass('usr_sel'))) {\r\n                                        $(tr_tek).addClass('usr_sel');\r\n                                    }\r\n                                    tr_tek=$(tr_tek).next();\r\n                                    while (($(tr_tek).is('tr')) & ($(tr_tek).find(\"div[id='new_volume_block']\").length===0)) {\r\n                                        tr_tek=$(tr_tek).next();\r\n                                    }\r\n                                    if ($(tr_tek).is('tr')) {\r\n                                        $(tr_tek).find(\"div[id='new_volume_block'] input\").focus().select();\r\n                                    }\r\n                                    else {\r\n                                        $('#saveWtrmtrs').trigger('click');\r\n                                    }\r\n                                 }\r\n                               }\r\n\r\n                               if (row['PR_OPEN']!=='Закрыт') {\r\n                                 return (\r\n                                     <div id=\"new_volume_block\">\r\n                                       <FormControl\r\n                                         aria-describedby=\"basic-addon2\"\r\n                                         type=\"number\"\r\n                                         onChange={handleChange}\r\n                                         onKeyDown={handleKeyDown}\r\n                                         style={{width:'7em'}}\r\n                                       />\r\n                                       <div className=\"usr_error\"></div>\r\n                                     </div>\r\n                                 );\r\n                               }\r\n                             }\r\n                           },\r\n                           {dataField:'NEW_VOLUME',text:'Новый расход',headerAttrs: (column, colIndex) => ({ 'width': `110px` })},\r\n                           {dataField:'RETURN_COMBINED_NAME',text:'Вид ПУ',headerAttrs: (column, colIndex) => ({ 'width': `110px` })},\r\n                           {dataField:'MOUNT_ACCDATE',text:'Дата последней опломбировки',headerAttrs: (column, colIndex) => ({ 'width': `110px` })},\r\n                           {dataField:'RETURN_COMBINED_ID',text:'ID Вида ПУ',hidden:true},\r\n                         ],\r\n                    afterLoadData:function(thisV) {\r\n                        deltaCheckWtrmtrs(paramGroupV['checkWtrmtrs']);\r\n                        if (refModalStage.current.state.modalShow) {\r\n                            //ищем новую строку по сохраненному ID\r\n                            for (var i = 0; i < thisV.state.items.length; i++) {\r\n                              if (thisV.state.items[i][thisV.props.obj.keyField]===thisV.state.selectRow[0][thisV.props.obj.keyField]) {\r\n                                  refModalStage.current.setState({body:modalBody(thisV.state.items[i])});\r\n                                  refModalStageTable.current.getDataSQL();\r\n                                  break;\r\n                              }\r\n                            }\r\n                        }\r\n                    },\r\n                    rowEvents: {onDoubleClick: (e, row, rowIndex) => {\r\n                                 if (!$(e.target).is('input')) {\r\n                                   refTableDB.current.setState({selectRow:[row]});\r\n                                   refModalStage.current.setState({\r\n                                     modalShow:true,\r\n                                     header:'История показаний ПУ № '+row.SERNUM,\r\n                                     nextButtonDisplay:'none',\r\n                                     body:modalBody(row)\r\n                                   });\r\n                                 }\r\n                               }},\r\n                   };\r\n  //classLoad=classes.root;\r\n  if (cityC==='vrn') {\r\n    tableDBObj.columns.splice(7, 0,\r\n                                {dataField:'LAST_DATE_H',text:'ИС дата снятия',classes:'LAST_DATE_H',headerAttrs: (column, colIndex) => ({ 'width': `110px` })},\r\n                                {dataField:'LAST_VALUE_H',text:'ИС показание',headerAttrs: (column, colIndex) => ({ 'width': `110px` })},\r\n                                {dataField:'PR_OPEN_H',text:'ИС статус',headerAttrs: (column, colIndex) => ({ 'width': `110px` })}\r\n                              );\r\n  }\r\n  const deltaCheckWtrmtrs=(checked)=>{\r\n    $('.tab_wtrmtrs tbody tr').each(function(i,elem) {\r\n      $(elem).show();\r\n      $(elem).removeClass('usr_sel');\r\n      var el_wtrmtr_val=$(elem).find('div[id=\"new_volume_block\"] input');\r\n      if (($(elem).find('td').length>1) && ($(el_wtrmtr_val).length===0) && (checked)) {\r\n        $(elem).hide();\r\n      }\r\n\r\n      if ($(el_wtrmtr_val).length>0) {\r\n          var in_ld_val=$(elem).find('input[id^=\"ld_\"]').val().trim(),\r\n              dateH=$(elem).find('td.LAST_DATE').text();\r\n          var mass_date=dateH.split(\".\"),\r\n              dayH=parseInt(mass_date[0]),\r\n              monthH=parseInt(mass_date[1]),\r\n              yearH=parseInt(mass_date[2]);\r\n          mass_date=in_ld_val.split(\"-\");\r\n          var year=parseInt(mass_date[0]),\r\n              month=parseInt(mass_date[1]),\r\n              day=parseInt(mass_date[2]);\r\n          if ((dayH===1) & (month===monthH) & (year===yearH)) {\r\n              monthH-=1;\r\n          }\r\n          if (monthH==0) {\r\n              monthH=12;\r\n              yearH-=1;\r\n          }\r\n          if (((monthH>=month) & (yearH>=year)) || (yearH>year)) {\r\n              $(elem).addClass('usr_sel');\r\n          }\r\n      }\r\n    });\r\n  }\r\n  deltaCheckWtrmtrs(paramGroupV['checkWtrmtrs']);\r\n\r\n  const checkWtrmtrsHandleChange = (event) => {\r\n    let newObj = { ...paramGroupV };\r\n    newObj['checkWtrmtrs']=event.target.checked;\r\n    setParamGroupV(newObj);\r\n  };\r\n\r\n  const handleClickSearche=() => {\r\n      refInputDB.current.funcHandleChange();\r\n  }\r\n\r\n  //объект для поля с данными из БД подгружаемых по нажатию Enter\r\n  const inputeDBObj={stateLoadObj:refLoadState,\r\n                       in_id:\"ls\",\r\n                       tab_id:\"idbt1\",\r\n                       modal_header:\"Выберите ЛС\",\r\n                       label:'Поиск по ЛС:',\r\n                       paramGroup:paramGroupV,\r\n                       setParamGroup:setParamGroupV,\r\n                       //parParentID:['placeName'],\r\n                       //наименование параметра для зависимых(дочерних) элементов\r\n                       parChealdID:\"lsNum\",\r\n                       sql:`SELECT  LS.REFID VAL,\r\n                                    LS.REFID NAME,\r\n                                   MAX(c.fname) keep(dense_rank FIRST order by v3.accdate DESC) FIO,\r\n                                   p.name||', '||s.name||case when nvl(h.house,'')='' then ''\r\n                                                         else ', д. '||h.house\r\n                                                    end||\r\n                                                    case when ls.textinfo is null then ''\r\n                                                         else ', кв. '||ls.textinfo\r\n                                                    end ADRES,\r\n                                   CASE WHEN MLS.LSID IS NOT NULL THEN 'ДА'\r\n                                        ELSE 'НЕТ'\r\n                                   END PR_MARKER\r\n                              FROM documents ls\r\n                              LEFT JOIN ab_ls_not_calc mls\r\n                                ON mls.lsid = ls.squid\r\n                               AND mls.status = 1\r\n                             inner join attr_ids ai_lg\r\n                                on ai_lg.obj_id = ls.squid\r\n                               AND ai_lg.type_id = mc.type_id('ЛицевойСчетПоГруппе')\r\n                               AND ai_lg.accdate <= sysdate\r\n                               AND ai_lg.endaccdate > sysdate\r\n                               AND ai_lg.transblock >= 1\r\n                             inner join attr_ids v1\r\n                                on v1.obj_id = ai_lg.value\r\n                               AND v1.type_id = mc.type_id('ОбъектВодоснабженияДляГруппы')\r\n                               AND v1.transblock >= 1\r\n                               AND v1.accdate <= sysdate\r\n                               AND v1.endaccdate > sysdate\r\n                             inner join attr_ids v2\r\n                                on v2.obj_id = v1.value\r\n                               AND v2.type_id = mc.type_id('АдресОбъектаВодоснабжения')\r\n                               AND v2.transblock >= 1\r\n                               AND v2.accdate <= sysdate\r\n                               AND v2.endaccdate > sysdate\r\n                             inner join ab_houses h\r\n                                on h.id = v2.value\r\n                               AND h.transblock >= 1\r\n                             inner join ab_streets s\r\n                                on s.id = h.id_street\r\n                             inner join ab_places p\r\n                                on p.id = s.place_id\r\n                              JOIN attr_ids v3\r\n                                ON v3.obj_id = ls.squid\r\n                               AND v3.type_id = mc.type_id('АбонентПоЛицСчету') -- АбонентПоЛицСчету 16\r\n                               AND v3.transblock >= 1\r\n                               AND v3.value_table_id = 2\r\n                              JOIN counterparties c\r\n                                ON v3.value = c.squid\r\n                             WHERE ls.transblock = 1\r\n                               and ls.type = 'ЛицевойСчет'\\n`,\r\n                      selectRowProp: {mode: 'radio',\r\n                                      //mode: 'checkbox',\r\n                                      bgColor: '#0070BA', // you should give a bgcolor, otherwise, you can't regonize which row has been selected\r\n                                      hideSelectColumn: true,  // enable hide selection column.\r\n                                      clickToSelect: true\r\n                                    },\r\n                      /*наличие полей(колонок) со служебными именами NAME и VAL(ключевое поле) обязательно*/\r\n                      columns:[{dataField:'VAL',text:'Номер ЛС',hidden:true},\r\n                               {dataField:'NAME',text:'Номер ЛС'},\r\n                                {dataField:'ADRES',text:'Адрес'},\r\n                                {dataField:'PR_MARKER',text:'Маркированный'},\r\n                              ],\r\n                      paginationFactory:paginationFactory,\r\n                      paginationOptions:{paginationSize: 7,\r\n                                          sizePerPageList: [{\r\n                                              text: '10', value: 10\r\n                                            }, {\r\n                                              text: '50', value: 10\r\n                                            }, {\r\n                                              text: '100', value:100\r\n                                            }, {\r\n                                              text: '500', value:500\r\n                                            }]\r\n                                        },\r\n                      //filterFactory:filterFactory,\r\n                      beforeLoadData:function(thisV,data) {\r\n                        var ls_obj=$('input#ls'),\r\n                                ls_v=$(ls_obj).val().trim(),\r\n                                street_v=$('input#street').val().trim(),\r\n                                house_v=$('input#house').val().trim(),\r\n                                kv_v=$('input#flat').val().trim();\r\n                            if ((ls_v.length===0) & (street_v.length===0) & (house_v.length===0)) {\r\n                                thisV.refCustomAlert.current.setState({show:true,text:'Для поиска ЛС необходимо ввести или его номер или привязанный к нему адрес'});\r\n                                data.error=true;\r\n                            }\r\n                            else {\r\n                                //получаем id ЛС\r\n                                if (ls_v.length!==0) {\r\n                                    data.sql+=\"and LS.REFID like :lsNum\\n\";\r\n                                    data.params.lsNum=ls_v;\r\n                                }\r\n                                else {\r\n                                  data.sql+=\"and p.name like :placeName\\n\";\r\n                                  data.params.placeName=paramGroupV.placeName;\r\n                                  if (street_v.length!==0) {\r\n                                      street_v=street_v.split(' ').join('%')+'%';\r\n                                      data.sql+=\"and UPPER(s.name) like UPPER(:street)\\n\";\r\n                                      data.params.street=street_v;\r\n                                  }\r\n                                  if (house_v.length!==0) {\r\n                                      house_v=house_v.split(' ').join('%');\r\n                                      data.sql+=\"and UPPER(h.house) like UPPER(:house)\\n\";\r\n                                      data.params.house=house_v;\r\n                                  }\r\n                                  if (kv_v.length!==0) {\r\n                                      kv_v=kv_v.split(' ').join('%')+'%';\r\n                                      data.sql+=\"and UPPER(ls.textinfo) like UPPER(:kv)\\n\";\r\n                                      data.params.kv=kv_v;\r\n                                  }\r\n                                }\r\n                                data.sql+=`GROUP BY p.name\r\n                                                  ,MLS.LSID\r\n                                                  ,s.name\r\n                                                  ,h.house\r\n                                                  ,ls.textinfo\r\n                                                  ,LS.REFID\r\n                                                 ORDER BY s.name,h.house,ls.textinfo`;\r\n                                setAbonentSearhe('');\r\n                            }\r\n                      },\r\n                      afterLoadData:function(thisV,response) {\r\n                        if (response.data.length===1) {\r\n                          setAbonentSearhe('Найден абонент: '+response.data[0]['NAME']+'; '+\r\n                                             response.data[0]['FIO']+'; '+\r\n                                             response.data[0]['ADRES']+\r\n                                             '; Наличие маркера:'+response.data[0]['PR_MARKER']\r\n                                          );\r\n                        }\r\n                      },\r\n                      afterChangeRowTab:function(thisV) {\r\n                        setAbonentSearhe('Найден абонент: '+thisV.state.selectRowFull['NAME']+'; '+\r\n                                           thisV.state.selectRowFull['FIO']+'; '+\r\n                                           thisV.state.selectRowFull['ADRES']+\r\n                                           '; Наличие маркера:'+thisV.state.selectRowFull['PR_MARKER']\r\n                                        );\r\n                      }\r\n              }\r\n  if (!!params) {\r\n    if (!!params.lsNum) {\r\n        inputeDBObj.defaultValue=params.lsNum;\r\n        selectDBobj.afterLoadData=() => {\r\n            refInputDB.current.funcHandleChange();\r\n        }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <LoadState ref={refLoadState} />\r\n      <CustomAlert ref={refCustomAlert}/>\r\n      <Container fluid>\r\n        <Row>\r\n          <Col>\r\n            <InputDB ref={refInputDB} obj={ inputeDBObj }/>\r\n          </Col>\r\n          <Col>\r\n            <DivImgClick obj={ divImgClickObj } />\r\n          </Col>\r\n        </Row>\r\n        <Row style={{'margin-top':'1%'}}>\r\n          <Col>\r\n            <label htmlFor=\"basic-url\">Поиск по адресу:</label>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <SelectDB obj={ selectDBobj }/>\r\n          </Col>\r\n          <Col>\r\n              <InputBC obj={{label:'Улица',\r\n                             id:\"street\",\r\n                           }}\r\n              />\r\n          </Col>\r\n          <Col>\r\n            <InputBC obj={{label:'Дом',\r\n                           id:\"house\",\r\n                         }}\r\n            />\r\n          </Col>\r\n          <Col>\r\n            <InputBC obj={{label:'Кв.',\r\n                           id:\"flat\",\r\n                         }}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row style={{'margin-top':'1%'}}>\r\n          <Col >\r\n            <Button onClick={()=>handleClickSearche()} id=\"butSearcheLS\">Найти</Button>\r\n          </Col>\r\n          <Col >\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={paramGroupV.checkWtrmtrs}\r\n                  onChange={checkWtrmtrsHandleChange}\r\n                  id=\"checkWTRMTRS\"\r\n                  color=\"primary\"\r\n                />\r\n              }\r\n              label=\"Скрывать недействующие ПУ\"\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col >\r\n             {abonentSearhe}\r\n          </Col>\r\n        </Row>\r\n        <Row style={{'margin-top':'1%'}} fluid>\r\n          <Col fluid>\r\n            <TableDB ref={refTableDB} obj={ tableDBObj }/>\r\n            <ModalStage ref={refModalStage}/>\r\n            <CustomConfirm ref={refCustomConfirm}/>\r\n          </Col>\r\n        </Row>\r\n        <Row style={{'margin-top':'1%'}}>\r\n          <Col >\r\n             F10 - сохранить\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col >\r\n             F9 - переместиться в поле поиска ЛС\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col >\r\n             F8 - Запустить поиск (аналог нажатия кнопки \"Найти\")\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col >\r\n             F7 - Переместиться в поле поиска \"Улица\"\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col >\r\n             Enter при нахождении в поле поиска ЛС - запуск поиска\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col >\r\n             Tab - переход к следующему \"Полю ввода\"/кнопке\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col >\r\n             Enter при нахождении в поле \"Новое показание\" - переход к следующему показанию или сохранение (если текущий ПУ последний в списке)\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Load_watermeter_values;\r\n","C:\\webclient\\rvkp-react\\src\\forms\\ab\\Load_pays.js",["176","177"],"import React,{ useState,useRef,useEffect } from 'react';\r\nimport {Link} from 'react-router-dom'\r\n\r\nimport paginationFactory from 'react-bootstrap-table2-paginator'\r\nimport SelectDB from '../../components/SelectDB';\r\nimport TableDB from '../../components/TableDB';\r\nimport LoadState from '../../components/LoadState';\r\nimport CustomAlert from '../../components/CustomAlert';\r\nimport ModalStage from '../../components/ModalStage';\r\nimport DatePickerC from '../../components/DatePickerC';\r\nimport InputFileC from '../../components/InputFileC';\r\nimport SelectC from '../../components/SelectC';\r\nimport SelectB from '../../components/SelectB';\r\nimport RadioGroupC from '../../components/RadioGroupC';\r\nimport DivImgClick from '../../components/DivImgClick';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport { format,startOfMonth } from 'date-fns';\r\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\r\n\r\nimport $ from 'jquery'\r\n\r\nimport {getExecQuery,getQuery,getReportServer} from '../../common.js';\r\n\r\nfunction Load_watermeter_values() {\r\n  //хук для отслеживания изменения параметров компонетов (для упрощения взаимодействия компонентов)\r\n  let [paramGroupV, setParamGroupV] = useState({fileID:[],fileStatus:[],wtrmtrsStatusCW:[],wtrmtrsStatusHW:[]});\r\n  //хук-ссылки на элементы для удобной работы с ними\r\n  const refTableDB=useRef(),\r\n      refLoadState=useRef(),\r\n      refCustomAlert=useRef(),\r\n      refSelectFileName=useRef(),\r\n      refSelectFileStatus=useRef(),\r\n      refSelectWtrmtrsStatusCW=useRef(),\r\n      refSelectWtrmtrsStatusHW=useRef(),\r\n      refModalStage=useRef(),\r\n      refDatePickerC=useRef(),\r\n      refModalStageDetail=useRef();\r\n\r\n  //общение между окнами форм\r\n  useEffect(() => {\r\n    const messageForm=function(event) {\r\n      if (event.origin !== window.location.origin)\r\n        return;\r\n      const data=JSON.parse(event.data);\r\n      if ((data.formSysName==='ab_load_watermeter_values') & (data.action==='updTabLoadPay')) {\r\n        //необходимо обновить данные в таблице и открытом модальном окне (обновится по событию afterLoadData)\r\n        //т.к. именно отсюда эта форма вызывалась\r\n        refTableDB.current.getDataSQL();\r\n      }\r\n    };\r\n    window.addEventListener(\"message\",messageForm, false);\r\n    return () => {\r\n      window.removeEventListener('message', messageForm);\r\n    };\r\n  }, []);\r\n\r\n  const divImgClickObj={id:'exportXLSX',\r\n                        img:{src:require('../../img/UPLOAD-Excel.png'),style:{height:'33px',width:'auto',cursor:'pointer'},title:\"Выгрузить в XLSX\"},\r\n                        handleClick:() => {\r\n                            var pr_ok=true;\r\n                            if ((refSelectFileName.current===null) || (refSelectFileName.current===undefined)) {\r\n                              pr_ok=false;\r\n                            }\r\n                            else if (refSelectFileName.current.state.options[0]['value']===-777) {\r\n                              pr_ok=false;\r\n                            }\r\n                            if (!pr_ok) {\r\n                              refCustomAlert.current.setState({show:true,text:'Пожалуйста дождитесь окончания загрузки наименований файлов'});\r\n                            }\r\n                            else {\r\n                              getReportServer('2','25',JSON.stringify({FNAME:refSelectFileName.current.state.selectOptions,\r\n                                                                       STATUS:refSelectFileStatus.current.state.selectOptions,\r\n                                                                       WS_CW:refSelectWtrmtrsStatusCW.current.state.selectOptions,\r\n                                                                       WS_HW:refSelectWtrmtrsStatusHW.current.state.selectOptions\r\n                                                                      })\r\n                                             );\r\n                            }\r\n\r\n                        },\r\n                        div:{style:null}\r\n                      };\r\n\r\n  //объект для выпадающего списка с данными из БД\r\n  const selectFileNameObj={stateLoadObj:refLoadState,\r\n                          label:'Наименование файла',\r\n                          paramGroup:paramGroupV,\r\n                          setParamGroup:setParamGroupV,\r\n                          //наименование параметра для зависимых(дочерних) элементов\r\n                          parChealdID:\"fileID\",\r\n                          //необходимо наличие двух полей с именами value,label\r\n                          sql:`SELECT DISTINCT f.id \"value\",\r\n                                      f.name \"label\"\r\n                                FROM lp_reestr_files f\r\n                               WHERE EXISTS(SELECT 1\r\n                                              FROM lp_reestr s\r\n                                             WHERE f.id = s.file_id\r\n                                           )\r\n                               ORDER BY f.name`,\r\n                          multiple:true\r\n                         };\r\n   //объект для выпадающего списка с данными из БД\r\n   const selectFileStatusObj={stateLoadObj:refLoadState,\r\n                           label:'Статус',\r\n                           paramGroup:paramGroupV,\r\n                           setParamGroup:setParamGroupV,\r\n                           //наименование параметра для зависимых(дочерних) элементов\r\n                           parChealdID:\"fileStatus\",\r\n                           multiple:true,\r\n                           options:[{value:'Внесен',label:'Внесен'},\r\n                                    {value:'Ошибка',label:'Ошибка'},\r\n                                    {value:'Сформирован',label:'Сформирован'}],\r\n                          };\r\n  //объект для выпадающего списка с данными из БД\r\n  const selectWtrmtrsStatusCWObj={stateLoadObj:refLoadState,\r\n                                label:'Статус показаний ХВ',\r\n                                paramGroup:paramGroupV,\r\n                                setParamGroup:setParamGroupV,\r\n                                //наименование параметра для зависимых(дочерних) элементов\r\n                                parChealdID:\"wtrmtrsStatusCW\",\r\n                                //необходимо наличие двух полей с именами value,label\r\n                                multiple:true,\r\n                                options:[{value:'Внесен',label:'Внесен'},\r\n                                         {value:'Ошибка',label:'Ошибка'},\r\n                                         {value:'Сформирован',label:'Сформирован'}],\r\n                               };\r\n   //объект для выпадающего списка с данными из БД\r\n   const selectWtrmtrsStatusHWObj={stateLoadObj:refLoadState,\r\n                                 label:'Статус показаний ГВ',\r\n                                 paramGroup:paramGroupV,\r\n                                 setParamGroup:setParamGroupV,\r\n                                 //наименование параметра для зависимых(дочерних) элементов\r\n                                 parChealdID:\"wtrmtrsStatusHW\",\r\n                                 multiple:true,\r\n                                 options:[{value:'Внесен',label:'Внесен'},\r\n                                          {value:'Ошибка',label:'Ошибка'},\r\n                                          {value:'Сформирован',label:'Сформирован'}],\r\n                                };\r\n\r\n  //обработчик для кнопки \"Далее\" модального окна загрузки файлов\r\n  const stateModalObjNext=(thisV) => {\r\n     if (thisV.state.loadStage) {\r\n         refCustomAlert.current.setState({show:true,text:'Пожалуйста дождитесь окончания загрузки очередного этапа'});\r\n         return false;\r\n     }\r\n     if ((thisV.state.stage===1) & (!!thisV.state.attr.payFileValue)) {\r\n       //проверяем в БД наличие файла с таким именем и типом агента\r\n       var data = {};\r\n       data.params={p_name:thisV.state.attr.payFileName,p_file_type:thisV.state.attr.payAgent};\r\n       //let resp_data;\r\n       data.sql=`SELECT COUNT(1) COUNT_F\r\n                  FROM lp_reestr_files\r\n                 WHERE name = :p_name\r\n                   and type = :p_file_type`;\r\n       getQuery(data,(response)=> {\r\n                       if (+response.data[0].COUNT_F>0) {\r\n                         refCustomAlert.current.setState({show:true,text:'Файл с таким наименованием и типом \"Плательщика\" уже существует'});\r\n                       }\r\n                       else {\r\n                         thisV.setState({loadStage:true});\r\n                         refLoadState.current.handleShow();\r\n                         //загружаем файл в БД\r\n                         var output_mass_str=thisV.state.attr.payFileValue.split(String.fromCharCode(10));\r\n                          //делим согласно разделителю и кладем в БД одним большим запросом\r\n                          var sql='DECLARE \\n';\r\n                          sql+='  t_file_id   lp_reestr_files.id%TYPE;\\n';\r\n                          sql+='BEGIN \\n';\r\n                          var mass_pol=[],\r\n                              delimiter,\r\n                              simvl_itog,\r\n                              tab_load,\r\n                              procedure_convert,\r\n                              procedure_convert_dop_params='';\r\n                          if (thisV.state.attr.payAgent==='сб') {\r\n                            tab_load='LP_TMP_SBER';\r\n                            delimiter=';';\r\n                            simvl_itog='=';\r\n                            procedure_convert='lp_convert_sb';\r\n                            mass_pol=['date_from',\r\n                                      'date_time',\r\n                                      'OTD',\r\n                                      'Kassir',\r\n                                      'oper_kod',\r\n                                      'ls_num_sber',\r\n                                      'fio',\r\n                                      'address',\r\n                                      'period',\r\n                                      'sum_pl',\r\n                                      'sum_per',\r\n                                      'sum_com',\r\n                                      'watermeter_type1',\r\n                                      'watermeter_value1',\r\n                                      'watermeter_type2',\r\n                                      'watermeter_value2',\r\n                                      'watermeter_type3',\r\n                                      'watermeter_value3',\r\n                                      'watermeter_type4',\r\n                                      'watermeter_value4',\r\n                                      'watermeter_type5',\r\n                                      'watermeter_value5',\r\n                                      'watermeter_type6',\r\n                                      'watermeter_value6'\r\n                                      ];\r\n                          }\r\n                          else if (thisV.state.attr.payAgent==='пчт') {\r\n                            tab_load='LP_TMP_POST';\r\n                            delimiter='|';\r\n                            simvl_itog='#';\r\n                            procedure_convert='lp_convert_post';\r\n                            mass_pol=['pr_paym',\r\n                                      'date_from',\r\n                                      'ticket_num',\r\n                                      'ticket_date',\r\n                                      'OSB',\r\n                                      'filial',\r\n                                      'operator',\r\n                                      'oper_num',\r\n                                      'sum_pl',\r\n                                      'barcode',\r\n                                      'ls_num',\r\n                                      'period',\r\n                                      'watermeter_type1',\r\n                                      'watermeter_value1',\r\n                                      'watermeter_type2',\r\n                                      'watermeter_value2',\r\n                                      'watermeter_type3',\r\n                                      'watermeter_value3',\r\n                                      'watermeter_type4',\r\n                                      'watermeter_value4',\r\n                                      'watermeter_type5',\r\n                                      'watermeter_value5',\r\n                                      'watermeter_type6',\r\n                                      'watermeter_value6'\r\n                                    ];\r\n                          }\r\n                          else if (thisV.state.attr.payAgent==='мнб') {\r\n                             tab_load='LP_TMP_MNB';\r\n                             delimiter='|';\r\n                             simvl_itog='#';\r\n                             procedure_convert='lp_convert_mnb';\r\n                             mass_pol=['pr_paym',\r\n                                       'date_from',\r\n                                       'ticket_num',\r\n                                       'ticket_date',\r\n                                       'OSB',\r\n                                       'filial',\r\n                                       'operator',\r\n                                       'oper_num',\r\n                                       'sum_pl',\r\n                                       'barcode',\r\n                                       'ls_num',\r\n                                       'period',\r\n                                       'watermeter_value_hv1',\r\n                                       'watermeter_value_hv2',\r\n                                       'watermeter_value_hv3',\r\n                                       'watermeter_value_gv1',\r\n                                       'watermeter_value_gv2',\r\n                                       'watermeter_value_gv3',\r\n                                       'watermeter_value_hv4',\r\n                                       'watermeter_value_gv4'\r\n                                     ];\r\n                           }\r\n                          else if (thisV.state.attr.payAgent==='прсп') {\r\n                              tab_load='LP_TMP_PRSP';\r\n                              delimiter=';';\r\n                              simvl_itog='=';\r\n                              procedure_convert='lp_convert_prsp';\r\n                              procedure_convert_dop_params=\", to_char(nvl(TO_DATE(:load_date,'DD.MM.RRRR'), sysdate), 'FXDD/MM/YYYY HH24:MI:SS')\";\r\n                              mass_pol=['date_from',\r\n                                         'date_time',\r\n                                         'osb',\r\n                                         'kassir',\r\n                                         'oper_kod',\r\n                                         'ls_num',\r\n                                         'fio',\r\n                                         'address',\r\n                                         'period',\r\n                                         'sum_oper',\r\n                                         'sum_p',\r\n                                         'sum_com',\r\n                                         'wat_val'\r\n                                      ];\r\n                          }\r\n                          else if (thisV.state.attr.payAgent==='плт') {\r\n                              tab_load='LP_TMP_PLT';\r\n                              delimiter='|';\r\n                              simvl_itog='#';\r\n                              procedure_convert='lp_convert_plt';\r\n                              procedure_convert_dop_params=\", to_char(nvl(TO_DATE(:load_date,'DD.MM.RRRR'), sysdate), 'FXDD/MM/YYYY HH24:MI:SS')\";\r\n                              mass_pol=['pr_paym',\r\n                                         'date_from',\r\n                                         'ticket_num',\r\n                                         'ticket_date',\r\n                                         'OSB',\r\n                                         'filial',\r\n                                         'operator',\r\n                                         'oper_num',\r\n                                         'sum_pl',\r\n                                         'barcode',\r\n                                         'ls_num',\r\n                                         'period',\r\n                                         'watermeter_value_hv1',\r\n                                         'watermeter_value_hv2',\r\n                                         'watermeter_value_hv3',\r\n                                         'watermeter_value_gv1',\r\n                                         'watermeter_value_gv2',\r\n                                         'watermeter_value_gv3',\r\n                                         'watermeter_value_hv4',\r\n                                         'watermeter_value_gv4'\r\n                                      ];\r\n                          }\r\n                          sql+=\"  lp_reestr_pkg.lp_trunc_table('\"+tab_load+\"');\\n\";\r\n                          var count_all=0;\r\n                          output_mass_str.forEach(function(v,key) {\r\n                          //foreach ($output_mass['str'] as $key=>$v) {\r\n                              var one_str=v.split(delimiter),\r\n                                  pr_insert=false;\r\n                              if (one_str.length>1) {\r\n                                  pr_insert=true;\r\n                                  if (v[0]!==simvl_itog) {\r\n                                    count_all++;\r\n                                  }\r\n                              }\r\n                              if (pr_insert) {\r\n                                  sql+='  INSERT INTO WATERMAN.'+tab_load+'\\n'+\r\n                                        '      (recnum';\r\n                                  one_str.forEach(function(v2,key2) {\r\n                                  //foreach ($one_str as $key2=>$v2) {\r\n                                      sql+=\",\"+mass_pol[key2];\r\n                                  });\r\n                                  sql+=')\\n'+\r\n                                        '      VALUES ('+String(key+1);\r\n                                  //foreach ($one_str as $key2=>$v2) {\r\n                                  one_str.forEach(function(v2,key2) {\r\n                                      sql+=\",'\"+v2.trim()+\"'\";\r\n                                  });\r\n                                  sql+=');\\n';\r\n                              }\r\n                          });\r\n                          sql+='  COMMIT;\\n';\r\n                          sql+='  SELECT lp_reestr_files_id_sq.NEXTVAL INTO t_file_id FROM dual;\\n';\r\n                          sql+=\"  lp_reestr_pkg.lp_ins_files(t_file_id, :payFileName, :payAgent);\\n\";\r\n                          sql+=\"  lp_reestr_pkg.\"+procedure_convert+\"(t_file_id\"+procedure_convert_dop_params+\");\\n\";\r\n                          sql+='  :t_file_id_v:=t_file_id;\\n';\r\n                          sql+='END;';\r\n                          var data = {};\r\n                          data.exec_params_in={};\r\n                          //data.query_params={};\r\n                          data.execsql=sql;\r\n                          data.exec_params_in['payFileName']=thisV.state.attr.payFileName;\r\n                          data.exec_params_in['payAgent']=thisV.state.attr.payAgent;\r\n                          if ((thisV.state.attr.payAgent==='прсп') || (thisV.state.attr.payAgent==='плт')) {\r\n                             data.exec_params_in['load_date']=format(refDatePickerC.current.state.value,'dd.MM.yyyy');\r\n                          }\r\n                          data.exec_params_out=[];\r\n                          data.exec_params_out.push({name:'t_file_id_v',type:'number'});\r\n                          getExecQuery(data,\r\n                                       function(response0) {\r\n                                          let newObj = { ...thisV.state.attr };\r\n                                          newObj.payFileId=response0.data.execout['t_file_id_v'];\r\n                                          thisV.setState(stateModalObj[2](count_all,newObj));\r\n                                          refLoadState.current.handleHide();\r\n                                       }\r\n                                     );\r\n\r\n                      }\r\n                     },\r\n                refLoadState\r\n              );\r\n\r\n     }\r\n\r\n     else if ((thisV.state.stage===2) & (!!thisV.state.attr.payFileId)) {\r\n         var data = {};\r\n        data.exec_params_in={};\r\n        //data.query_params={};\r\n        data.execsql=`DECLARE\r\n                           t_lh NUMBER := NULL;\r\n                       BEGIN\r\n                           lp_reestr_pkg.create_payments(t_lh, :file_id);\r\n                           :t_lh_v:=t_lh;\r\n                       END;`;\r\n        data.exec_params_in['file_id']=thisV.state.attr.payFileId;\r\n        data.exec_params_out=[];\r\n        data.exec_params_out.push({name:'t_lh_v',type:'number'});\r\n        thisV.setState({loadStage:true});\r\n        getExecQuery(data,\r\n                     function(response0) {\r\n                        let newObj = { ...thisV.state.attr };\r\n                        newObj.loghandle=response0.data.execout['t_lh_v'];\r\n                        //if (+response.data[0].COUNT_F>0) {\r\n                        thisV.setState(stateModalObj[3](newObj));\r\n                     },\r\n                     refLoadState\r\n                   );\r\n\r\n     }\r\n\r\n     else if ((thisV.state.stage===3) & (!!thisV.state.attr.payFileId)) {\r\n         var data = {};\r\n        data.exec_params_in={};\r\n        //data.query_params={};\r\n        data.execsql=`DECLARE\r\n                         t_lh NUMBER := NULL;\r\n                       BEGIN\r\n                           lp_reestr_pkg.insert_watermeter_values (t_lh, :file_id);\r\n                           :t_lh_v:=t_lh;\r\n                       END;`;\r\n        data.exec_params_in['file_id']=thisV.state.attr.payFileId;\r\n        data.exec_params_out=[];\r\n        data.exec_params_out.push({name:'t_lh_v',type:'number'});\r\n        thisV.setState({loadStage:true});\r\n        getExecQuery(data,\r\n                     function(response0) {\r\n                        let newObj = { ...thisV.state.attr };\r\n                        newObj.loghandle=response0.data.execout['t_lh_v'];\r\n                        thisV.setState(stateModalObj[4](newObj))\r\n                     },\r\n                     refLoadState\r\n                   );\r\n\r\n     }\r\n\r\n     else if (thisV.state.stage===4) {\r\n       refModalStage.current.setState(stateModalObj[1]);\r\n       refSelectFileName.current.getDataSQL();\r\n     }\r\n  };\r\n  //состояния модального окна загрузки файлов\r\n  const stateModalObj={1:{modalShow:true,\r\n                          stage:1,\r\n                          header:'Этап 1: Выбор файла для загрузки',\r\n                          attr:{payAgent:'сб'},\r\n                          nextButtonLabel:'Далее',\r\n                          handleButtonNext:stateModalObjNext,\r\n                          cancelButtonLabel:'Закрыть',\r\n                          handleButtonCancel:undefined,\r\n                          cancelButtonDisplay:'block',\r\n                          loadStage:false,\r\n                          body:<Container fluid>\r\n                                <Row>\r\n                                   <Col>\r\n                                      <SelectC\r\n                                        obj={{label:'Плательщик',\r\n                                              id:\"select-payler\",\r\n                                              defaultValue:\"cб\",\r\n                                              onChange:(event,thisV) => {\r\n                                                var newAttr={...refModalStage.current.state.attr},\r\n                                                    dpc_d_v;\r\n                                                newAttr.payAgent=event.target.value;\r\n                                                refModalStage.current.setState({attr:newAttr});\r\n                                                if (['плт','прсп'].indexOf(event.target.value)>-1) {\r\n                                                    dpc_d_v='block';\r\n                                                }\r\n                                                else {\r\n                                                    dpc_d_v='none';\r\n                                                }\r\n                                                refDatePickerC.current.setState({display:dpc_d_v});\r\n                                              },\r\n                                              data:[{label:'ПАО Сбербанк',value:'cб'},\r\n                                                    {label:'ФГУП Почта России',value:'пчт'},\r\n                                                    {label:'ОАО МинБ',value:'мнб'},\r\n                                                    {label:'КБ Платина',value:'плт'},\r\n                                                    {label:'НКО Перспектива',value:'прсп'},\r\n                                                  ],\r\n                                              /*multiple:true,\r\n                                              autoWidth:false,*/\r\n                                            }}\r\n                                      />\r\n                                   </Col>\r\n                                   <Col>\r\n                                     <DatePickerC\r\n                                        ref={refDatePickerC}\r\n                                        obj={{id:\"loadDate\",\r\n                                               //onChange:(date,thisV)\r\n                                               dateFormat:'dd.MM.yyyy',\r\n                                               label:'Дата',\r\n                                               componentDidMount:(thisV) => {\r\n                                                  thisV.setState({display:'none',value:startOfMonth(new Date())});\r\n                                               }\r\n                                             }}\r\n                                     />\r\n                                   </Col>\r\n                                 </Row>\r\n                                 <Row>\r\n                                   <Col>\r\n                                     <InputFileC\r\n                                       obj={{allowedFileTypes:['text/*'],\r\n                                             name:'payFileInput',\r\n                                             onChange:(event,thisV0) => {\r\n                                                 function readFile(object) {\r\n                                                   var file = object.files[0],\r\n                                                       reader = new FileReader();\r\n                                                   reader.onload = function() {\r\n                                                         refLoadState.current.handleHide();\r\n                                                         var newAttr={...refModalStage.current.state.attr};\r\n                                                         newAttr.payFileValue=reader.result;\r\n                                                         newAttr.payFileName=file_name_true;\r\n                                                         refModalStage.current.setState({attr:newAttr});\r\n                                                         thisV0.setState({error:'',placeholder:'Файл успешно загружен',buttonLabel:file_name_true,prLoadFile:true});\r\n                                                     }\r\n                                                     reader.readAsText(file, 'CP1251');\r\n                                                   }\r\n\r\n                                                   let file_name_true=$(event.target).val().trim().split('\\\\').pop();\r\n                                                   if (file_name_true.length>0) {\r\n                                                     var pr_ok=true;\r\n                                                     if (!!refModalStage.current.state.attr.payFileName) {\r\n                                                       if (refModalStage.current.state.attr.payFileName===file_name_true) {\r\n                                                          pr_ok=false;\r\n                                                       }\r\n                                                     }\r\n                                                     if (pr_ok) {\r\n                                                       refLoadState.current.handleShow();\r\n                                                       readFile(event.target);\r\n                                                     }\r\n                                                   }\r\n                                                 }\r\n                                           }}\r\n                                       />\r\n                                 </Col>\r\n                               </Row>\r\n                             </Container>\r\n                           },\r\n                       2:(count_all,attr) => {\r\n                          return {attr:attr,\r\n                                  stage:2,\r\n                                  modalShow:true,\r\n                                  nextButtonLabel:'Далее',\r\n                                  nextButtonDisplay:'block',\r\n                                  handleButtonNext:stateModalObjNext,\r\n                                  cancelButtonLabel:'Остановить',\r\n                                  cancelButtonDisplay:'block',\r\n                                  handleButtonCancel:(thisV) => {\r\n                                      if (!!!thisV.state.attr.nextStageContinue) {\r\n                                        thisV.setState(stateModalObj[1]);\r\n                                      }\r\n                                      else {\r\n                                        thisV.setState(stateModalObj[77](refSelectFileName.current.state.options));\r\n                                      }\r\n                                  },\r\n                                  loadStage:false,\r\n                                  header:'Этап 2: Создание платежных документов',\r\n                                  body:<div>Загружено {count_all} строк. Для дальнейшей обработки файла нажмите кнопку \"Далее\"\r\n                                       </div>}\r\n                         },\r\n                       3:(attr) => {\r\n                          return {attr:attr,\r\n                                  stage:3,\r\n                                  modalShow:true,\r\n                                  nextButtonLabel:'Далее',\r\n                                  nextButtonDisplay:'block',\r\n                                  handleButtonNext:stateModalObjNext,\r\n                                  cancelButtonLabel:'Остановить',\r\n                                  cancelButtonDisplay:'block',\r\n                                  handleButtonCancel:(thisV) => {\r\n                                      if (!!!thisV.state.attr.nextStageContinue) {\r\n                                        thisV.setState(stateModalObj[1]);\r\n                                      }\r\n                                      else {\r\n                                        thisV.setState(stateModalObj[77](refSelectFileName.current.state.options));\r\n                                      }\r\n                                  },\r\n                                  loadStage:false,\r\n                                  header:'Этап 3: Внесение показаний для ПУ',\r\n                                  body:<div>Логи создания платежных документов\r\n                                         <TableDB\r\n                                           obj={{stateLoadObj:refLoadState,\r\n                                                 tab_id:'tab_log_create_pay',\r\n                                                 sql:`select ROW_NUMBER() OVER (ORDER BY t.recid) RN,\r\n                                                             t.message\r\n                                                        from LOGBOOKS t\r\n                                                       where t.bookid=`+attr.loghandle+`\r\n                                                       order by 1`,\r\n                                                keyField:'RN',\r\n                                                columns:[{dataField:'RN',text:'№ п/п',headerAttrs: (column, colIndex) => ({ 'width': `55px` })},\r\n                                                         {dataField:'MESSAGE',text:'Текст',headerAttrs: (column, colIndex) => ({ 'width': `200px` })},\r\n                                                        ],\r\n                                                 paginationFactory:paginationFactory,\r\n                                                 paginationOptions:{paginationSize: 7,\r\n                                                                     sizePerPageList: [{\r\n                                                                         text: '50', value: 50\r\n                                                                       }, {\r\n                                                                         text: '100', value:100\r\n                                                                       }, {\r\n                                                                         text: '500', value:500\r\n                                                                       },{\r\n                                                                           text: '1000', value: 1000\r\n                                                                         }]\r\n                                                                   },\r\n                                               }}\r\n                                         />\r\n                                       </div>\r\n                                 }\r\n                         },\r\n                       4:(attr) => {\r\n                          return {attr:attr,\r\n                                   stage:4,\r\n                                   modalShow:true,\r\n                                   nextButtonLabel:'Готово',\r\n                                   nextButtonDisplay:'block',\r\n                                   handleButtonNext:stateModalObjNext,\r\n                                   cancelButtonDisplay:'none',\r\n                                   loadStage:false,\r\n                                   header:'Этап 4: Анализ логов загрузки показаний для ПУ',\r\n                                   body:<TableDB\r\n                                            obj={{stateLoadObj:refLoadState,\r\n                                                  tab_id:'tab_log_create_pay',\r\n                                                  sql:`select ROW_NUMBER() OVER (ORDER BY t.recid) RN,\r\n                                                              t.message\r\n                                                         from LOGBOOKS t\r\n                                                        where t.bookid=`+attr.loghandle+`\r\n                                                        order by 1`,\r\n                                                 keyField:'RN',\r\n                                                 columns:[{dataField:'RN',text:'№ п/п',headerAttrs: (column, colIndex) => ({ 'width': `55px` })},\r\n                                                          {dataField:'MESSAGE',text:'Текст',headerAttrs: (column, colIndex) => ({ 'width': `200px` })},\r\n                                                         ],\r\n                                                  paginationFactory:paginationFactory,\r\n                                                  paginationOptions:{paginationSize: 7,\r\n                                                                      sizePerPageList: [{\r\n                                                                          text: '50', value: 50\r\n                                                                        }, {\r\n                                                                          text: '100', value:100\r\n                                                                        }, {\r\n                                                                          text: '500', value:500\r\n                                                                        },{\r\n                                                                            text: '1000', value: 1000\r\n                                                                          }]\r\n                                                                    },\r\n                                                }}\r\n                                          />\r\n                                  }\r\n                        },\r\n                      //продолжение загрузки\r\n                      77:(options) => {\r\n                         //атрибуты по умолчанию\r\n                         let attr={payFileId:+options[0].value,nextStageContinue:2};\r\n                         return {modalShow:true,\r\n                                  stage:77,\r\n                                  header:'Выбор файла для продолжения загрузки',\r\n                                  attr:attr,\r\n                                  nextButtonLabel:'Далее',\r\n                                  nextButtonDisplay:'block',\r\n                                  handleButtonNext:(thisV) => {\r\n                                    if (thisV.state.attr.nextStageContinue===2) {\r\n                                      //запрашиваем информацию о наличии обработки платежей\r\n                                      var data = {};\r\n                                      data.params={p_file_id:thisV.state.attr.payFileId};\r\n                                      //let resp_data;\r\n                                      data.sql=`SELECT COUNT(1) COUNT_STR\r\n                                                 FROM lp_reestr s\r\n                                                WHERE s.file_id = :p_file_id\r\n                                                  AND NVL(TRIM(s.address),'NULL') != 'КОНТРОЛЬНАЯ СТРОКА'`;\r\n                                      getQuery(data,(response)=> {\r\n                                                      thisV.setState(stateModalObj[2](response.data[0].COUNT_STR,thisV.state.attr));\r\n                                                    },\r\n                                               refLoadState\r\n                                             );\r\n                                    }\r\n                                    else if (thisV.state.attr.nextStageContinue===3) {\r\n                                        thisV.setState(stateModalObj[3](thisV.state.attr));\r\n                                    }\r\n                                  },\r\n                                  cancelButtonLabel:'Закрыть',\r\n                                  handleButtonCancel:undefined,\r\n                                  loadStage:false,\r\n                                  body:<Container fluid>\r\n                                        <Row>\r\n                                           <Col>\r\n                                              <SelectB\r\n                                                obj={{label:'Наименование файла',\r\n                                                      options:options,\r\n                                                      handleChange:(option) => {\r\n                                                        let newObj = { ...refModalStage.current.state.attr };\r\n                                                        newObj.payFileId= +option[0].value;\r\n                                                        refModalStage.current.setState({attr:newObj});\r\n                                                      }\r\n                                                    }}\r\n                                              />\r\n                                           </Col>\r\n                                           <Col>\r\n                                              <RadioGroupC\r\n                                                  obj={{id:'nextStageContinue',\r\n                                                        label:'Следующий этап',\r\n                                                        name:'nextStageContinue',\r\n                                                        data:[{value:2,label:'Загрузка оплат'},\r\n                                                               {value:3,label:'Загрузка показаний'}\r\n                                                             ],\r\n                                                        defaultValue:attr.nextStageContinue,\r\n                                                        handleChange:(event) => {\r\n                                                          let newObj = { ...refModalStage.current.state.attr };\r\n                                                          newObj.nextStageContinue=event.target.value;\r\n                                                          refModalStage.current.setState({attr:newObj});\r\n                                                        }\r\n                                                      }}\r\n                                              />\r\n                                           </Col>\r\n                                         </Row>\r\n                                     </Container>\r\n                                }\r\n                      }};\r\n\r\n  //объект для таблицы с данными из БД\r\n  const tableDBObj={stateLoadObj:refLoadState,\r\n                    tab_id:'tab_load_files',\r\n                    tableContainerClass:'tab_load_files',\r\n                    paramGroup:paramGroupV,\r\n                    parParentID:['fileID','fileStatus','wtrmtrsStatusCW','wtrmtrsStatusHW'],\r\n                    sql:`SELECT f.name filename,\r\n                                s.recnum,\r\n                                s.ticket_num,\r\n                                s.ticket_date,\r\n                                s.fio,\r\n                                s.address,\r\n                                s.ls_num,\r\n                                s.period_year,\r\n                                s.period_month,\r\n                                s.sum_pl,\r\n                                s.status,\r\n                                s.id,\r\n                                s.reestr_id,\r\n                                s.payment_id,\r\n                                s.error_text,\r\n                                s.watermeter_type1,\r\n                                s.watermeter_factory_number1,\r\n                                NVL(LRS.watermeter_value1,s.watermeter_value1) watermeter_value1,\r\n                                s.watermeter_type2,\r\n                                s.watermeter_factory_number2,\r\n                                NVL(LRS.watermeter_value2,s.watermeter_value2) watermeter_value2,\r\n                                s.watermeter_type3,\r\n                                s.watermeter_factory_number3,\r\n                                NVL(LRS.watermeter_value3,s.watermeter_value3) watermeter_value3,\r\n                                s.watermeter_type4,\r\n                                s.watermeter_factory_number4,\r\n                                NVL(LRS.watermeter_value4,s.watermeter_value4) watermeter_value4,\r\n                                s.watermeter_type5,\r\n                                s.watermeter_factory_number5,\r\n                                NVL(LRS.watermeter_value5,s.watermeter_value5) watermeter_value5,\r\n                                s.watermeter_type6,\r\n                                s.watermeter_factory_number6,\r\n                                NVL(LRS.watermeter_value6,s.watermeter_value6) watermeter_value6,\r\n                                NVL(LRS.watermeter_status_cw,s.watermeter_status_cw) watermeter_status_cw,\r\n                                NVL(LRS.watermeter_error_text_cw,s.watermeter_error_text_cw) watermeter_error_text_cw,\r\n                                NVL(LRS.watermeter_status_hw,s.watermeter_status_hw) watermeter_status_hw,\r\n                                NVL(LRS.watermeter_error_text_hw,s.watermeter_error_text_hw) watermeter_error_text_hw,\r\n                                NVL(LRS.watermeter_date,s.watermeter_date) watermeter_date,\r\n                                s.pay_source,\r\n                                CASE WHEN LRS.LP_REESTR_ID IS NULL THEN 1\r\n                                     ELSE 0\r\n                                END PR_INSERT\r\n                           FROM lp_reestr_files f\r\n                           JOIN lp_reestr s ON f.id = s.file_id\r\n                           LEFT JOIN LP_REESTR_STATUS LRS ON LRS.LP_REESTR_ID=S.ID\r\n                        WHERE ((f.id in (:fileID)) or (exists(SELECT 1 from table(sys.ODCINumberList(:fileID)) where COLUMN_VALUE is null)))\r\n                         AND (s.status in (:fileStatus) or (exists(SELECT 1 from table(sys.odcivarchar2list(:fileStatus)) where COLUMN_VALUE is null)))\r\n                         AND (NVL(LRS.watermeter_status_cw,s.watermeter_status_cw) IN (:wtrmtrsStatusCW) or (exists(SELECT 1 from table(sys.odcivarchar2list(:wtrmtrsStatusCW)) where COLUMN_VALUE is null)))\r\n                         AND (NVL(LRS.watermeter_status_hw,s.watermeter_status_hw) IN (:wtrmtrsStatusHW) or (exists(SELECT 1 from table(sys.odcivarchar2list(:wtrmtrsStatusHW)) where COLUMN_VALUE is null)))\r\n                         AND NVL(TRIM(s.address),'NULL') != 'КОНТРОЛЬНАЯ СТРОКА'\r\n                         Order by f.name,s.recnum`,\r\n                   /*selectRowProp: {mode: 'radio',\r\n                                   bgColor: '#0070BA', // you should give a bgcolor, otherwise, you can't regonize which row has been selected\r\n                                   hideSelectColumn: true,  // enable hide selection column.\r\n                                   clickToSelect: true,  // you should enable clickToSelect, otherwise, you can't select column.\r\n                                   selected:['RVKP_W_ID']\r\n                                 },*/\r\n                   keyField:'ID',\r\n                   columns:[{dataField:'FILENAME',text:'Наименование\\nфайла',headerAttrs: (column, colIndex) => ({ 'width': `160px` })},\r\n                            {dataField:'RECNUM',text:'Н/п',headerAttrs: (column, colIndex) => ({ 'width': `60px` }),\r\n                             filter: textFilter({\r\n                                       placeholder: '...',\r\n                                     })},\r\n                           {dataField:'TICKET_NUM',text:'Номер\\nквитанции',headerAttrs: (column, colIndex) => ({ 'width': `100px` }),\r\n                            filter: textFilter({\r\n                                      placeholder: '...',\r\n                                    })},\r\n                           {dataField:'TICKET_DATE',text:'Дата\\nплатежа',headerAttrs: (column, colIndex) => ({ 'width': `110px` }),\r\n                            filter: textFilter({\r\n                                      placeholder: '...',\r\n                                    })},\r\n                           {dataField:'FIO',text:'ФИО',hidden:true},\r\n                           {dataField:'ADDRESS',text:'Адрес',headerAttrs: (column, colIndex) => ({ 'width': `150px` }),\r\n                            filter: textFilter({\r\n                                      placeholder: '...',\r\n                                    })},\r\n                           {dataField:'LS_NUM',text:'Лиц. счет',headerAttrs: (column, colIndex) => ({ 'width': `110px` }),\r\n                            filter: textFilter({\r\n                                      placeholder: '...',\r\n                                    })},\r\n                           {dataField:'PERIOD_YEAR',text:'Период/год',headerAttrs: (column, colIndex) => ({ 'width': `90px` }),\r\n                            filter: textFilter({\r\n                                      placeholder: '...',\r\n                                    })},\r\n                           {dataField:'PERIOD_MONTH',text:'Период/месяц',headerAttrs: (column, colIndex) => ({ 'width': `90px` }),\r\n                            filter: textFilter({\r\n                                      placeholder: '...',\r\n                                    })},\r\n                           {dataField:'SUM_PL',text:'Сумма',headerAttrs: (column, colIndex) => ({ 'width': `110px` })},\r\n                           {dataField:'STATUS',text:'Статус',headerAttrs: (column, colIndex) => ({ 'width': `110px` })},\r\n                           {dataField:'ID',text:'ID записи',hidden:true},\r\n                           {dataField:'REESTR_ID',text:'REESTR_ID',hidden:true},\r\n                           {dataField:'PAYMENT_ID',text:'PAYMENT_ID',hidden:true},\r\n                           {dataField:'ERROR_TEXT',text:'ERROR_TEXT',hidden:true},\r\n                           {dataField:'WATERMETER_TYPE1',text:'WATERMETER_TYPE1',hidden:true},\r\n                           {dataField:'WATERMETER_FACTORY_NUMBER1',text:'WATERMETER_FACTORY_NUMBER1',hidden:true},\r\n                           {dataField:'WATERMETER_VALUE1',text:'WATERMETER_VALUE1',hidden:true},\r\n                           {dataField:'WATERMETER_TYPE2',text:'WATERMETER_TYPE2',hidden:true},\r\n                           {dataField:'WATERMETER_FACTORY_NUMBER2',text:'WATERMETER_FACTORY_NUMBER2',hidden:true},\r\n                           {dataField:'WATERMETER_VALUE2',text:'WATERMETER_VALUE2',hidden:true},\r\n                           {dataField:'WATERMETER_TYPE3',text:'WATERMETER_TYPE3',hidden:true},\r\n                           {dataField:'WATERMETER_FACTORY_NUMBER3',text:'WATERMETER_FACTORY_NUMBER3',hidden:true},\r\n                           {dataField:'WATERMETER_VALUE3',text:'WATERMETER_VALUE3',hidden:true},\r\n                           {dataField:'WATERMETER_TYPE4',text:'WATERMETER_TYPE4',hidden:true},\r\n                           {dataField:'WATERMETER_FACTORY_NUMBER4',text:'WATERMETER_FACTORY_NUMBER4',hidden:true},\r\n                           {dataField:'WATERMETER_VALUE4',text:'WATERMETER_VALUE4',hidden:true},\r\n                           {dataField:'WATERMETER_TYPE5',text:'WATERMETER_TYPE5',hidden:true},\r\n                           {dataField:'WATERMETER_FACTORY_NUMBER5',text:'WATERMETER_FACTORY_NUMBER5',hidden:true},\r\n                           {dataField:'WATERMETER_VALUE5',text:'WATERMETER_VALUE5',hidden:true},\r\n                           {dataField:'WATERMETER_TYPE6',text:'WATERMETER_TYPE6',hidden:true},\r\n                           {dataField:'WATERMETER_FACTORY_NUMBER6',text:'WATERMETER_FACTORY_NUMBER6',hidden:true},\r\n                           {dataField:'WATERMETER_VALUE6',text:'WATERMETER_VALUE6',hidden:true},\r\n                           {dataField:'WATERMETER_STATUS_CW',text:'Статус\\nпоказаний ХВ',headerAttrs: (column, colIndex) => ({ 'width': `110px` })},\r\n                           {dataField:'WATERMETER_ERROR_TEXT_CW',text:'WATERMETER_ERROR_TEXT_CW',hidden:true},\r\n                           {dataField:'WATERMETER_STATUS_HW',text:'Статус\\nпоказаний ГВ',headerAttrs: (column, colIndex) => ({ 'width': `110px` })},\r\n                           {dataField:'WATERMETER_ERROR_TEXT_HW',text:'WATERMETER_ERROR_TEXT_HW',hidden:true},\r\n                           {dataField:'WATERMETER_DATE',text:'WATERMETER_DATE',hidden:true},\r\n                         ],\r\n                    filterFactory:filterFactory,\r\n                   beforeLoadData:function(thisV,data) {\r\n                        var pr_ok=false;\r\n                        for (var prop in data.params) {\r\n                          if (data.params[prop].length>0) {\r\n                              pr_ok=true;\r\n                          }\r\n                        }\r\n                        if (!pr_ok) {\r\n                          data.error=true;\r\n                          thisV.setState({items: [],selectRow:[]});\r\n                        }\r\n                    },\r\n                    afterLoadData:function(thisV) {\r\n                        //если ПУ обновили в дочернем окне, то необходимо обновить текущее открытое модальное окно,\r\n                        //т.к. именно из него делался вызов дочернего окна\r\n                        if (refModalStageDetail.current.state.modalShow) {\r\n                          //ищем строку данных на основе которой открыто модальное окно,\r\n                          //теоретически могла обновиться, поэтому просто по индексу не обращаемся\r\n                          //цикл for а не foreache чтобы остановиться когда найдем на основе ключевого поля\r\n                          for (var i = 0; i < thisV.state.items.length; i++) {\r\n                            if (thisV.state.items[i][thisV.props.obj.keyField]===thisV.state.selectRow[0][thisV.props.obj.keyField]) {\r\n                                refModalStageDetail.current.setState(detailStateModal(thisV.state.items[i]));\r\n                                break;\r\n                            }\r\n                          }\r\n                        }\r\n                    },\r\n                    paginationFactory:paginationFactory,\r\n                    paginationOptions:{paginationSize: 7,\r\n                                        sizePerPageList: [{\r\n                                            text: '50', value: 50\r\n                                          }, {\r\n                                            text: '100', value:100\r\n                                          }, {\r\n                                            text: '500', value:500\r\n                                          },{\r\n                                              text: '1000', value: 1000\r\n                                            }]\r\n                                      },\r\n                    //действия панели таблицы\r\n                    /*addRow:(thisV) => {\r\n                            alert('NA add!');\r\n                            console.log(thisV);\r\n                          },\r\n                    editRow:(thisV) => {\r\n                            alert('NA edit!');\r\n                          },\r\n                    deleteRow:(thisV) => {\r\n                               alert('NA delete!');\r\n                             },*/\r\n                    dopAction:[{id:'load_file',label:'Загрузить файл',\r\n                                callback:(thisV) => {\r\n                                  if (!refModalStage.current.state.modalShow) {\r\n                                    if ((refModalStage.current.state.stage===1) || (refModalStage.current.state.stage===77)) {\r\n                                      refModalStage.current.setState(stateModalObj[1]);\r\n                                    }\r\n                                    else {\r\n                                        refModalStage.current.setState({modalShow:true});\r\n                                    }\r\n                                  }\r\n                                }},\r\n                               {id:'load_file_continue',label:'Продолжить загрузку файла',\r\n                                callback:(thisV) => {\r\n                                    var pr_ok=true;\r\n                                    if ((refSelectFileName.current===null) || (refSelectFileName.current===undefined)) {\r\n                                      pr_ok=false;\r\n                                    }\r\n                                    else if (refSelectFileName.current.state.options[0]['value']===-777) {\r\n                                      pr_ok=false;\r\n                                    }\r\n                                    if (!pr_ok) {\r\n                                      refCustomAlert.current.setState({show:true,text:'Пожалуйста дождитесь окончания загрузки наименований файлов'});\r\n                                    }\r\n                                    else {\r\n                                      refModalStage.current.setState(stateModalObj[77](refSelectFileName.current.state.options));\r\n                                    }\r\n                                }},\r\n                              ],\r\n                   rowEvents: {onDoubleClick: (e, row, rowIndex) => {\r\n                                refTableDB.current.setState({selectRow:[row]});\r\n                                refModalStageDetail.current.setState(detailStateModal(row));\r\n                              }},\r\n                   };\r\n\r\n const detailStateModal=(row) => {\r\n         const rowDatail=[row],\r\n               rowDatailWtrmts=[];\r\n         rowDatailWtrmts[0]={ID:1,\r\n                             WATERMETER_TYPE:row.WATERMETER_TYPE1,\r\n                             WATERMETER_FACTORY_NUMBER:row.WATERMETER_FACTORY_NUMBER1,\r\n                             WATERMETER_VALUE:row.WATERMETER_VALUE1,\r\n                             WATERMETER_DATE:row.WATERMETER_DATE\r\n                            }\r\n         for (var i = 2; i <= 6; i++) {\r\n           if (row['WATERMETER_TYPE'+i]!==null) {\r\n             rowDatailWtrmts.push({ID:i,\r\n                                   WATERMETER_TYPE:row['WATERMETER_TYPE'+i],\r\n                                   WATERMETER_FACTORY_NUMBER:row['WATERMETER_FACTORY_NUMBER'+i],\r\n                                   WATERMETER_VALUE:row['WATERMETER_VALUE'+i],\r\n                                   WATERMETER_DATE:''\r\n                                 });\r\n           }\r\n         }\r\n         return {modalShow:true,\r\n                        stage:1,\r\n                        header:'Детализация информации по выбранной строке',\r\n                        nextButtonDisplay:'none',\r\n                        body:<Container fluid>\r\n                                <Row fluid>\r\n                                   <Col fluid>\r\n                                     <BootstrapTable\r\n                                       id=\"load_data_detail_row\"\r\n                                       data={rowDatail}\r\n                                       keyField={ tableDBObj.keyField}\r\n                                       columns={[{dataField:'FILENAME',text:'Наименование\\nфайла',headerAttrs: (column, colIndex) => ({ 'width': `160px` })},\r\n                                                {dataField:'RECNUM',text:'Н/п',headerAttrs: (column, colIndex) => ({ 'width': `60px` })},\r\n                                                {dataField:'TICKET_NUM',text:'Номер\\nквитанции',headerAttrs: (column, colIndex) => ({ 'width': `100px` })},\r\n                                                {dataField:'TICKET_DATE',text:'Дата\\nплатежа',headerAttrs: (column, colIndex) => ({ 'width': `110px` })},\r\n                                                 {dataField:'ADDRESS',text:'Адрес',headerAttrs: (column, colIndex) => ({ 'width': `150px` })},\r\n                                                 {dataField:'LS_NUM',text:'Лиц. счет',headerAttrs: (column, colIndex) => ({ 'width': `110px` })},\r\n                                                 {dataField:'PERIOD_YEAR',text:'Период/год',headerAttrs: (column, colIndex) => ({ 'width': `90px` })},\r\n                                                 {dataField:'PERIOD_MONTH',text:'Период/месяц',headerAttrs: (column, colIndex) => ({ 'width': `90px` })},\r\n                                                 {dataField:'SUM_PL',text:'Сумма',headerAttrs: (column, colIndex) => ({ 'width': `110px` })},\r\n                                                 {dataField:'STATUS',text:'Статус',headerAttrs: (column, colIndex) => ({ 'width': `110px` })},\r\n                                                 {dataField:'WATERMETER_STATUS_CW',text:'Статус\\nпоказаний ХВ',headerAttrs: (column, colIndex) => ({ 'width': `110px` })},\r\n                                                 {dataField:'WATERMETER_STATUS_HW',text:'Статус\\nпоказаний ГВ',headerAttrs: (column, colIndex) => ({ 'width': `110px` })}\r\n                                             ]}\r\n                                       classes=\"tabForModal\"\r\n                                     />\r\n                                   </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                   <Col>\r\n                                       Ошибки\r\n                                   </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                   <Col>\r\n                                     <BootstrapTable\r\n                                       id=\"load_data_detail_error\"\r\n                                       data={rowDatail}\r\n                                       keyField={tableDBObj.keyField}\r\n                                       classes=\"tabForModal\"\r\n                                       columns={ [{dataField:'ID',text:'ИД',headerAttrs: (column, colIndex) => ({ 'width': `100px` })},\r\n                                                   {dataField:'REESTR_ID',text:'ИД реестра',headerAttrs: (column, colIndex) => ({ 'width': `100px` })},\r\n                                                   {dataField:'PAYMENT_ID',text:'ИД квитанции',headerAttrs: (column, colIndex) => ({ 'width': `100px` })},\r\n                                                   {dataField:'STATUS',text:'Статус для всех',headerAttrs: (column, colIndex) => ({ 'width': `150px` })},\r\n                                                   {dataField:'ERROR_TEXT',text:'Статус ошибки',headerAttrs: (column, colIndex) => ({ 'width': `150px` })},\r\n                                                   {dataField:'WATERMETER_STATUS_CW',text:'Статус\\nдля всех ХВ',headerAttrs: (column, colIndex) => ({ 'width': `150px` }),\r\n                                                   formatter:(cell, row, rowIndex)=>{\r\n                                                       if (cell==='Ошибка') {\r\n                                                         var wtmtrForLink=[];\r\n                                                         rowDatailWtrmts.forEach(function(item) {\r\n                                                           wtmtrForLink.push(item.WATERMETER_FACTORY_NUMBER)\r\n                                                         });\r\n                                                         return (<div>\r\n                                                                  <span style={{color:'red'}}>{cell}</span>\r\n                                                                  <Link to={\"/ab/load_watermeter_values/\"+JSON.stringify({placeFrom:'Load_pays',lsNum:row.LS_NUM,strId:row.ID,prInsert:+row.PR_INSERT,wtrmtrs:wtmtrForLink})}\r\n                                                                        target=\"_blank\"\r\n                                                                        style={{float:'right'}}\r\n                                                                        title=\"Исправить показания\"\r\n                                                                  >\r\n                                                                    <img src={require('../../img/debug.png')} style={{height:'23px',width:'auto'}} alt=\"Исправить показания\"/>\r\n                                                                  </Link>\r\n                                                                </div>\r\n                                                                );\r\n                                                       }\r\n                                                       else {\r\n                                                         return cell;\r\n                                                       }\r\n                                                   }},\r\n                                                   {dataField:'WATERMETER_STATUS_HW',text:'Статус\\nдля всех ГВ',headerAttrs: (column, colIndex) => ({ 'width': `150px` }),\r\n                                                    formatter:(cell, row, rowIndex)=>{\r\n                                                      if (cell==='Ошибка') {\r\n                                                        return (<div>\r\n                                                                 <span style={{color:'red'}}>{cell}</span>\r\n                                                                 <Link to={\"/ab/load_watermeter_values/\"+JSON.stringify({placeFrom:'Load_pays',lsNum:row.LS_NUM,strId:row.ID,prInsert:row.PR_INSERT})}\r\n                                                                       target=\"_blank\"\r\n                                                                       style={{float:'right'}}\r\n                                                                       title=\"Исправить показания\"\r\n                                                                 >\r\n                                                                   <img src={require('../../img/debug.png')} style={{height:'23px',width:'auto'}} alt=\"Исправить показания\"/>\r\n                                                                 </Link>\r\n                                                               </div>\r\n                                                               );\r\n                                                      }\r\n                                                       else {\r\n                                                         return cell;\r\n                                                       }\r\n                                                   }},\r\n                                             ] }\r\n                                     />\r\n                                   </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                   <Col>\r\n                                       Ошибки при обработке показаний приборов учета\r\n                                   </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                   <Col>\r\n                                     <BootstrapTable\r\n                                       id=\"load_data_detail_error_wtrmtrs_all\"\r\n                                       data={rowDatail}\r\n                                       keyField={tableDBObj.keyField}\r\n                                       classes=\"tabForModal\"\r\n                                       columns={ [{dataField:'WATERMETER_ERROR_TEXT_CW',text:'Текст ошибки при обработке показаний ХВ',headerAttrs: (column, colIndex) => ({ 'width': `300px` })},\r\n                                                  {dataField:'WATERMETER_ERROR_TEXT_HW',text:'Текст ошибки при обработке показаний ГВ',headerAttrs: (column, colIndex) => ({ 'width': `300px` })},\r\n                                                ]}\r\n                                     />\r\n                                   </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                   <Col>\r\n                                       ПУ\r\n                                   </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                   <Col>\r\n                                     <BootstrapTable\r\n                                       id=\"load_data_detail_error_wtrmtrs\"\r\n                                       data={rowDatailWtrmts}\r\n                                       keyField={tableDBObj.keyField}\r\n                                       classes=\"tabForModal\"\r\n                                       columns={ [{dataField:'WATERMETER_TYPE',text:'Тип',headerAttrs: (column, colIndex) => ({ 'width': `150px` })},\r\n                                                  {dataField:'WATERMETER_FACTORY_NUMBER',text:'Заводской номер',headerAttrs: (column, colIndex) => ({ 'width': `150px` })},\r\n                                                  {dataField:'WATERMETER_VALUE',text:'Показание',headerAttrs: (column, colIndex) => ({ 'width': `150px` })},\r\n                                                  {dataField:'WATERMETER_DATE',text:'Дата',headerAttrs: (column, colIndex) => ({ 'width': `150px` })}\r\n                                                ]}\r\n                                     />\r\n                                   </Col>\r\n                                </Row>\r\n                             </Container>\r\n                 }},\r\n       modalStageObj={componentDidUpdate:(thisV) => {\r\n                           if ((thisV.state.stage===1) & (!!!thisV.state.attr.payFileValue) & (thisV.state.nextButtonDisplay==='block')) {\r\n                              thisV.setState({nextButtonDisplay:'none'});\r\n                           }\r\n                           else if ((thisV.state.stage===1) & (!!thisV.state.attr.payFileValue) & (thisV.state.nextButtonDisplay==='none')) {\r\n                              thisV.setState({nextButtonDisplay:'block'});\r\n                           }\r\n                        }\r\n                     };\r\n  return (\r\n    <div className=\"App\">\r\n      <LoadState ref={refLoadState} />\r\n      <CustomAlert ref={refCustomAlert}/>\r\n      <Container fluid>\r\n        <Row>\r\n          <Col>\r\n            <DivImgClick obj={ divImgClickObj } />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <SelectDB ref={refSelectFileName} obj={ selectFileNameObj }/>\r\n          </Col>\r\n          <Col>\r\n            <SelectB ref={ refSelectFileStatus } obj={ selectFileStatusObj }/>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <SelectB ref={ refSelectWtrmtrsStatusCW } obj={ selectWtrmtrsStatusCWObj }/>\r\n          </Col>\r\n          <Col>\r\n            <SelectB ref={ refSelectWtrmtrsStatusHW } obj={ selectWtrmtrsStatusHWObj }/>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row style={{'margin-top':'1%'}} fluid>\r\n          <Col fluid>\r\n            <TableDB ref={refTableDB} obj={ tableDBObj }/>\r\n            <ModalStage ref={refModalStage} obj={modalStageObj}/>\r\n            <ModalStage ref={refModalStageDetail}/>\r\n          </Col>\r\n        </Row>\r\n        <Row style={{'margin-top':'1%'}}>\r\n          <Col >\r\n             Двойной клик левой кнопки мыши на строке - вызов детализации загрузки по текущей строке\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Load_watermeter_values;\r\n","C:\\webclient\\rvkp-react\\src\\components\\LoadState.js",[],"C:\\webclient\\rvkp-react\\src\\components\\CustomAlert.js",[],"C:\\webclient\\rvkp-react\\src\\components\\InputBC.js",[],"C:\\webclient\\rvkp-react\\src\\components\\CheckboxC.js",[],"C:\\webclient\\rvkp-react\\src\\components\\ModalStage.js",[],"C:\\webclient\\rvkp-react\\src\\components\\PopupTable.js",[],"C:\\webclient\\rvkp-react\\src\\components\\SelectDB.js",[],"C:\\webclient\\rvkp-react\\src\\components\\TableDB.js",["178"],"import React from 'react';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport {getParamForSQL,getParamDiff,getQuery} from '../common.js';\r\n\r\nimport $ from 'jquery'\r\n\r\nclass TableDB extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.getDataSQL = this.getDataSQL.bind(this);\r\n        this.state = {\r\n          items: [],\r\n          selectRow:[]\r\n        };\r\n        //console.log('props',props);\r\n    }\r\n\r\n    getDataSQL() {\r\n      const val=this;\r\n      var data = {};\r\n      data.params={};\r\n      //let resp_data;\r\n      if (!!val.props.obj.parSQL) {\r\n          data.params=val.props.obj.parSQL;\r\n      }\r\n      data.sql=val.props.obj.sql;\r\n      getParamForSQL(val.props.obj.paramGroup,val.props.obj.parParentID,data);\r\n      //console.log(parSQL);\r\n      if (!!this.props.obj.beforeLoadData) {\r\n          this.props.obj.beforeLoadData(this,data);\r\n      }\r\n      if (!((!!this.props.obj.beforeLoadData) && (typeof data.error === 'boolean'))) {\r\n        getQuery(data,(response)=> {\r\n                        this.setState({items: response.data});\r\n                        if (!!this.props.obj.afterLoadData) {\r\n                            this.props.obj.afterLoadData(this,response);\r\n                        }\r\n                      },\r\n                 this.props.obj.stateLoadObj\r\n               );\r\n      }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        if (!!!this.props.obj.parParentID) {\r\n            this.getDataSQL();\r\n        }\r\n        if (!!this.props.obj.filterFactory) {\r\n          //добавляем кнопку поиска, по-умолчанию скрываем все поля фильтрации\r\n          var b_tab=$('div.react-bootstrap-table table#'+this.props.obj.tab_id).closest('div');\r\n          if ($(b_tab).find('button.react-bootstrap-table-but-searche').length===0) {\r\n            var bt_label=$(b_tab).find('th label.filter-label');\r\n            $(b_tab).append('<button class=\"react-bootstrap-table-but-searche\" type=\"button\">&#128269;</button>');\r\n            $(bt_label).hide();\r\n            $(b_tab).on(\"click\", \"button.react-bootstrap-table-but-searche\", function() {\r\n              if ($(bt_label).first().is(':visible')) {\r\n                  $(bt_label).hide();\r\n              }\r\n              else {\r\n                  $(bt_label).show();\r\n              }\r\n            });\r\n          }\r\n        }\r\n        //Добавляем панель действий если есть подъодящие элементы\r\n        if ((!!this.props.obj.addRow) || (!!this.props.obj.deleteRow)\r\n            || (!!this.props.obj.dopAction) || (!!this.props.obj.editRow)) {\r\n          var b_tab=$('div.react-bootstrap-table table#'+this.props.obj.tab_id).closest('div');\r\n          $(b_tab).prepend('<ul class=\"ul_cons top-level\" style=\"margin:0.3em 0 0.3em 0;padding: 0;\">');\r\n          var ul_v=$(b_tab).find('ul.ul_cons.top-level');\r\n          if (!!this.props.obj.addRow) {\r\n              $(ul_v).append(`<li id=\"`+this.props.obj.tab_id+`\" class=\"li_cons li_cons_top tableDBaddRow\" style=\"background: none;\">\r\n                                  <a id=\"`+this.props.obj.tab_id+`\" title=\"Добавить строку\" class=\"tableDBaddRow\">\r\n                                      <img src=\"`+require('../img/add.png')+`\" style=\"height:1.8em;width:auto;\">\r\n                                  </a>\r\n                              </li>`);\r\n              $(ul_v).find('li.tableDBaddRow').click(()=>this.props.obj.addRow(this));\r\n          }\r\n          if (!!this.props.obj.editRow) {\r\n              $(ul_v).append(`<li id=\"`+this.props.obj.tab_id+`\" class=\"li_cons li_cons_top tableDBeditRow\" style=\"background: none;\">\r\n                                  <a id=\"`+this.props.obj.tab_id+`\" title=\"Редактировать строку\" class=\"tableDBeditRow\">\r\n                                      <img src=\"`+require('../img/edit.png')+`\" style=\"height:1.8em;width:auto;\">\r\n                                  </a>\r\n                              </li>`);\r\n              $(ul_v).find('li.tableDBeditRow').click(()=>this.props.obj.editRow(this));\r\n          }\r\n          if (!!this.props.obj.deleteRow) {\r\n              $(ul_v).append(`<li id=\"`+this.props.obj.tab_id+`\" class=\"li_cons li_cons_top tableDBdeleteRow\" style=\"background: none;\">\r\n                                  <a id=\"`+this.props.obj.tab_id+`\" title=\"Удалить строку\" class=\"tableDBdeleteRow\">\r\n                                      <img src=\"`+require('../img/rep_del.png')+`\" style=\"height:1.8em;width:auto;\">\r\n                                  </a>\r\n                              </li>`);\r\n              $(ul_v).find('li.tableDBdeleteRow').click(()=>this.props.obj.deleteRow(this));\r\n          }\r\n          if (!!this.props.obj.dopAction) {\r\n              $(ul_v).append(`<li id=\"`+this.props.obj.tab_id+`\" class=\"li_cons li_cons_top tableDBdopActionBlok\" style=\"background: none;\">\r\n                                <img src=\"`+require('../img/actions.png')+`\" style=\"height:1.8em;width:auto;\" title=\"Доп.действия\">\r\n                                <ul class=\"tableDBdopAction ul_cons second-level\"></ul>\r\n                              </li>`);\r\n\r\n              var pr_tableDBdopAction_vis=false,\r\n                  ul_oda;\r\n              $(ul_v).find('li.li_cons.li_cons_top.tableDBdopActionBlok[id=\"'+this.props.obj.tab_id+'\"]').click(function() {\r\n                  ul_oda=$(this).find('ul.tableDBdopAction');\r\n                  if (!$(ul_oda).is(':visible')) {\r\n                      $(ul_oda).show();\r\n                      var this_top=$(this).offset().top+30,\r\n                          this_left=$(this).offset().left+3;\r\n                      $(ul_oda).css({'left':this_left+'px','top':this_top+'px'});\r\n                      pr_tableDBdopAction_vis=true;\r\n                  }\r\n                  else {\r\n                      $(ul_oda).hide();\r\n                      pr_tableDBdopAction_vis=false;\r\n                  }\r\n              });\r\n\r\n              $('main').scroll(function(){\r\n                if (pr_tableDBdopAction_vis) {\r\n                  var li_v=$(ul_oda).closest('li'),\r\n                      this_top=$(li_v).offset().top+30,\r\n                      this_left=$(li_v).offset().left+3;\r\n                  $(ul_oda).css({'left':this_left+'px','top':this_top+'px'});\r\n                }\r\n              });\r\n\r\n              var ul_sl=$(ul_v).find('ul.tableDBdopAction.ul_cons.second-level'),\r\n                  this_v=this;\r\n              this.props.obj.dopAction.forEach((item) => {\r\n                $(ul_sl).append(`<li class=\"li_cons tableDBdopAction\" id=\"`+item.id+`\">\r\n                                    <a id=\"`+item.id+`\">`+item.label+`</a>\r\n                                 </li>`);\r\n                $(ul_sl).find('li.tableDBdopAction[id=\"'+item.id+'\"]').click(()=>item.callback(this_v));\r\n              })\r\n          }\r\n      }\r\n      if (!!this.props.obj.componentDidMount) {\r\n          this.props.obj.componentDidMount(this);\r\n      }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        // Популярный пример (не забудьте сравнить пропсы):\r\n        //console.log(this.props);\r\n        if (getParamDiff(this.props.obj.paramGroup,prevProps.obj.paramGroup,this.props.obj.parParentID)) {\r\n            this.getDataSQL();\r\n        }\r\n        if (!!this.props.obj.componentDidUpdate) {\r\n            this.props.obj.componentDidUpdate(this,prevProps, prevState, snapshot);\r\n        }\r\n      }\r\n\r\n    render() {\r\n      const NoDataIndication = () => (\r\n        <div className=\"spinner\">\r\n          Отсутствуют данные для отображения\r\n        </div>\r\n      );\r\n        return (\r\n              <BootstrapTable\r\n                id={ this.props.obj.tab_id }\r\n                data={this.state.items}\r\n                keyField={ this.props.obj.keyField}\r\n                columns={ this.props.obj.columns }\r\n                classes={ this.props.obj.tableContainerClass}\r\n                bodyClasses={ this.props.obj.bodyClasses}\r\n                selectRow={this.props.obj.selectRowProp }\r\n                pagination={ (!!this.props.obj.paginationFactory)? this.props.obj.paginationFactory( (!!this.props.obj.paginationOptions) ? this.props.obj.paginationOptions:undefined ):undefined }\r\n                noDataIndication={ () => <NoDataIndication /> }\r\n                filter={ (!!this.props.obj.filterFactory) ? this.props.obj.filterFactory((!!this.props.obj.filterFactoryIn) ? this.props.obj.filterFactoryIn:undefined):undefined }\r\n                rowEvents={this.props.obj.rowEvents}\r\n              />\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default TableDB;\r\n","C:\\webclient\\rvkp-react\\src\\components\\CustomConfirm.js",[],"C:\\webclient\\rvkp-react\\src\\components\\DivImgClick.js",[],"C:\\webclient\\rvkp-react\\src\\components\\InputDB.js",[],"C:\\webclient\\rvkp-react\\src\\components\\RadioGroupC.js",[],"C:\\webclient\\rvkp-react\\src\\components\\SelectB.js",[],"C:\\webclient\\rvkp-react\\src\\components\\DatePickerC.js",[],["179","180"],"C:\\webclient\\rvkp-react\\src\\components\\InputFileC.js",[],"C:\\webclient\\rvkp-react\\src\\forms\\ab\\Print_debtor.js",["181","182","183"],"import React,{ useState,useRef,useEffect } from 'react';\r\n\r\nimport LoadState from '../../components/LoadState';\r\nimport CustomAlert from '../../components/CustomAlert';\r\nimport CheckboxC from '../../components/CheckboxC';\r\nimport SelectC from '../../components/SelectC';\r\nimport InputBC from '../../components/InputBC';\r\nimport ModalStage from '../../components/ModalStage';\r\nimport CircularProgressbarC from '../../components/CircularProgressbarC';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { format,startOfMonth } from 'date-fns';\r\n//import InputGroup from 'react-bootstrap/InputGroup';\r\n\r\nimport $ from 'jquery'\r\n\r\nimport {getExecQuery} from '../../common.js';\r\n\r\nfunction Print_debtor() {\r\n  //хук для отслеживания изменения параметров компонетов (для упрощения взаимодействия компонентов)\r\n  let [paramGroupV, setParamGroupV] = useState({typeStage:'ОтправленоПредупреждение',envelope:true,date:startOfMonth(new Date())});\r\n  //хук-ссылки на элементы для удобной работы с ними\r\n  const refCustomAlert=useRef(),\r\n        refLoadState=useRef(),\r\n        refModalStage=useRef(),\r\n        refCircularProgressbarC=useRef();\r\n\r\n  const handleClickPrint=() => {\r\n    //иммитация получения данных из БД\r\n    const valuePrint=`<div class=\"Block_Convert\">\r\n                        <div class=\"Block_1_2\">\r\n                        <div class=\"Block_1\">\r\n                        ООО \"РВК-Воронеж\"<br>\r\n                        г. Воронеж<br>\r\n                        ул. Пешестрелецкая, 90\r\n                        <p style=\"text-align: right;\"><b>394038</b></p>\r\n                        </div>\r\n                        <div class=\"Block_2\">\\`394074</div>\r\n                        </div>\r\n                        <div class=\"Block_1_2\">\r\n                        <div class=\"Block_3\">\r\n                        </div>\r\n                        <div class=\"Block_4\">\r\n                        <p>Доровских А. И.</p>\r\n                        <p>г. Воронеж ул. Корейская, д. 17</p>\r\n                        <p>&nbsp;</p>\r\n                        <p><b>394074</b></p>\r\n                        </div>\r\n                        </div>\r\n                        </div>`;\r\n    const rows=[];\r\n    for (var i = 1; i <= 333; i++) {\r\n      rows.push(valuePrint.split('ул. Корейская, д. 17').join('ул. Корейская, д. '+i));\r\n    }\r\n\r\n    if (rows.length>0) {\r\n      refModalStage.current\r\n        .setState({\r\n          modalShow:true,\r\n          header:'Построение очереди печати',\r\n          nextButtonDisplay:'none',\r\n          body:<CircularProgressbarC\r\n                  ref={refCircularProgressbarC}\r\n                  obj={{label:'Отправлено на печать 0 документов'\r\n                      }}\r\n                />\r\n        });\r\n\r\n      //количество строк в странице для печати\r\n      const countRowsPrint=100;\r\n      //текущий номер страницы печати\r\n      let tekNum=1;\r\n      //текущий номер порции\r\n      let tekNumPortion=1;\r\n      //признак процесса построения очереди печати\r\n      let prPrint=false;\r\n      var MyInt= setInterval(function(){\r\n          refCircularProgressbarC.current.setState({\r\n            value:parseInt(tekNum/(rows.length+1)*100),\r\n            label:`Отправлено на печать ${tekNum-1} документов`\r\n          });\r\n          if (tekNum>=(rows.length-1)) {\r\n            clearInterval(MyInt);\r\n          }\r\n          else {\r\n            if (!prPrint) {\r\n              let maxNum=(rows.length+1),\r\n                  calcMax=tekNum+countRowsPrint,\r\n                  winValuePrint='';\r\n              if (calcMax<maxNum) {\r\n                  maxNum=calcMax;\r\n              }\r\n              //набираем порцию\r\n              for (var i = tekNum; i < maxNum; i++) {\r\n                  winValuePrint+=rows[i-1];\r\n                  ++tekNum;\r\n              }\r\n\r\n              prPrint=true;\r\n              const winC=window.open(\"/print/index.html\", 'Порция '+tekNumPortion, 'resizable=yes,scrollbars=yes,top=0,left=0,width=0,height=0');\r\n              winC.onload = function() {\r\n                  let newWin_doc=this.document;\r\n                  let tek_win=this;\r\n                  this.onafterprint = AfterPrint;\r\n                  function AfterPrint () {\r\n                      prPrint=false;\r\n                      ++tekNumPortion;\r\n                      tek_win.close();\r\n                      /*set_print_status(tek_win.document);\r\n                      tek_win.close();\r\n                      pr_exec_print=false;\r\n                      $(modal_form).find('.info_tek_file').text('Отправлено: '+(i-1)+' файл');\r\n                      var time2 = performance.now();\r\n                      $(modal_footer).find('.time_from_run').text('Прошло от начала запуска: '+secondstotime((time2-time0)/1000));*/\r\n                  }\r\n                  let bodyV=$(newWin_doc).find('body').prepend(winValuePrint);\r\n                  newWin_doc.fonts.ready.then(function() {\r\n                    $(bodyV).prepend('<script>window.print();<\\/script>');\r\n                  });\r\n              }\r\n            }\r\n          }\r\n      },500);\r\n    }\r\n  }\r\n\r\n  const selectCObj={label:'Тип этапа',\r\n                    id:\"typeStage\",\r\n                    defaultValue:\"ОтправленоПредупреждение\",\r\n                    onChange:(event) => {\r\n                      let newObj={...paramGroupV};\r\n                      newObj.typeStage=event.target.value;\r\n                      setParamGroupV(newObj);\r\n                    },\r\n                    data:[{label:'Уведомление',value:'ОтправленоУведомление'},\r\n                          {label:'Предупреждение',value:'ОтправленоПредупреждение'},\r\n                          {label:'Извещение о подготовке иска',value:'ИзвещениеОПодготовкеИска'},\r\n                          {label:'Досудебная претензия',value:'ОтправленаДосудебнаяПретензия'},\r\n                        ],\r\n                    /*multiple:true,\r\n                    autoWidth:false,*/\r\n                  };\r\n\r\n  const checkboxCObj={id:'envelope',\r\n                      label:'Конверт',\r\n                      onChange:(event,thisV) => {\r\n                        thisV.setState({checked:event.target.checked});\r\n                        let newObj={...paramGroupV};\r\n                        newObj.envelope=event.target.checked;\r\n                        setParamGroupV(newObj);\r\n                      }\r\n                    };\r\n\r\n  const inputBCObj={label:'Дата',\r\n                     id:\"date\",\r\n                     type:\"date\",\r\n                     onChange:(event,thisV) => {\r\n                        thisV.setState({value:event.target.value});\r\n                        let newObj={...paramGroupV};\r\n                        newObj.date=event.target.value;\r\n                        setParamGroupV(newObj);\r\n                     },\r\n                     defaultValue:format(paramGroupV.date,'yyyy-MM-dd')\r\n                   };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <LoadState ref={refLoadState} />\r\n      <CustomAlert ref={refCustomAlert}/>\r\n      <Container fluid>\r\n        <Row>\r\n          <Col>\r\n            <SelectC obj={selectCObj}/>\r\n          </Col>\r\n          <Col>\r\n            <InputBC obj={inputBCObj} />\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row style={{'margin-top':'1%'}}>\r\n          <Col>\r\n            <CheckboxC obj={ checkboxCObj } />\r\n          </Col>\r\n          <Col >\r\n            <Button onClick={()=>handleClickPrint()} id=\"butRunPrint\">Печать</Button>\r\n            <ModalStage ref={refModalStage}/>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Print_debtor;\r\n","C:\\webclient\\rvkp-react\\src\\forms\\en\\reports\\CalcOLAP.js",["184","185","186","187","188","189"],"import React,{ useState,useRef } from 'react';\r\n\r\nimport LoadState from '../../../components/LoadState';\r\nimport CustomAlert from '../../../components/CustomAlert';\r\nimport TableOLAP from '../../../components/TableOLAP';\r\nimport InputBC from '../../../components/InputBC';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { format,startOfMonth } from 'date-fns';\r\n\r\nimport $ from 'jquery'\r\n\r\nimport {getExecQuery,getHashPwd,getQuery} from '../../../common.js';\r\n\r\nfunction CalcOLAP() {\r\n  const newDate=new Date();\r\n  //хук для отслеживания изменения параметров компонетов (для упрощения взаимодействия компонентов)\r\n  let [paramGroupV, setParamGroupV] = useState({begDate:/*format(startOfMonth(newDate),'yyyy-MM-dd')*/'2020-09-01',endDate:'2020-09-02'/*format(newDate,'yyyy-MM-dd')*/});\r\n  //хук-ссылки на элементы для удобной работы с ними\r\n  const refCustomAlert=useRef(),\r\n        refLoadState=useRef(),\r\n        refTableOLAP=useRef(),\r\n        refInputBegDate=useRef(),\r\n        refInputEndDate=useRef();\r\n\r\n  const inputBegDateObj={\r\n    label:'Начало периода',\r\n    id:\"begDate\",\r\n    paramGroupV:paramGroupV,\r\n    setParamGroupV:setParamGroupV,\r\n    onChange:(event,thisV) => {\r\n        const valueL=event.target.value;\r\n        thisV.props.obj.setParamGroupV({begDate:valueL,endDate:thisV.props.obj.paramGroupV.endDate});\r\n        thisV.setState({value:valueL});\r\n    },\r\n    type:'date',\r\n    defaultValue:paramGroupV.begDate\r\n  };\r\n\r\n  const inputEndDateObj={\r\n    label:'Окончание периода',\r\n    id:\"endDate\",\r\n    paramGroupV:paramGroupV,\r\n    setParamGroupV:setParamGroupV,\r\n    onChange:(event,thisV) => {\r\n        const valueL=event.target.value;\r\n        thisV.props.obj.setParamGroupV({begDate:thisV.props.obj.paramGroupV.begDate,endDate:valueL});\r\n        thisV.setState({value:valueL});\r\n    },\r\n    type:'date',\r\n    defaultValue:paramGroupV.endDate\r\n  };\r\n\r\n  const tableOLAPObj={\r\n    id:'calc',\r\n    stateLoadObj:refLoadState,\r\n    paramGroup:paramGroupV,\r\n    setParamGroup:setParamGroupV,\r\n    parParentID:['begDate','endDate'],\r\n    data:{params_val: {},\r\n          sql_true: `SELECT *\r\n                       FROM TABLE(REP_CALC_OLAP.GET_ROWS(:begDate,:endDate))`,\r\n          tab_pok: [{\"SYSNAME\":\"SERVICE\",\"NAME\":\"Услуга\"},],\r\n          tab_pol: [],\r\n          tab_str: [{\"SYSNAME\":\"TARIFF\",\"NAME\":\"Тариф\"},{\"SYSNAME\":\"PAYER_SNAME\",\"NAME\":\"Контрагент\"},\r\n                    {\"SYSNAME\":\"CONTRACT_REFID\",\"NAME\":\"Номер договора\"},\r\n                    {\"SYSNAME\":\"JUR_LS_REFID\",\"NAME\":\"ЛС\"}\r\n                   ],\r\n          tab_val: [{\"SYSNAME\":\"CALC_VOLUME\",\"NAME\":\"Объём, м3\",\"AGGR\":\"SUM\"},\r\n                    {\"SYSNAME\":\"CALC_COST\",\"NAME\":\"Начислено, руб\",\"AGGR\":\"SUM\"},\r\n                   ]\r\n        },\r\n    //общий итог\r\n    strgrouping:{apply:true,\r\n                 wrap:true,\r\n                 onCalc:{'CALC_VOLUME':{\r\n                          callback:(res,newVal) => {\r\n                            return +res+(+newVal);\r\n                          }\r\n                        },\r\n                        'CALC_COST':{\r\n                           callback:(res,newVal) => {\r\n                             return +res+(+newVal);\r\n                           }\r\n                         }\r\n                        },\r\n                 onSubItog:{'SERVICE':{\r\n                              label:'Подытог тест',\r\n                              callback:(itogID,thisItog,thisV) => {\r\n                                //заполняем заготовку\r\n                                const itogBlank=thisItog.itogBlank;\r\n                                const tekTdItog=$(itogBlank).find('td.td_str_val[id=\"'+itogID+'\"]');\r\n                                let styleC=getComputedStyle(tekTdItog[0]);\r\n                                $(tekTdItog).html((!!thisV.state.strgrouping.onSubItog[itogID].label)?thisV.state.strgrouping.onSubItog[itogID].label:'Подытог')\r\n                                            .css({'font-size':String(parseFloat(styleC.fontSize)+1)+'px','font-weight':800});\r\n                                const tekTdValItog=$(itogBlank).find('td.td_val_val');\r\n                                styleC=getComputedStyle($(tekTdValItog).first()[0]);\r\n                                const styleTdValC={'font-size':String(parseFloat(styleC.fontSize)+1)+'px','font-weight':800};\r\n                                $(itogBlank).find('td.td_val_val').each(function(i,elem) {\r\n                                  $(elem).html(thisItog.res[i].value)\r\n                                         .css(styleTdValC);\r\n                                });\r\n                                return itogBlank;\r\n                              }\r\n                            },\r\n                            'PAYER_SNAME':{},\r\n                            'CONTRACT_REFID':{}\r\n                          }\r\n                },\r\n    //общий итог\r\n    itogAll:{apply:true,\r\n             onCalc:{'CALC_VOLUME':{\r\n                      callback:(res,newVal) => {\r\n                        return +res+(+newVal);\r\n                      }\r\n                     },\r\n                    },\r\n             onItogAll:(thisItog,tr,thisV) => {\r\n                //console.log('res',thisItog);\r\n                //заполняем заготовку\r\n                const itogBlank=thisItog.itogBlank,\r\n                      tdStrVal=$(itogBlank).find('td.td_str_val'),\r\n                      tekTdItog=$(tdStrVal).first();\r\n                let styleC=getComputedStyle(tekTdItog[0]);\r\n                $(tekTdItog).html('Итог')\r\n                            .css({'font-size':String(parseFloat(styleC.fontSize)+2)+'px','font-weight':800});\r\n                const tekTdValItog=$(itogBlank).find('td.td_val_val');\r\n                styleC=getComputedStyle($(tekTdValItog).first()[0]);\r\n                const styleTdValC={'font-size':String(parseFloat(styleC.fontSize)+2)+'px','font-weight':800};\r\n                $(itogBlank).find('td.td_val_val').each(function(i,elem) {\r\n                  $(elem).html(thisItog.res[i].value);\r\n                  $(elem).css(styleTdValC);\r\n                });\r\n                $(tr).after(itogBlank);\r\n              }\r\n            },\r\n    componentDidMount:(thisV)=> {\r\n        //переопределяем, т.к. по-умолчанию первый раз запращиваются данные только если нет параметров для запроса\r\n        thisV.getDataSQL();\r\n    },\r\n    //отображение действия построения графика (по-умолчанию false)\r\n    graf:true,\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <LoadState ref={refLoadState} />\r\n      <CustomAlert ref={refCustomAlert}/>\r\n      <Container fluid>\r\n        <Row>\r\n          <Col>\r\n            <InputBC ref={refInputBegDate} obj={inputBegDateObj}/>\r\n          </Col>\r\n          <Col>\r\n            <InputBC ref={refInputEndDate} obj={ inputEndDateObj }/>\r\n          </Col>\r\n        </Row>\r\n        <Row style={{marginTop:'1rem'}}>\r\n          <Col>\r\n            <TableOLAP ref={refTableOLAP} obj={tableOLAPObj}/>\r\n          </Col>\r\n        </Row>\r\n\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CalcOLAP;\r\n","C:\\webclient\\rvkp-react\\src\\forms\\admin\\Users.js",[],"C:\\webclient\\rvkp-react\\src\\components\\CircularProgressbarC.js",[],"C:\\webclient\\rvkp-react\\src\\components\\TableOLAP.js",["190","191","192","193","194","195","196","197","198","199","200"],"import React from 'react';\r\nimport CustomAlert from './CustomAlert';\r\nimport {getParamForSQL,getParamDiff,secondstotime,getTableOLAP,getCursorPosition,getExecQuery,houreLifeCookies,getQuery,getTagExit} from '../common.js';\r\n\r\nimport $ from 'jquery'\r\n\r\nclass TableOLAP extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.getDataSQL = this.getDataSQL.bind(this);\r\n        //события Drag and Drop\r\n        this.dragStart = this.dragStart.bind(this);\r\n        this.dragEnter = this.dragEnter.bind(this);\r\n        this.dragOver = this.dragOver.bind(this);\r\n        this.dragDrop = this.dragDrop.bind(this);\r\n        this.getDropTable=this.getDropTable.bind(this);\r\n        this.getDropTableOne=this.getDropTableOne.bind(this);\r\n        this.getDropTableAll=this.getDropTableAll.bind(this);\r\n        //cобытие вызова 3Д-графика\r\n        this.getGraf = this.getGraf.bind(this);\r\n        this.getStrgrouping = this.getStrgrouping.bind(this);\r\n        this.state = {\r\n          items: '',\r\n          itemsStrgrouping:undefined,\r\n          $itemsStrgrouping:undefined,\r\n          $itemsStrgroupingBeg:undefined,\r\n          selectRow:[],\r\n          selectTd:[],\r\n          tabname:undefined,\r\n          countall:undefined,\r\n          data:this.props.obj.data,\r\n          strgrouping:(!!this.props.obj.strgrouping)?this.props.obj.strgrouping:{apply:false},\r\n          itogAll:(!!this.props.obj.itogAll)?this.props.obj.itogAll:{apply:false},\r\n        };\r\n\r\n        //переменная отображения графика\r\n        this.graf=false;\r\n        if (typeof this.props.obj.graf==='boolean') {\r\n            this.graf=this.props.obj.graf\r\n        }\r\n\r\n        //Cоздаем панель действий если есть подходящие элементы\r\n        this.panel=$(document.createDocumentFragment());\r\n        let thisV=this;\r\n        if ((!!thisV.props.obj.addRow) || (!!thisV.props.obj.deleteRow) || (!!thisV.props.obj.dopAction) || (!!thisV.props.obj.editRow) || (thisV.graf)){\r\n          let b_tab=this.panel;\r\n          $(b_tab).prepend('<ul class=\"ul_cons top-level\" style=\"margin:0.3em 0 0.3em 0;padding: 0;\">');\r\n          var ul_v=$(b_tab).find('ul.ul_cons.top-level');\r\n          if (!!thisV.props.obj.addRow) {\r\n              $(ul_v).append(`<li id=\"`+thisV.props.obj.id+`\" class=\"li_cons li_cons_top tableDBaddRow\" style=\"background: none;\">\r\n                                  <a id=\"`+thisV.props.obj.id+`\" title=\"Добавить строку\" class=\"tableDBaddRow\">\r\n                                      <img src=\"`+require('../img/add.png').default+`\" style=\"height:1.8em;width:auto;\">\r\n                                  </a>\r\n                              </li>`);\r\n          }\r\n          if (!!thisV.props.obj.editRow) {\r\n              $(ul_v).append(`<li id=\"`+thisV.props.obj.id+`\" class=\"li_cons li_cons_top tableDBeditRow\" style=\"background: none;\">\r\n                                  <a id=\"`+thisV.props.obj.id+`\" title=\"Редактировать строку\" class=\"tableDBeditRow\">\r\n                                      <img src=\"`+require('../img/edit.png').default+`\" style=\"height:1.8em;width:auto;\">\r\n                                  </a>\r\n                              </li>`);\r\n          }\r\n          if (!!thisV.props.obj.deleteRow) {\r\n              $(ul_v).append(`<li id=\"`+thisV.props.obj.id+`\" class=\"li_cons li_cons_top tableDBdeleteRow\" style=\"background: none;\">\r\n                                  <a id=\"`+thisV.props.obj.id+`\" title=\"Удалить строку\" class=\"tableDBdeleteRow\">\r\n                                      <img src=\"`+require('../img/rep_del.png').default+`\" style=\"height:1.8em;width:auto;\">\r\n                                  </a>\r\n                              </li>`);\r\n          }\r\n          if (!!thisV.props.obj.dopAction) {\r\n              $(ul_v).append(`<li id=\"`+thisV.props.obj.id+`\" class=\"li_cons li_cons_top tableDBdopActionBlok\" style=\"background: none;\">\r\n                                <img src=\"`+require('../img/actions.png').default+`\" style=\"height:1.8em;width:auto;\" title=\"Доп.действия\">\r\n                                <ul class=\"tableDBdopAction ul_cons second-level\"></ul>\r\n                              </li>`);\r\n\r\n              var ul_sl=$(ul_v).find('ul.tableDBdopAction.ul_cons.second-level');\r\n              thisV.props.obj.dopAction.forEach((item) => {\r\n                $(ul_sl).append(`<li class=\"li_cons tableDBdopAction\" id=\"`+item.id+`\">\r\n                                    <a id=\"`+item.id+`\">`+item.label+`</a>\r\n                                 </li>`);\r\n              })\r\n          }\r\n          //график\r\n          if (thisV.graf) {\r\n              $(ul_v).append(`<li id=\"`+thisV.props.obj.id+`\" class=\"li_cons li_cons_top table_graf\" style=\"background: none;\">\r\n                                  <a id=\"`+thisV.props.obj.id+`\" title=\"Построить 3D-график\" class=\"tableDBaddRow\">\r\n                                      <img src=\"`+require('../img/graf_tab.png').default+`\" style=\"height:2.1em;width:auto;margin:0 0 0.3em 0;\">\r\n                                  </a>\r\n                              </li>`);\r\n          }\r\n        }\r\n\r\n        this.pr_tableDBdopAction_vis=false;\r\n        this.ul_oda=undefined;\r\n        this.panelScroll=() => {\r\n          if (this.pr_tableDBdopAction_vis) {\r\n            var li_v=$(this.ul_oda).closest('li'),\r\n                this_top=$(li_v).offset().top+30,\r\n                this_left=$(li_v).offset().left+3;\r\n            $(this.ul_oda).css({'left':this_left+'px','top':this_top+'px'});\r\n          }\r\n       }\r\n\r\n       //создаем список незадействованных полей\r\n       this.getUlTabPol=() => {\r\n         let res='';\r\n         if (this.state.data.tab_pol.length>0) {\r\n           this.state.data.tab_pol.forEach((item) => {\r\n             res+='<li id=\"'+item.SYSNAME+'\" draggable=\"true\" class=\"tab_pol liTableOLAP\"><a id=\"'+item.SYSNAME+'\">'+item.NAME+'</a></li>';\r\n           });\r\n         }\r\n         else {\r\n            res+='<li id=\"null\"><a>Отсутствуют</a></li>';\r\n         }\r\n         return res;\r\n      }\r\n\r\n      thisV.prPanelMove=false;\r\n\r\n      this.refCustomAlert=React.createRef();\r\n    }\r\n\r\n    getGraf() {\r\n      const newWin = window.open('/three/graf.html', '3D-график OLAP-куба');\r\n      newWin.tableHtml=this.state.items;\r\n    }\r\n\r\n    getStrgrouping() {\r\n      const thisV=this;\r\n      if ((thisV.state.strgrouping.apply) || (thisV.state.itogAll.apply)) {\r\n          if (typeof thisV.state.strgrouping.wrap!=='boolean') {\r\n              thisV.state.strgrouping.wrap=true;\r\n          }\r\n          //объединяем повторяющиеся строки, добавляем атрибуты для анимации сворачивания строк, считаем итоги и подытоги, да, все в одном цикле, производительность!\r\n          //test\r\n          let tbodyL=$(this.state.items),\r\n              //b_tab=$(\".divForTableOLAP[id='\"+thisV.props.obj.id+\"']\"), //test\r\n              //tbodyL=$(b_tab).find('table.tableOLAP tbody'),\r\n              tabTr=$(tbodyL).find('tr.tr_tab');\r\n          //текущая сохраненная строка\r\n          let tekTr=$(tabTr).first();\r\n          //объект для сравнения\r\n          let tabTrFirstTd=$(tekTr).find('td.td_str_val');\r\n          //первый подытог: необходимо для опции сворачивания/группировки\r\n          let firstSubItogID;\r\n          if (thisV.state.strgrouping.wrap) {\r\n            for (var i = 0; i < tabTrFirstTd.length; i++) {\r\n              if (!!thisV.state.strgrouping.onSubItog[tabTrFirstTd[i].id]) {\r\n                  firstSubItogID=tabTrFirstTd[i].id;\r\n                  break;\r\n              }\r\n            }\r\n          }\r\n          //запоминаем координаты по оси x, чтобы корректно отслеживать смену наименований\r\n          let tabTrFirstTdMass=[];\r\n          $(tabTrFirstTd).each(function(i,elem) {\r\n              tabTrFirstTdMass.push(elem);\r\n          });\r\n          //формируем строку для нахождения ID у ячейки без id (такие ячейки возникают на строне бэкенда при заполнении пустот)\r\n          const indexRow=[];\r\n          $(tekTr).prev().find('td.td_val_name').each(function(i,elem) {\r\n            indexRow[i]=elem.id;\r\n          });\r\n          function initOneSubItog(trInit) {\r\n            const res=[];\r\n            $(trInit).find('td.td_val_val').each(function(i,elem) {\r\n               let resultInit=$(elem).text().trim();\r\n               if (resultInit==='') {\r\n                  resultInit=0;\r\n               }\r\n               else {\r\n                  resultInit=parseFloat(resultInit.replace(',','.'));\r\n                  if (isNaN(resultInit)) {\r\n                      resultInit=0;\r\n                  }\r\n               }\r\n               res.push({valID:indexRow[i],value:resultInit});\r\n            });\r\n            return res;\r\n          }\r\n          //заготовка для подытоговых и итоговой строк\r\n          const trItogBlank=$(tekTr).clone();\r\n          $(trItogBlank).find('td').each(function(i,elem) {\r\n              $(elem).html('');\r\n          });\r\n          if (thisV.state.strgrouping.apply) {\r\n            if (!!thisV.state.strgrouping.onSubItog) {\r\n              //инициализируем подсчет подытогов\r\n              //формируем заготовки для подытоговых строк\r\n              for (var prop in thisV.state.strgrouping.onSubItog) {\r\n                thisV.state.strgrouping.onSubItog[prop].res=initOneSubItog(tekTr);\r\n                thisV.state.strgrouping.onSubItog[prop].count=1;\r\n                const trItogBlankOne=$(trItogBlank).clone();\r\n                let prBeforeIDTd=true,\r\n                    colspanTrTek=0;\r\n                $(trItogBlankOne).find('td.td_str_val').each(function(i,elem) {\r\n                    if (prBeforeIDTd) {\r\n                      if (elem.id!==prop) {\r\n                        $(elem).attr('colspan',++colspanTrTek);\r\n                        $(elem).remove();\r\n                      }\r\n                      else {\r\n                          prBeforeIDTd=false;\r\n                          colspanTrTek=1;\r\n                      }\r\n                    }\r\n                    else {\r\n                      $(elem).prev().attr('colspan',++colspanTrTek)\r\n                      $(elem).remove();\r\n                    }\r\n                });\r\n                //устанавливаеи ID, т.к. могут встречаться ячейки с неустановленным ID (возникают на стороне бэкенда при заполнении пустот)\r\n                $(trItogBlankOne).find('td.td_val_val').each(function(i,elem) {\r\n                  $(elem).attr('id',indexRow[i]);\r\n                });\r\n                $(trItogBlankOne).attr('pritog','').attr('itogid',prop);\r\n                thisV.state.strgrouping.onSubItog[prop].itogBlankInit=trItogBlankOne;\r\n              };\r\n            }\r\n          }\r\n          const resItogAll={itogBlank:$(trItogBlank).clone().attr('pritog',''),res:[],count:0};\r\n          if (thisV.state.itogAll.apply) {\r\n              //подготавливаем шаблон\r\n              const tdStrVal=$(resItogAll.itogBlank).find('td.td_str_val'),\r\n                    tekTdItog=$(tdStrVal).first();\r\n              $(tekTdItog).attr('colspan',tdStrVal.length);\r\n              for (var i = (tdStrVal.length-1); i >0; i--) {\r\n                $(tdStrVal[i]).remove();\r\n              }\r\n\r\n              //инициализируем подсчет общих итогов\r\n              $(tekTr).find('td.td_val_val').each(function(i,elem) {\r\n                 let resultInit=$(elem).text().trim();\r\n                 if (resultInit==='') {\r\n                    resultInit=0;\r\n                 }\r\n                 else {\r\n                    resultInit=parseFloat(resultInit.replace(',','.'));\r\n                    if (isNaN(resultInit)) {\r\n                        resultInit=0;\r\n                    }\r\n                 }\r\n                 resItogAll.res.push({valID:indexRow[i],value:resultInit});\r\n                 resItogAll.count=1;\r\n              });\r\n          }\r\n\r\n          let nameRowspan;\r\n          if (thisV.state.strgrouping.wrap) {\r\n            nameRowspan='rowspancalc';\r\n          }\r\n          else {\r\n              nameRowspan='rowspan';\r\n          }\r\n          function calcSubItogOne(i3,itogID,tr,prLast,prevEl) {\r\n            //вычисление одного подытога\r\n            const thisItog=thisV.state.strgrouping.onSubItog[itogID];\r\n            function calcSubItogDefault(itogID,thisItog) {\r\n              //заполняем заготовку\r\n              const itogBlank=$(thisItog.itogBlank);\r\n              const tekTdItog=$(itogBlank).find('td.td_str_val[id=\"'+itogID+'\"]');\r\n              let styleC=getComputedStyle(tekTdItog[0]);\r\n              $(tekTdItog).html((!!thisV.state.strgrouping.onSubItog[itogID].label)?thisV.state.strgrouping.onSubItog[itogID].label:'Подытог')\r\n                          .css({'font-size':String(parseFloat(styleC.fontSize)+1)+'px','font-weight':800});\r\n              const tekTdValItog=$(itogBlank).find('td.td_val_val');\r\n              styleC=getComputedStyle($(tekTdValItog).first()[0]);\r\n              const styleTdValC={'font-size':String(parseFloat(styleC.fontSize)+1)+'px','font-weight':800};\r\n              $(itogBlank).find('td.td_val_val').each(function(i,elem) {\r\n                $(elem).html(thisItog.res[i].value);\r\n                $(elem).css(styleTdValC);\r\n              });\r\n              return itogBlank;\r\n            }\r\n\r\n            thisItog.itogBlank=$(thisItog.itogBlankInit).clone();\r\n            let itogBlankCalc;\r\n            if (!!thisItog.callback) {\r\n              itogBlankCalc=thisItog.callback(itogID,thisItog,thisV);\r\n            }\r\n            else {\r\n              //действия по-умолчанию для подытоговой строки\r\n              itogBlankCalc=calcSubItogDefault(itogID,thisItog);\r\n            }\r\n\r\n            //\r\n            let trPrev;\r\n            if (!prLast) {\r\n              trPrev=$(tr).prev();\r\n            }\r\n            else {\r\n              trPrev=$(tr);\r\n            }\r\n            $(trPrev).after(itogBlankCalc);\r\n            if (thisV.state.strgrouping.wrap) {\r\n                const trNext=$(trPrev).next();\r\n                $(trNext).hide();\r\n                if (firstSubItogID===itogID) {\r\n                  //при первой отрисовке необходимо отображать подытоги только для первого элемента из массива подытогов\r\n                  const tekTr=$(prevEl).closest('tr'),\r\n                        tekTrIndex=$(tekTr).index();\r\n                  //thisV.setOneGroupe(itogID,tekTr,0,itogID,prevEl); не подходит, слишком много отличий,\r\n                  //плюс здесь можно использовать более производительный алгоритм засчет tabTrFirstTdMass\r\n\r\n                  $(tekTr).show();\r\n\r\n                  //необходимо запомнить текущие подходящие ячейки, если они находятся на одной строке с обрабатываемой в текущий момент,\r\n                  //т.к. при перереисовке ячейки поменяются и станут не актуальными, надо будет актуализировать\r\n                  const tabTrFirstTdMassNew={};\r\n                  tabTrFirstTdMass.forEach((item7,i7) => {\r\n                      if ($(item7).closest('tr').index()===tekTrIndex) {\r\n                          tabTrFirstTdMassNew[i7]=item7;\r\n                      }\r\n                  });\r\n\r\n\r\n                  if ($(trNext).length>0) {\r\n                    const trPrevClone=$(tekTr).clone(),\r\n                          trPrevCloneTd=$(trPrevClone).find('td.td_str_val'),\r\n                          endPrepend=$(tekTr).find('td.td_str_val[id=\"'+itogID+'\"]').index();\r\n                    $(tekTr).html(trNext[0].innerHTML);\r\n                    let tekTrTdStrVal=$(tekTr).find('td.td_str_val');\r\n                    $(tekTrTdStrVal).filter('#'+itogID)\r\n                                    .html('<a class=\"unwrapTrOLAP\" id=\"'+itogID+'\" title=\"Развернуть/детализировать\">&#9658;</a>'+$(trPrevCloneTd).filter('#'+itogID)[0].innerHTML)\r\n                                    .attr('colspan',(tabTrFirstTdMass.length-i3));\r\n                    for (var j = (endPrepend-1); j >=0; j--) {\r\n                      $(tekTr).prepend($(trPrevCloneTd[j]).clone());\r\n                    }\r\n                    $(trNext).html(trPrevClone[0].innerHTML);\r\n                    //восстанавливаем актуальные ячейки\r\n                    tekTrTdStrVal=$(tekTr).find('td.td_str_val');\r\n                    for (var prop in tabTrFirstTdMassNew) {\r\n                        tabTrFirstTdMass[prop]=$(tekTrTdStrVal).filter('#'+tabTrFirstTdMassNew[prop].id)[0];\r\n                    }\r\n                  }\r\n\r\n                  //необходимо всем идущим до этого объединениям, лежащим не на текущей строке, увеличить rowspan на единицу\r\n                  for (var i4 = (i3-1); i4>=0; i4--) {\r\n                    if (!!!tabTrFirstTdMassNew[i4]) {\r\n                      let dopRowspan;\r\n                      dopRowspan=+$(tabTrFirstTdMass[i4]).attr('rowspan');\r\n                      if (isNaN(dopRowspan)) {\r\n                          dopRowspan=1;\r\n                      }\r\n                      $(tabTrFirstTdMass[i4]).attr('rowspan',++dopRowspan);\r\n                    }\r\n                  }\r\n\r\n                }\r\n            }\r\n\r\n            thisItog.res=initOneSubItog(tr);\r\n            thisV.state.strgrouping.onSubItog[itogID]=thisItog;\r\n\r\n            //необходимо всем идущим до этого объединениям увеличить rowspan на единицу, если сворачиваем, то просто считает на спец.атрибуте\r\n            for (var i4 = (i3-1); i4>=0; i4--) {\r\n              let dopRowspan;\r\n              dopRowspan=+$(tabTrFirstTdMass[i4]).attr(nameRowspan);\r\n              if (isNaN(dopRowspan)) {\r\n                  dopRowspan=1;\r\n              }\r\n              $(tabTrFirstTdMass[i4]).attr(nameRowspan,++dopRowspan);\r\n            }\r\n          }\r\n\r\n          $(tabTr).filter(':not(:first)').each(function(i,elem) {\r\n              if (!!!$(elem).attr('pritog')) {\r\n                if (thisV.state.itogAll.apply) {\r\n                  ++resItogAll.count;\r\n                  $(elem).find('td.td_val_val').each(function(i4,elem4) {\r\n                      const tdID=indexRow[i4];\r\n                      let resOne=$(elem4).text().trim();\r\n                      if (resOne==='') {\r\n                          resOne=0;\r\n                      }\r\n                      else {\r\n                        resOne=parseFloat(resOne.replace(',','.'));\r\n                        if (isNaN(resOne)) {\r\n                            resOne=0;\r\n                        }\r\n                      }\r\n\r\n                      let prExistCalc=false;\r\n                      if (!!thisV.state.itogAll.onCalc) {\r\n                        if (!!thisV.state.itogAll.onCalc[tdID]) {\r\n                          if (!!thisV.state.itogAll.onCalc[tdID].callback) {\r\n                             prExistCalc=true;\r\n                             resOne=thisV.state.itogAll.onCalc[tdID].callback(resItogAll.res[i4].value,resOne);\r\n                          }\r\n                        }\r\n                      }\r\n                      if (!prExistCalc) {\r\n                          //по-молчанию суммируем\r\n                          resOne=resOne+resItogAll.res[i4].value;\r\n                      }\r\n                      resItogAll.res[i4].value=resOne;\r\n                  });\r\n                }\r\n                if (thisV.state.strgrouping.apply) {\r\n                  const tdStrVal=$(elem).find('td.td_str_val');\r\n                  //считаем в обратном порядке для корректности алгоритма (правильное проставление rowspan у строк)\r\n                  for (var i2 = (tdStrVal.length-1); i2>=0 ; i2--) {\r\n                    const elem2=tdStrVal[i2];\r\n                    if (elem2.parentNode!==null) {\r\n                        const elem3=tabTrFirstTdMass[i2],\r\n                              i3=i2;\r\n                        if ($(elem3).text().trim()===$(elem2).text().trim()) {\r\n                            if (thisV.state.strgrouping.wrap) {\r\n                                $(elem).hide();\r\n                            }\r\n\r\n                            let prSubItog=false;\r\n                            if (!!thisV.state.strgrouping.onSubItog) {\r\n                                if (!!thisV.state.strgrouping.onSubItog[elem3.id]) {\r\n                                  prSubItog=true;\r\n                                }\r\n                            }\r\n\r\n                            let prOk=true;\r\n                            //проверяем происходит ли смена строк для столбцов рангами выше\r\n                            for (var i4 = i3-1; i4>=0 ; i4--) {\r\n                              const elem4=tdStrVal[i4];\r\n                              if (elem4.parentNode!==null) {\r\n                                const elem5=tabTrFirstTdMass[i4];\r\n                                if ($(elem4).text().trim()!==$(elem5).text().trim()) {\r\n                                  prOk=false;\r\n                                  if (!prSubItog) {\r\n                                    //актуализируем элементы сравнения, если это не подытог (для этого случая обработка ниже)\r\n                                    tabTrFirstTdMass[i3]=elem2;\r\n                                  }\r\n                                  break;\r\n                                }\r\n                              }\r\n                            }\r\n\r\n                            if (prOk) {\r\n                              //если не происходит, то наращиваеем rowspan\r\n                              let prevRowspan=+$(elem3).attr(nameRowspan);\r\n                              if (isNaN(prevRowspan)) {\r\n                                  prevRowspan=1;\r\n                              }\r\n                              $(elem3).attr(nameRowspan,(++prevRowspan));\r\n                              $(elem2).remove();\r\n                            }\r\n\r\n                            if (prSubItog) {\r\n                                ++thisV.state.strgrouping.onSubItog[elem3.id].count;\r\n                                $(elem).find('td.td_val_val').each(function(i4,elem4) {\r\n                                    const tdID=indexRow[i4];\r\n                                    let resOne=$(elem4).text().trim();\r\n                                    if (resOne==='') {\r\n                                        resOne=0;\r\n                                    }\r\n                                    else {\r\n                                      resOne=parseFloat(resOne.replace(',','.'));\r\n                                      if (isNaN(resOne)) {\r\n                                          resOne=0;\r\n                                      }\r\n                                    }\r\n\r\n                                    let prExistCalc=false;\r\n                                    if (!!thisV.state.strgrouping.onCalc) {\r\n                                      if (!!thisV.state.strgrouping.onCalc[tdID]) {\r\n                                        if (!!thisV.state.strgrouping.onCalc[tdID].callback) {\r\n                                           prExistCalc=true;\r\n                                           resOne=thisV.state.strgrouping.onCalc[tdID].callback(thisV.state.strgrouping.onSubItog[elem3.id].res[i4].value,resOne);\r\n                                        }\r\n                                      }\r\n                                    }\r\n                                    if (!prExistCalc) {\r\n                                        //по-молчанию суммируем\r\n                                        resOne=resOne+thisV.state.strgrouping.onSubItog[elem3.id].res[i4].value;\r\n                                    }\r\n                                    thisV.state.strgrouping.onSubItog[elem3.id].res[i4].value=resOne;\r\n                                })\r\n                            }\r\n\r\n                            if ((!prOk) & (prSubItog)) {\r\n                              //если текущий столбец подытоговый, а выше по рангу произошла смена строки, то выводим подытог\r\n                              const prevEl=tabTrFirstTdMass[i3];\r\n                              tabTrFirstTdMass[i3]=elem2;\r\n                              calcSubItogOne(i3,elem2.id,elem,false,prevEl);\r\n                            }\r\n                        }\r\n                        else {\r\n                            const prevEl=tabTrFirstTdMass[i3];\r\n                            tabTrFirstTdMass[i3]=elem2;\r\n                            if (!!thisV.state.strgrouping.onSubItog) {\r\n                              //действия с подытогами\r\n                              if (!!thisV.state.strgrouping.onSubItog[elem2.id]) {\r\n                                  calcSubItogOne(i3,elem2.id,elem,false,prevEl);\r\n                              }\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n                }\r\n              }\r\n          });\r\n          let tabTrLast;\r\n          if (thisV.state.strgrouping.apply) {\r\n            //необходимо обработать последние подытоги\r\n            if (!!thisV.state.strgrouping.onSubItog) {\r\n              tabTrLast=$(tabTr).last();\r\n              if ($(tabTrLast).length>0) {\r\n                const tabTrFirstTd=$(tabTr).first().prev().find('td.td_str_name');\r\n                for (var i3 = (tabTrFirstTd.length-1); i3>=0 ; i3--) {\r\n                  const idC=tabTrFirstTd[i3].id;\r\n                  if (!!thisV.state.strgrouping.onSubItog[idC]) {\r\n                      calcSubItogOne(i3,idC,tabTrLast[0],true,tabTrFirstTdMass[i3]);\r\n                      tabTrLast=$(tabTrLast).next();\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          if ((!!!thisV.state.strgrouping.onSubItog) || (!thisV.state.strgrouping.apply)) {\r\n              tabTrLast=$(tabTr).last();\r\n          }\r\n          if (thisV.state.itogAll.apply) {\r\n              //выводим общий итог\r\n              //console.log('resItogAll',resItogAll);\r\n              if (!!thisV.state.itogAll.onItogAll) {\r\n                  thisV.state.itogAll.onItogAll(resItogAll,tabTrLast,thisV)\r\n              }\r\n              else {\r\n                const thisItog=resItogAll,\r\n                      itogBlank=thisItog.itogBlank,\r\n                      tdStrVal=$(itogBlank).find('td.td_str_val'),\r\n                      tekTdItog=$(tdStrVal).first();\r\n                let styleC=getComputedStyle(tekTdItog[0]);\r\n                $(tekTdItog).html('Итог')\r\n                            .css({'font-size':String(parseFloat(styleC.fontSize)+2)+'px','font-weight':800});\r\n                const tekTdValItog=$(itogBlank).find('td.td_val_val');\r\n                styleC=getComputedStyle($(tekTdValItog).first()[0]);\r\n                const styleTdValC={'font-size':String(parseFloat(styleC.fontSize)+2)+'px','font-weight':800};\r\n                $(itogBlank).find('td.td_val_val').each(function(i,elem) {\r\n                  $(elem).html(thisItog.res[i].value);\r\n                  $(elem).css(styleTdValC);\r\n                });\r\n                $(tabTrLast).after(itogBlank);\r\n              }\r\n              console.log('Всего строк ',resItogAll.count);\r\n          }\r\n          thisV.setState({itemsStrgrouping:tbodyL[0].outerHTML,$itemsStrgrouping:tbodyL,$itemsStrgroupingBeg:$(tbodyL).clone()});\r\n      }\r\n    }\r\n\r\n    dragStart(ev) {\r\n       ev.originalEvent.dataTransfer.effectAllowed='move';\r\n       if ($(ev.target).is('a.TabOLAPPol')) {\r\n          ev.originalEvent.dataTransfer.setData(\"Text\", 'nodrag');\r\n       }\r\n       else {\r\n         ev.originalEvent.dataTransfer.setData(\"Text\", ev.target.getAttribute('id'));\r\n       }\r\n       ev.originalEvent.dataTransfer.setDragImage(ev.target,50,50);\r\n       console.log('dragStart');\r\n       return true;\r\n    }\r\n\r\n    dragEnter(ev) {\r\n      //console.log('dragEnter');\r\n       ev.preventDefault();\r\n       return true;\r\n    }\r\n\r\n    dragOver(ev) {\r\n      //console.log('dragOver');\r\n    \tev.preventDefault();\r\n    }\r\n\r\n    dragDrop(ev) {\r\n      const thisV=this;\r\n      //пришедший ID\r\n      const idIn=ev.originalEvent.dataTransfer.getData(\"Text\");\r\n      if ((idIn==='nodrag') || (ev.originalEvent.dataTransfer.effectAllowed!=='move')) {\r\n        return false;\r\n      }\r\n      //ячейки шапки таблицы\r\n      const b_tab=$(\".divForTableOLAP[id='\"+thisV.props.obj.id+\"']\"),\r\n            tabHeadTd=$(b_tab).find('td.td_pok_name,td.td_str_name,td.td_val_name');\r\n      //определяем пришедший элемент\r\n      let elIn=$(tabHeadTd).filter('[id=\"'+idIn+'\"]:first');\r\n      if ($(elIn).length===0) {\r\n        //значит это несипользуемые поля\r\n        elIn=$(b_tab).find('div.TabOLAPPol li.tab_pol[id=\"'+idIn+'\"]');\r\n      }\r\n      //console.log(elIn);\r\n      //текущий элемент\r\n      let elOut=$(ev.target);\r\n      if ((!$(elOut).is('a#calc.TabOLAPPol')) & ((!$(elOut).is('td')))) {\r\n          elOut=$(elOut).closest('td');\r\n      }\r\n      const idOut=$(elOut).attr('id');\r\n      //меняем OLAP-структуру в соответсвии с изменениями\r\n      const dataNew={...this.state.data};\r\n\r\n      //признак что можно делать переносы между категориями(осями:показатели/строки/значения показателей)\r\n      let prOk=true;\r\n\r\n      if (idIn==idOut) {\r\n          return;\r\n      }\r\n\r\n      function delIn(type) {\r\n        if ((dataNew[type].length>1) || (type==='tab_pol')) {\r\n          //удаляем из места объекта где находился, только если таких значений больше одного (чтобы строилось корректно и не делать доп.функционал+надежность)\r\n          for (var i = 0; i < dataNew[type].length; i++) {\r\n            if (dataNew[type][i].SYSNAME===idIn) {\r\n              dataNew[type].splice(i,1)\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        else {\r\n            thisV.refCustomAlert.current.setState({show:true,text:'Запрещается перемещение из категории, где находится менее двух элементов отображения'});\r\n            prOk=false;\r\n        }\r\n      }\r\n      if ($(elIn).hasClass('td_pok_name')) {\r\n          delIn('tab_pok');\r\n      }\r\n      else if ($(elIn).hasClass('td_str_name')) {\r\n          delIn('tab_str');\r\n      }\r\n      else if ($(elIn).hasClass('td_val_name')) {\r\n          delIn('tab_val');\r\n      }\r\n      else if ($(elIn).hasClass('tab_pol')) {\r\n          delIn('tab_pol');\r\n      }\r\n\r\n      function addOut(type) {\r\n          //добавляем туда, куда отправили\r\n          const newEl={\"SYSNAME\":idIn,\"NAME\":$(elIn).text().trim()}\r\n          if (type!=='tab_pol_add') {\r\n            for (var i = 0; i < dataNew[type].length; i++) {\r\n              if (dataNew[type][i].SYSNAME===idOut) {\r\n                if (type==='tab_val') {\r\n                    newEl.AGGR=\"MAX\";\r\n                }\r\n                dataNew[type].splice(i,0,newEl)\r\n                break;\r\n              }\r\n            }\r\n          }\r\n          else {\r\n              dataNew['tab_pol'].push(newEl);\r\n          }\r\n      }\r\n\r\n      if (prOk) {\r\n        if ($(elOut).hasClass('td_pok_name')) {\r\n            addOut('tab_pok');\r\n        }\r\n        else if ($(elOut).hasClass('td_str_name')) {\r\n            addOut('tab_str');\r\n        }\r\n        else if ($(elOut).hasClass('td_val_name')) {\r\n            addOut('tab_val');\r\n        }\r\n        else if ($(elOut).is('a.TabOLAPPol')) {\r\n            addOut('tab_pol_add');\r\n        }\r\n\r\n        //сохраняем без изменения состояния, производительность\r\n        this.state.data=dataNew;\r\n        this.getDataSQL();\r\n      }\r\n    }\r\n\r\n    getDataSQL() {\r\n      const data=this.state.data;\r\n      data.tab_id= this.props.obj.id;\r\n      let thisV=this;\r\n      const time00=performance.now();\r\n      if (!!this.props.obj.stateLoadObj) {\r\n          this.props.obj.stateLoadObj.current.handleShow();\r\n      }\r\n\r\n      //подготавливаем SQL согласно возможным существующим параметрам\r\n      const dataCalc = {};\r\n      dataCalc.params={};\r\n      //let resp_data;\r\n      if (!!this.props.obj.data.params_val) {\r\n          data.params=this.props.obj.data.params_val;\r\n      }\r\n      dataCalc.sql=this.props.obj.data.sql_true;\r\n      getParamForSQL(this.props.obj.paramGroup,this.props.obj.parParentID,dataCalc);\r\n\r\n      //забираем полученный SQL и параметры\r\n      data.sql_true=dataCalc.sql;\r\n      data.params_val=dataCalc.params;\r\n\r\n      //console.log(parSQL);\r\n      if (!!this.props.obj.beforeLoadData) {\r\n          this.props.obj.beforeLoadData(this,data);\r\n      }\r\n      if (!((!!this.props.obj.beforeLoadData) && (typeof data.error === 'boolean'))) {\r\n        const dataIn={data:data};\r\n        if (!!this.state.tabname) {\r\n            dataIn.tabname=this.state.tabname;\r\n            dataIn.countall=this.state.countall;\r\n        }\r\n        const time00 = performance.now();\r\n        getTableOLAP(dataIn,(response)=> {\r\n                        console.log(response);\r\n                        const data=response;\r\n                        const time01 = performance.now();\r\n                        console.log('Время получения данных '+secondstotime(time01,time00));\r\n                        if (!!thisV.props.obj.stateLoadObj) {\r\n                            thisV.props.obj.stateLoadObj.current.handleHide();\r\n                        }\r\n\r\n                        let b_tab=$(\".divForTableOLAP[id='\"+thisV.props.obj.id+\"']\");\r\n                        data.tab_html=$(data.tab_html);\r\n                        let b_tab_null=$(data.tab_html).find(\"tr.tr_pok.null td.null\");\r\n                        if ((!!thisV.props.obj.addRow) || (!!thisV.props.obj.deleteRow) || (!!thisV.props.obj.dopAction) || (!!thisV.props.obj.editRow) || (this.graf)) {\r\n                            //перемещаем панель действий в подходящее место, если есть подходищие условия\r\n                            if ($(b_tab_null).length>0) {\r\n                                thisV.prPanelMove=true;\r\n                                $(b_tab_null).append($(b_tab).find('div.TabOLAPPanelAction'))\r\n                                             .append($(b_tab).find('div.TabOLAPPol'));\r\n                                $(b_tab_null).find('div.TabOLAPPol ul.tableOLAP').html(thisV.getUlTabPol());\r\n                            }\r\n                        }\r\n                        else {\r\n                          $(b_tab).find('div.TabOLAPPol').html(thisV.getUlTabPol());\r\n                        }\r\n                        thisV.setState({items:data.tab_html[0].outerHTML,\r\n                                        itemsStrgrouping:undefined,\r\n                                        $itemsStrgrouping:undefined,\r\n                                        $itemsStrgroupingBeg:undefined,\r\n                                        tabname:data.tabname,\r\n                                        countall:data.countall});\r\n\r\n                        thisV.getStrgrouping();\r\n                        const time02 = performance.now();\r\n                        console.log('Время обработки данных '+secondstotime(time02,time01));\r\n                        console.log('Общее время '+secondstotime(time02,time00));\r\n\r\n                        if (!!thisV.props.obj.afterLoadData) {\r\n                            thisV.props.obj.afterLoadData(thisV,data);\r\n                        }\r\n                      },\r\n                 this.props.obj.stateLoadObj\r\n               );\r\n\r\n\r\n      }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.getDropTableAll();\r\n        if (!!!this.props.obj.parParentID) {\r\n            this.getDataSQL();\r\n        }\r\n\r\n        //любые действия внутри таблицы\r\n        let thisV=this;\r\n        if (!!this.props.obj.freeAction) {\r\n          this.props.obj.freeAction.forEach((item) => {\r\n            $(\"div#root\").on(item.event, \"table.tableOLAP[id='\"+this.props.obj.id+\"'] \"+item.element, function(event) {\r\n                  item.function(event,this,thisV);\r\n            });\r\n          });\r\n        }\r\n\r\n        //события Drug and Drop\r\n        $(\"div#root\").on('dragstart', \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td.td_pok_name,\"+\r\n                                      \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td.td_str_name,\"+\r\n                                      \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td.td_val_name,\"+\r\n                                      \"a.TabOLAPPol[id='\"+this.props.obj.id+\"'],\"+\r\n                                      \"ul.tableOLAP[id='\"+this.props.obj.id+\"'] li.liTableOLAP\", this.dragStart);\r\n        $(\"div#root\").on('dragenter', \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td.td_pok_name,\"+\r\n                                      \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td.td_str_name,\"+\r\n                                      \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td.td_val_name,\"+\r\n                                      \"a.TabOLAPPol[id='\"+this.props.obj.id+\"'],\"+\r\n                                      \"ul.tableOLAP[id='\"+this.props.obj.id+\"'] li.liTableOLAP\", this.dragEnter);\r\n        $(\"div#root\").on('dragover', \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td.td_pok_name,\"+\r\n                                      \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td.td_str_name,\"+\r\n                                      \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td.td_val_name,\"+\r\n                                      \"a.TabOLAPPol[id='\"+this.props.obj.id+\"'],\"+\r\n                                      \"ul.tableOLAP[id='\"+this.props.obj.id+\"'] li.liTableOLAP\", this.dragOver);\r\n        $(\"div#root\").on('drop', \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td.td_pok_name,\"+\r\n                                      \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td.td_str_name,\"+\r\n                                      \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td.td_val_name,\"+\r\n                                      \"a.TabOLAPPol[id='\"+this.props.obj.id+\"']\", this.dragDrop);\r\n        $(\"div#root\").on('click', \"a.TabOLAPPol[id='\"+this.props.obj.id+\"']\",function() {\r\n            const elNext=$(this).next();\r\n            if ($(elNext).is(':visible')) {\r\n                $(elNext).hide();\r\n            }\r\n            else {\r\n                $(elNext).show();\r\n            }\r\n        });\r\n\r\n        //события контекстного меню\r\n        $(\"div#root\").on('contextmenu', \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td.td_val_name\",function(e) {\r\n          e.preventDefault();\r\n          //определяем текущее значение\r\n          const idC=$(this).attr('id');\r\n          let tekAggr;\r\n          for (var i = 0; i < thisV.state.data.tab_val.length; i++) {\r\n            if (thisV.state.data.tab_val[i].SYSNAME===idC) {\r\n              tekAggr=thisV.state.data.tab_val[i].AGGR;\r\n              break;\r\n            }\r\n          }\r\n          const posCursor=getCursorPosition(e);\r\n          const b_tab=$(\".divForTableOLAP[id='\"+thisV.props.obj.id+\"']\");\r\n          const contextMenu=$(b_tab).find('div.divContextMenu')\r\n                  .css({left:posCursor.x,top:posCursor.y})\r\n                  .attr('idTabVal',idC)\r\n                  .html('<p class=\"label\">Вариант агригирования:</p>'+\r\n                           '<p><input name=\"aggr\" type=\"radio\" id=\"MAX\" value=\"MAX\" '+((tekAggr===\"MAX\")?\"checked\":\"\")+' style=\"margin-right:1rem;\"><label for=\"MAX\">Максимум</label></p>'+\r\n                            '<p><input name=\"aggr\" type=\"radio\" id=\"MIN\" value=\"MIN\" '+((tekAggr===\"MIN\")?\"checked\":\"\")+' style=\"margin-right:1rem;\"><label for=\"MIN\">Минимум</label></p>'+\r\n                            '<p><input name=\"aggr\" type=\"radio\" id=\"SUM\" value=\"SUM\" '+((tekAggr===\"SUM\")?\"checked\":\"\")+' style=\"margin-right:1rem;\"><label for=\"SUM\">Сумма</label></p>'+\r\n                            '<p><input name=\"aggr\" type=\"radio\" id=\"AVG\" value=\"AVG\" '+((tekAggr===\"AVG\")?\"checked\":\"\")+' style=\"margin-right:1rem;\"><label for=\"AVG\">Среднее значение</label></p>'+\r\n                            '<p><input name=\"aggr\" type=\"radio\" id=\"COUNT\" value=\"COUNT\" '+((tekAggr===\"COUNT\")?\"checked\":\"\")+' style=\"margin-right:1rem;\"><label for=\"COUNT\">Количество</label></p>')\r\n                  .show();\r\n        });\r\n        $(\"div#root\").on('change', \".divForTableOLAP[id='\"+thisV.props.obj.id+\"'] div.divContextMenu input[name='aggr']\",function(e) {\r\n          const contextMenu=$(this).closest('div.divContextMenu'),\r\n                idC=$(contextMenu).attr('idTabVal');\r\n          for (var i = 0; i < thisV.state.data.tab_val.length; i++) {\r\n            if (thisV.state.data.tab_val[i].SYSNAME===idC) {\r\n              thisV.state.data.tab_val[i].AGGR=$(this).val();\r\n              $(contextMenu).hide();\r\n              thisV.getDataSQL();\r\n              break;\r\n            }\r\n          }\r\n        })\r\n\r\n        //сортировка строк по клику\r\n        $(\"div#root\").on('click', \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td a.tab_sort_up\",function() {\r\n          let olap_tab_id=thisV.props.obj.id;\r\n          let table_tag=$(this).closest(\"table.tableOLAP[id='\"+olap_tab_id+\"']\");\r\n          //действия проводим на таблицей из состояния после загрузки, т.к. могла измениться засчет схлопывания строк\r\n          $(table_tag).html(thisV.state.items);\r\n          let index_col=$(this).closest('td').index();\r\n          let tr_tab=$(table_tag).find('.tr_tab');\r\n\r\n          let sort_tab=$(tr_tab).sort(function(a, b) { // сортируем\r\n              var tek_str_a=$(a).find('td:eq('+index_col+')').text().replace(',',\".\");\r\n              var tek_str_b=$(b).find('td:eq('+index_col+')').text().replace(',',\".\");\r\n              var tek_num_a=parseFloat(tek_str_a);\r\n              var tek_num_b=parseFloat(tek_str_b);\r\n              if ((isNaN(tek_num_a)) || (isNaN(tek_num_b))) {\r\n                  return tek_str_a.localeCompare(tek_str_b);\r\n              }\r\n              else {\r\n                  return  tek_num_a - tek_num_b;\r\n              }\r\n          });\r\n          $(tr_tab).remove();\r\n          $(table_tag).find('tbody').append(sort_tab);\r\n        });\r\n        //сортировка строк по клику\r\n        $(\"div#root\").on('click', \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td a.tab_sort_unup\",function() {\r\n          let olap_tab_id=thisV.props.obj.id;\r\n          let table_tag=$(this).closest(\"table.tableOLAP[id='\"+olap_tab_id+\"']\");\r\n          //действия проводим на таблицей из состояния после загрузки, т.к. могла измениться засчет схлопывания строк\r\n          $(table_tag).html(thisV.state.items);\r\n          let index_col=$(this).closest('td').index();\r\n          let tr_tab=$(table_tag).find('.tr_tab');\r\n\r\n          let sort_tab=$(tr_tab).sort(function(a, b) { // сортируем\r\n              var tek_str_a=$(a).find('td:eq('+index_col+')').text().replace(',',\".\");\r\n              var tek_str_b=$(b).find('td:eq('+index_col+')').text().replace(',',\".\");\r\n              var tek_num_a=parseFloat(tek_str_a);\r\n              var tek_num_b=parseFloat(tek_str_b);\r\n              if ((isNaN(tek_num_a)) || (isNaN(tek_num_b))) {\r\n                  return tek_str_b.localeCompare(tek_str_a);\r\n              }\r\n              else {\r\n                  return  tek_num_b - tek_num_a;\r\n              }\r\n          });\r\n          $(tr_tab).remove();\r\n          $(table_tag).find('tbody').append(sort_tab);\r\n        });\r\n\r\n        if ((!!thisV.props.obj.addRow) || (!!thisV.props.obj.deleteRow) || (!!thisV.props.obj.dopAction) || (!!thisV.props.obj.editRow) || (this.graf)) {\r\n            //события панели\r\n            if (!!thisV.props.obj.addRow) {\r\n              $(\"div#root\").on('click', \".divForTableOLAP[id='\"+thisV.props.obj.id+\"'] li.tableDBaddRow\",function() {\r\n                  thisV.props.obj.addRow(thisV)\r\n              })\r\n            }\r\n            if (!!thisV.props.obj.editRow) {\r\n                $(\"div#root\").on('click', \".divForTableOLAP[id='\"+thisV.props.obj.id+\"'] li.tableDBeditRow\",function() {\r\n                    thisV.props.obj.editRow(thisV);\r\n                });\r\n            }\r\n            if (!!thisV.props.obj.deleteRow) {\r\n                $(\"div#root\").on('click', \".divForTableOLAP[id='\"+thisV.props.obj.id+\"'] li.tableDBdeleteRow\",function() {\r\n                  thisV.props.obj.deleteRow(thisV);\r\n                });\r\n            }\r\n            if (!!thisV.props.obj.dopAction) {\r\n                $(\"div#root\").on('click', \".divForTableOLAP[id='\"+thisV.props.obj.id+\"'] li.tableDBdopActionBlok\",function() {\r\n                    thisV.ul_oda=$(this).find('ul.tableDBdopAction');\r\n                    if (!$(thisV.ul_oda).is(':visible')) {\r\n                        $(thisV.ul_oda).show();\r\n                        var this_top=$(this).offset().top+30,\r\n                            this_left=$(this).offset().left+3;\r\n                        $(thisV.ul_oda).css({'left':this_left+'px','top':this_top+'px'});\r\n                        thisV.pr_tableDBdopAction_vis=true;\r\n                    }\r\n                    else {\r\n                        $(thisV.ul_oda).hide();\r\n                        thisV.pr_tableDBdopAction_vis=false;\r\n                    }\r\n                });\r\n\r\n                $('main').bind('scroll', thisV.panelScroll);\r\n\r\n                thisV.props.obj.dopAction.forEach((item) => {\r\n                  $(\"div#root\").on('click', \".divForTableOLAP[id='\"+thisV.props.obj.id+\"'] ul.tableDBdopAction.ul_cons.second-level li.tableDBdopAction[id='\"+item.id+\"']\",function() {\r\n                      item.callback(thisV);\r\n                  });\r\n                })\r\n            }\r\n\r\n            //кнопка графика\r\n            if (this.graf) {\r\n              $(\"div#root\").on('click', \".divForTableOLAP[id='\"+thisV.props.obj.id+\"'] li.table_graf\",this.getGraf);\r\n            }\r\n        }\r\n\r\n        //событие разворачивания свернутых/сгруппированых строк\r\n        $(\"div#root\").on('click', \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td a.unwrapTrOLAP\",function() {\r\n          const time00 = performance.now();\r\n          const tabTr=thisV.state.$itemsStrgrouping,\r\n                //tabTr=$(\"table.tableOLAP[id='\"+thisV.props.obj.id+\"'] tbody\"),\r\n                thisID=this.id,\r\n                tdStrName=$(tabTr).find('tr.tr_name_col td.td_str_name');\r\n          //номер текущей группировки\r\n          let i0;\r\n          for (i0 = 0; i0 < tdStrName.length; i0++) {\r\n            let tekID=tdStrName[i0].id;\r\n            if ((!!thisV.state.strgrouping.onSubItog[tekID]) & (tekID===thisID)) {\r\n                break;\r\n            }\r\n          }\r\n          //ищем ближайшую группировку\r\n          let idNext;\r\n          let i;\r\n          for (i = (i0+1); i < tdStrName.length; i++) {\r\n            let tekID=tdStrName[i].id;\r\n            if ((!!thisV.state.strgrouping.onSubItog[tekID]) & (tekID!==thisID)) {\r\n                idNext=tekID;\r\n                break;\r\n            }\r\n          }\r\n\r\n          /*let tekTd=$(this).closest('td');\r\n          const tekTrOld=$(tekTd).closest('tr');*/\r\n          const tekTdTrue=$(this).closest('td'),\r\n                tekTrOldTrue=$(tekTdTrue).closest('tr');\r\n          //необходимо найти ячейку и строку в виртуальном DOM\r\n          const tekTrOld=$(tabTr).find('tr:eq('+$(tekTrOldTrue).index()+')');\r\n          let tekTd=$(tekTrOld).find('td:eq('+$(tekTdTrue).index()+')');\r\n          let tekTr=tekTrOld;\r\n\r\n          //считаем кол-во развернутых строк\r\n          let countUnwrap=0;\r\n\r\n          const tekTrNewIndex=$(tekTrOld).index();\r\n          let maxRight;\r\n          if (!!idNext) {\r\n              maxRight=-1;\r\n          }\r\n          else {\r\n              maxRight=tdStrName.length-1;\r\n          }\r\n\r\n          function incRowspanAbove(iFunc,tekTrNew) {\r\n            //необходимо всем идущим до этого объединениям увеличить rowspan на единицу\r\n            for (var i4 = (iFunc-1); i4>=0; i4--) {\r\n              let prevTrTd;\r\n              if (!!!tdRowspanAbove[tdStrName[i4].id]) {\r\n                  let prevTr,\r\n                      maxIndex=0;\r\n                  if (i4>i0)  {\r\n                      maxIndex=tekTrNewIndex;\r\n                  }\r\n                  //в случае наличия следующей группировки может передаваться строка с этой группировкой, поэтому запоминаем индекс на основе пришедшей строки\r\n                  const  tekTrNewNextIndex=$(tekTrNew).index();\r\n                  prevTr=$(tekTr);\r\n                  prevTrTd=$(prevTr).find('td.td_str_val[id=\"'+tdStrName[i4].id+'\"]');\r\n                  //ищем ближайшую подходящую строку\r\n                  while (($(prevTrTd).length===0) || ($(prevTr).is('[pritog]'))) {\r\n                    prevTr=$(prevTr).prev();\r\n                    const prevTrIndex=$(prevTr).index();\r\n                    if (($(prevTr).length===0) || (maxIndex>prevTrIndex)) {\r\n                      break;\r\n                    }\r\n                    else {\r\n                      prevTrTd=$(prevTr).find('td.td_str_val[id=\"'+tdStrName[i4].id+'\"]');\r\n                    }\r\n                  }\r\n                  if ($(prevTrTd).length>0) {\r\n                    const prevTrTdIndex=$(prevTr).index();\r\n                    if (prevTrTdIndex!==tekTrNewNextIndex) {\r\n                      if ((i4>i0) & (i4<maxRight)) {\r\n                        let dopRowspan=+$(prevTrTd).attr('rowspancalc');\r\n                        if (isNaN(dopRowspan)) {\r\n                            dopRowspan=+$(prevTrTd).attr('rowspan');\r\n                            if (isNaN(dopRowspan)) {\r\n                              dopRowspan=1;\r\n                            }\r\n                            $(prevTrTd).attr('rowspan',++dopRowspan);\r\n                        }\r\n                        else {\r\n                            $(prevTrTd).attr('rowspan',dopRowspan);\r\n                        }\r\n\r\n                      }\r\n                      else {\r\n                        let dopRowspan=+$(prevTrTd).attr('rowspan');\r\n                        if (isNaN(dopRowspan)) {\r\n                            dopRowspan=1;\r\n                        }\r\n                        $(prevTrTd).attr('rowspan',++dopRowspan);\r\n                      }\r\n                    }\r\n                  }\r\n              }\r\n              else {\r\n                prevTrTd=$(tdRowspanAbove[tdStrName[i4].id]);\r\n                let dopRowspan=+$(prevTrTd).attr('rowspan');\r\n                if (isNaN(dopRowspan)) {\r\n                    dopRowspan=1;\r\n                }\r\n                $(prevTrTd).attr('rowspan',++dopRowspan);\r\n              }\r\n            }\r\n          }\r\n\r\n          //функция создания одной группировки\r\n          function setOneGroupe(thisID,tekTrNew,begI2,idNext,prDopInc) {\r\n            if (!!idNext) {\r\n              if (typeof prDopInc!=='boolean') {\r\n                  prDopInc=false;\r\n              }\r\n              const tdStrValTrue=$(tekTrNew).find('td.td_str_val'),\r\n                    tdStrValNextIndex=$(tdStrValTrue).filter('#'+idNext).index(),\r\n                    tdStrValTrueLength=$(tdStrValTrue).length;\r\n              let tdStrVal=$(tdStrValTrue).clone();\r\n              let firstTd;\r\n              //ищем id первого подытога, чтобы понять что делать со строкой\r\n              for (var i2 = begI2; i2 < tdStrName.length; i2++) {\r\n                if (!!thisV.state.strgrouping.onSubItog[tdStrName[i2].id]) {\r\n                  firstTd=$(tdStrVal).filter('#'+tdStrName[i2].id).clone()[0];\r\n                  break;\r\n                }\r\n              }\r\n              if (!!firstTd) {\r\n                if (firstTd.id===idNext) {\r\n                  //ищем ближайший подытог для найденного ID подытога, чтобы корректно отобразить группировку\r\n                  let tekTrNext=$(tekTrNew).next();\r\n                  while (!$(tekTrNext).is('[pritog][itogid=\"'+idNext+'\"]')) {\r\n                      tekTrNext=$(tekTrNext).next();\r\n                  }\r\n                  if ($(tekTrNext).length>0) {\r\n                    const trPrevClone=$(tekTrNew).clone();\r\n                    $(tekTrNew).html(tekTrNext[0].innerHTML);\r\n                    const firstTdNew=$(tekTrNew).find('td.td_str_val[id=\"'+idNext+'\"]:first'),\r\n                          endPrepend=tdStrValTrueLength-tdStrValNextIndex;\r\n                    $(firstTdNew).html('<a class=\"unwrapTrOLAP\" id=\"'+idNext+'\" title=\"Развернуть/детализировать\">&#9658;</a>'+firstTd.innerHTML)\r\n                                 .attr('colspan',endPrepend);\r\n                    for (var j = 0; j < (tdStrValTrueLength-endPrepend); j++) {\r\n                      $(firstTdNew).before($(tdStrVal[j]).clone());\r\n                    }\r\n                    if (prDopInc) {\r\n                      $(tekTrNew).show();\r\n                      ++countUnwrap;\r\n\r\n                      //\r\n                      incRowspanAbove(i,tekTrNew);\r\n\r\n                    }\r\n                    $(tekTrNext).html(trPrevClone[0].innerHTML);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          //находим строку подытогов и или воостанавливаем ячейки на этой строке либо формируем следующий подытог\r\n          //иначе не сможем корректно обработать строку следующую за первой строкой\r\n          while ($(tekTr).length>0) {\r\n              tekTr=$(tekTr).next();\r\n              if ($(tekTr).is('[pritog][itogid=\"'+thisID+'\"]')) {\r\n                break;\r\n              }\r\n          }\r\n          if ($(tekTr).length>0) {\r\n            const tekTrClone=$(tekTrOld).clone(),\r\n                  tekTrCloneTdStrVal=$(tekTrClone).find('td.td_str_val');\r\n            $(tekTrOld).html(tekTr[0].innerHTML);\r\n            //восстанавливаем rowspan\r\n            const tekTrOldTd=$(tekTrOld).find('td.td_str_val');\r\n            $(tekTrOldTd).each(function(i5,elem5) {\r\n                //необходимо в строке группировки всем ячейкам между текущим подытогом и максимальной ячейкой (в случае отсутствия следующего подытога: в этом случае maxRight равно -1) взять вычисленный\r\n                //rowspan, т.к. в момент пересчета rowspan эти ячейки были недоступны и в принципе не нуждались в пересчете\r\n                //смотрим принадлежность к таким ячейкам\r\n                let prI6=false;\r\n                for (var i6 = (i0+1); i6 < maxRight; i6++) {\r\n                  if (tdStrName[i6].id===elem5.id) {\r\n                    prI6=true;\r\n                    break;\r\n                  }\r\n                }\r\n                if (!prI6) {\r\n                  let dopRowspan=+$(tekTrCloneTdStrVal).filter('#'+elem5.id).attr('rowspan');\r\n                  if (!isNaN(dopRowspan)) {\r\n                    $(elem5).attr('rowspan',dopRowspan);\r\n                  }\r\n                }\r\n                else {\r\n                  let dopRowspan=+$(elem5).attr('rowspancalc');\r\n                  if (!isNaN(dopRowspan)) {\r\n                      $(elem5).attr('rowspan',dopRowspan);\r\n                  }\r\n                  else {\r\n                      const tekTrCloneTdStrValOne=$(tekTrCloneTdStrVal).filter('#'+elem5.id);\r\n                      dopRowspan=$(tekTrCloneTdStrValOne).attr('rowspan');\r\n                      if (!isNaN(dopRowspan)) {\r\n                          $(elem5).attr('rowspan',dopRowspan);\r\n                      }\r\n                  }\r\n                }\r\n              });\r\n\r\n            const tekTrOldTdThisID=$(tekTrOldTd).filter('#'+thisID);\r\n            if ($(tekTrOldTdThisID).find('a.wrapTrOLAP').length===0) {\r\n              $(tekTrOldTdThisID).prepend('<a class=\"wrapTrOLAP\" id=\"'+thisID+'\" title=\"Свернуть/сгруппировать\">&#9660;</a>');\r\n            }\r\n\r\n            $(tekTr).html(tekTrClone[0].innerHTML)\r\n                    .find('td.td_str_val[id=\"'+thisID+'\"]').first()\r\n                    .html((!!thisV.state.strgrouping.onSubItog[thisID].label)?thisV.state.strgrouping.onSubItog[thisID].label:'Подытог')\r\n                    .attr('rowspan',1);\r\n            $(tekTr).show();\r\n            ++countUnwrap;\r\n            //необходимо всем идущим до этого объединениям увеличить rowspan на единицу и удалить лишние ячейки в подытогах\r\n            for (var i4 = (i0-1); i4>=0; i4--) {\r\n              $(tekTr).find('td.td_str_val[id=\"'+tdStrName[i4].id+'\"]').remove();\r\n              let prevTr=$(tekTr).prev(),\r\n                  prevTrTd=$(prevTr).find('td.td_str_val[id=\"'+tdStrName[i4].id+'\"]');\r\n              //ищем ближашую подходящую строку\r\n              while (($(prevTrTd).length===0) || ($(prevTr).is('[pritog]'))) {\r\n                prevTr=$(prevTr).prev();\r\n                if ($(prevTr).length>0) {\r\n                  prevTrTd=$(prevTr).find('td.td_str_val[id=\"'+tdStrName[i4].id+'\"]');\r\n                }\r\n                else {\r\n                  break;\r\n                }\r\n              }\r\n              if ($(prevTrTd).length>0) {\r\n                //if ($(prevTr).index()!==$(tekTrOld).index()) {\r\n                  let dopRowspan=+$(prevTrTd).attr('rowspan');\r\n                  if (isNaN(dopRowspan)) {\r\n                      dopRowspan=1;\r\n                  }\r\n                  $(prevTrTd).attr('rowspan',++dopRowspan);\r\n                //}\r\n\r\n              }\r\n            }\r\n\r\n            //находим ближайшую группировку, если есть и обрабатываем\r\n            setOneGroupe(thisID,tekTrOld,(i0+1),idNext);\r\n          }\r\n\r\n          //используется для повышения производительности засчет запоминания\r\n          //ячеек для которых необходимо увеличивать rowspan, но которые находятся выше или на одном уровне с текущей выбранной строкой\r\n          tekTd=$(tekTrOld).find('#'+thisID+'.td_str_val');\r\n          const tdRowspanAbove={};\r\n          tdRowspanAbove[tekTd[0].id]=tekTd[0];\r\n          for (var i4 = (i0-1); i4>=0; i4--) {\r\n            let prevTr=$(tekTrOld),\r\n                prevTrTd=$(prevTr).find('td.td_str_val[id=\"'+tdStrName[i4].id+'\"]');\r\n            //ищем ближайшую подходящую строку\r\n            while (($(prevTrTd).length===0) || ($(prevTr).is('[pritog]'))) {\r\n              prevTr=$(prevTr).prev();\r\n              prevTrTd=$(prevTr).find('td.td_str_val[id=\"'+tdStrName[i4].id+'\"]');\r\n            }\r\n            if ($(prevTrTd).length>0) {\r\n              tdRowspanAbove[prevTrTd[0].id]=prevTrTd[0];\r\n            }\r\n          }\r\n\r\n          //обрабатываем остальные строки\r\n          tekTr=tekTrOld;\r\n          while ($(tekTr).length>0) {\r\n              tekTr=$(tekTr).next();\r\n              if ($(tekTr).is('[pritog][itogid=\"'+thisID+'\"]')) {\r\n                break;\r\n              }\r\n              else {\r\n                  if (!!!idNext) {\r\n                    //ищем номер этой ячейки, она точно нулевая, т.к. произведена подготовка после подгрузки данных\r\n                    const tekTd=$(tekTr).find('td.td_str_val').first();\r\n                    let i3;\r\n                    for (i3 = 0; i3 < tdStrName.length; i3++) {\r\n                      if (tdStrName[i3].id===tekTd[0].id) {\r\n                          break;\r\n                      }\r\n                    }\r\n                    $(tekTr).show();\r\n                    ++countUnwrap;\r\n                    //необходимо всем идущим до этого объединениям увеличить rowspan на единицу и удалить лишние ячейки в подытогах\r\n                    incRowspanAbove(i3,tekTrOld);\r\n                  }\r\n                  else if (!$(tekTr).is('[pritog]')) {\r\n                      //находим ближайшую группировку, если есть и обрабатываем\r\n                      setOneGroupe(thisID,tekTr,(i0+1),idNext,true);\r\n                  }\r\n              }\r\n          }\r\n\r\n          thisV.setState({itemsStrgrouping:tabTr[0].outerHTML,$itemsStrgrouping:tabTr});\r\n          const time01 = performance.now();\r\n          console.log('Время разворачивания группировки '+secondstotime(time01,time00));\r\n          console.log('Кол-во развернутых строк '+countUnwrap);\r\n        });\r\n\r\n        //событие сворачивания развернутых/несгруппированых строк\r\n        $(\"div#root\").on('click', \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td a.wrapTrOLAP\",function() {\r\n          const time00 = performance.now();\r\n          const tabTr=thisV.state.$itemsStrgrouping,\r\n                //tabTr=$(\"table.tableOLAP[id='\"+thisV.props.obj.id+\"'] tbody\"),\r\n                thisID=this.id,\r\n                //tdStrName=$(tabTr).filter('tr.tr_name_col').find('td.td_str_name');\r\n                tdStrName=$(tabTr).find('tr.tr_name_col td.td_str_name'),\r\n                firstIDSubItog=$(tabTr).find('tr.tr_tab:first').find('td a.wrapTrOLAP,td a.unwrapTrOLAP').first()[0].id;\r\n          //номер текущей группировки\r\n          let i0;\r\n          for (i0 = 0; i0 < tdStrName.length; i0++) {\r\n            let tekID=tdStrName[i0].id;\r\n            if ((!!thisV.state.strgrouping.onSubItog[tekID]) & (tekID===thisID)) {\r\n                break;\r\n            }\r\n          }\r\n\r\n          /*const tekTd=$(this).closest('td'),\r\n                tekTrOld=$(tekTd).closest('tr');*/\r\n          const tekTdTrue=$(this).closest('td'),\r\n                tekTrOldTrue=$(tekTdTrue).closest('tr');\r\n          //необходимо найти ячейку и строку в виртуальном DOM\r\n          const tekTrOld=$(tabTr).find('tr:eq('+$(tekTrOldTrue).index()+')'),\r\n                tekTd=$(tekTrOld).find('td:eq('+$(tekTdTrue).index()+')');\r\n          let tekTr=tekTrOld;\r\n\r\n          //считаем кол-во свернутых строк\r\n          let countWrap=0;\r\n\r\n          //находим подытог для выбранного блока, скрываем все строки внутри\r\n          while ($(tekTr).length>0) {\r\n            tekTr=$(tekTr).next();\r\n            if ($(tekTr).is('[pritog][itogid=\"'+thisID+'\"]')) {\r\n                break;\r\n            }\r\n            else {\r\n                //метод is(':visible') работает только для реального DOM, поэтому смотрим на стиле\r\n                if ($(tekTr).attr('style').indexOf('display: none')===-1) {\r\n                  $(tekTr).hide();\r\n                  ++countWrap;\r\n                }\r\n            }\r\n          }\r\n\r\n          const tekTrNew=tekTrOld,\r\n                tekTdNew=$(tekTd).clone()[0],\r\n                tekTrNewTdFirstIndex=$(tekTd).index();\r\n\r\n          let trRecover;\r\n          if (firstIDSubItog!==thisID) {\r\n            //восстанавливаем первую строку и кладем её в подытоги для дальнейшего возможного повторного раскрытия\r\n            //для первого подытога восстанавливаем дальше при замене блока строк\r\n            trRecover=$(tekTrOld).clone();\r\n            //ищем последний подытог в строке, если раскрыт, то берем строку восстановления текущую,\r\n            //если нет, то надо строку восстановления достать из найденного последнего подытога\r\n            const allASubItog=$(trRecover).find('td:gt('+(tekTrNewTdFirstIndex)+') a.wrapTrOLAP,td:gt('+(tekTrNewTdFirstIndex)+') a.unwrapTrOLAP'),\r\n                  lastASubItog=$(allASubItog).last(),\r\n                  lastTdSubItog=$(lastASubItog).closest('td'),\r\n                  lastTdSubItogIndex=$(lastTdSubItog).index(),\r\n                  trRecoverLength=$(trRecover).find('td').length;\r\n            $(allASubItog).remove();\r\n            if ($(lastASubItog).is('.unwrapTrOLAP')) {\r\n              //ищем последний подытог, там лежат данные для восстановления\r\n              let subItogRecover=$(tekTrOld).next();\r\n              while ((!$(subItogRecover).is('[pritog][itogid=\"'+lastTdSubItog[0].id+'\"]')) & ($(subItogRecover).length>0)) {\r\n                subItogRecover=$(subItogRecover).next();\r\n              }\r\n              if ($(subItogRecover).length>0) {\r\n                  $(trRecover).find('td:gt('+(lastTdSubItogIndex-1)+')').remove();\r\n                  let lastTdSubItogColspan=+$(lastTdSubItog).attr('colspan');\r\n                  if (isNaN(lastTdSubItogColspan)) {\r\n                      lastTdSubItogColspan=0;\r\n                  }\r\n                  else {\r\n                      --lastTdSubItogColspan;\r\n                  }\r\n                  const subItogRecoverTd=$(subItogRecover).find('td');\r\n                  $(subItogRecoverTd).filter(':gt('+($(subItogRecoverTd).length-(trRecoverLength+lastTdSubItogColspan-lastTdSubItogIndex)-1)+')').each(function(i,elem) {\r\n                    const elemClone=$(elem).clone();\r\n                    if ($(elemClone).is('.td_str_val')) {\r\n                        $(elemClone).find('a.wrapTrOLAP,a.unwrapTrOLAP').remove();\r\n                    }\r\n                    $(trRecover).append(elemClone);\r\n                  });\r\n                  //не можем удалить выше, т.к. удаляем с помощью gt - не включает текущий индекс, не удаляем сразу все,\r\n                  //т.к. может содержать те, которые нельзя удалять (подытог рангом выше)\r\n                  $(trRecover).find('td.td_str_val[id=\"'+thisID+'\"] a.wrapTrOLAP').remove();\r\n              }\r\n            }\r\n\r\n          }\r\n\r\n          let tdStrVal=$(tekTrNew).find('td.td_str_val').clone();\r\n          const trPrevClone=$(tekTrNew).clone();\r\n          $(tekTrNew).html(tekTr[0].innerHTML);\r\n          const tekTrNewTdFirst=$(tekTrNew).find('td.td_str_val[id=\"'+thisID+'\"]:first');\r\n          $(tekTrNewTdFirst).html(tekTdNew.innerHTML)\r\n                  .attr('colspan',(tdStrName.length-i0))\r\n                  .attr('rowspan',1)\r\n                  .find('a.wrapTrOLAP')\r\n                    .removeClass('wrapTrOLAP')\r\n                    .addClass('unwrapTrOLAP')\r\n                    .html(String.fromCharCode(9658));\r\n          for (var j = 0; j < tekTrNewTdFirstIndex; j++) {\r\n            $(tekTrNew).find('td.td_str_val[id=\"'+thisID+'\"]:first').before(tdStrVal[j]);\r\n          }\r\n          $(tekTr).hide();\r\n          ++countWrap;\r\n          const rowspanBefore=countWrap;\r\n          //необходимо всем идущим до этого объединениям уменьшить rowspan\r\n          for (var i4 = (i0-1); i4>=0; i4--) {\r\n            let prevTr=$(tekTr).prev(),\r\n                prevTrTd=$(prevTr).find('td.td_str_val[id=\"'+tdStrName[i4].id+'\"]');\r\n            //ищем ближашую подходящую строку\r\n            while (($(prevTrTd).length===0) || ($(prevTr).is('[pritog]'))) {\r\n              prevTr=$(prevTr).prev();\r\n              if ($(prevTr).length>0) {\r\n                prevTrTd=$(prevTr).find('td.td_str_val[id=\"'+tdStrName[i4].id+'\"]');\r\n              }\r\n              else {\r\n                break;\r\n              }\r\n            }\r\n            if ($(prevTrTd).length>0) {\r\n              let dopRowspan=+$(prevTrTd).attr('rowspan');\r\n              if (!isNaN(dopRowspan)) {\r\n                  const tekRowspan=dopRowspan-rowspanBefore;\r\n                  $(prevTrTd).attr('rowspan',tekRowspan);\r\n              }\r\n            }\r\n          }\r\n\r\n          if (firstIDSubItog!==thisID) {\r\n            //восстанавливаем первую строку и кладем её в подытоги для дальнейшего возможного повторного раскрытия\r\n            //для первого подытога восстанавливаем дальше при замене блока строк\r\n            $(tekTr).html(trRecover[0].innerHTML);\r\n          }\r\n\r\n          //ищем блок строк в начальном сгруппированном состоянии, чтобы заменить им аналогичные строки\r\n          function deltaIndex(trIn,begIndex,endIndex) {\r\n            //функция поиска строк в диапазоне между индексами, одновременное применение gt, lt не работает\r\n            const result=[];\r\n            $(trIn).each(function(i,elem) {\r\n              if ((i>begIndex) & (i<endIndex)) {\r\n                  result.push(elem);\r\n              }\r\n              else if (i===endIndex) {\r\n                  return false;\r\n              }\r\n            });\r\n            return result;\r\n          }\r\n          const tekTrOldIndex=$(tekTrOld).index(),\r\n                tekTrIndex=$(tekTr).index();\r\n          if ((tekTrIndex-tekTrOldIndex)>1) {\r\n              let trIn=$(thisV.state.$itemsStrgroupingBeg).find('tr'),\r\n                  dopRowRemove=0;\r\n              if (firstIDSubItog===thisID) {\r\n                  //для первого подытога можно просто заменить строку подытога, этого достаточно\r\n                  dopRowRemove=1;\r\n              }\r\n              const blockBegin=$(deltaIndex(trIn,tekTrOldIndex,tekTrIndex+dopRowRemove)).clone();\r\n              trIn=$(tabTr).find('tr');\r\n              $(deltaIndex(trIn,tekTrOldIndex,tekTrIndex+dopRowRemove)).remove();\r\n              $(tabTr).find('tr:eq('+tekTrOldIndex+'):first').after(blockBegin);\r\n          }\r\n\r\n          thisV.setState({itemsStrgrouping:tabTr[0].outerHTML,$itemsStrgrouping:tabTr});\r\n          const time01 = performance.now();\r\n          console.log('Время сворачивания группировки '+secondstotime(time01,time00));\r\n          console.log('Кол-во свернутых строк '+countWrap);\r\n        });\r\n\r\n        if (!!this.props.obj.componentDidMount) {\r\n            this.props.obj.componentDidMount(this);\r\n        }\r\n\r\n        window.onbeforeunload = function() {\r\n            thisV.getDropTable();\r\n        };\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      if (!!this.props.obj.freeAction) {\r\n        this.props.obj.freeAction.forEach((item) => {\r\n          $(\"div#root\").off(item.event, \"table.tableOLAP[id='\"+this.props.obj.id+\"'] \"+item.element);\r\n        });\r\n      }\r\n\r\n      //события Drug and Drop\r\n      $(\"div#root\").off('dragstart', \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td.td_pok_name,\"+\r\n                                    \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td.td_str_name,\"+\r\n                                    \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td.td_val_name,\"+\r\n                                    \"a.TabOLAPPol[id='\"+this.props.obj.id+\"'],\"+\r\n                                    \"ul.tableOLAP[id='\"+this.props.obj.id+\"'] li.liTableOLAP\", this.dragStart);\r\n      $(\"div#root\").off('dragenter', \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td.td_pok_name,\"+\r\n                                    \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td.td_str_name,\"+\r\n                                    \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td.td_val_name,\"+\r\n                                    \"a.TabOLAPPol[id='\"+this.props.obj.id+\"'],\"+\r\n                                    \"ul.tableOLAP[id='\"+this.props.obj.id+\"'] li.liTableOLAP\", this.dragEnter);\r\n      $(\"div#root\").off('dragover', \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td.td_pok_name,\"+\r\n                                    \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td.td_str_name,\"+\r\n                                    \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td.td_val_name,\"+\r\n                                    \"a.TabOLAPPol[id='\"+this.props.obj.id+\"'],\"+\r\n                                    \"ul.tableOLAP[id='\"+this.props.obj.id+\"'] li.liTableOLAP\", this.dragOver);\r\n      $(\"div#root\").off('drop', \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td.td_pok_name,\"+\r\n                                    \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td.td_str_name,\"+\r\n                                    \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td.td_val_name,\"+\r\n                                    \"a.TabOLAPPol[id='\"+this.props.obj.id+\"']\", this.dragDrop);\r\n      $(\"div#root\").off('click', \"a.TabOLAPPol[id='\"+this.props.obj.id+\"']\");\r\n\r\n      //события контекстного меню\r\n      $(\"div#root\").off('contextmenu', \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td.td_val_name\");\r\n      $(\"div#root\").off('change', \".divForTableOLAP[id='\"+this.props.obj.id+\"'] div.divContextMenu input[name='aggr']\");\r\n\r\n      //сортировка строк по клику\r\n      $(\"div#root\").off('click', \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td a.tab_sort_up\");\r\n      $(\"div#root\").off('click', \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td a.tab_sort_unup\");\r\n\r\n      if ((!!this.props.obj.addRow) || (!!this.props.obj.deleteRow) || (!!this.props.obj.dopAction) || (!!this.props.obj.editRow) || (this.graf)) {\r\n          //события панели\r\n          if (!!this.props.obj.addRow) {\r\n            $(\"div#root\").off('click', \".divForTableOLAP[id='\"+this.props.obj.id+\"'] li.tableDBaddRow\");\r\n          }\r\n          if (!!this.props.obj.editRow) {\r\n              $(\"div#root\").off('click', \".divForTableOLAP[id='\"+this.props.obj.id+\"'] li.tableDBeditRow\");\r\n          }\r\n          if (!!this.props.obj.deleteRow) {\r\n              $(\"div#root\").off('click', \".divForTableOLAP[id='\"+this.props.obj.id+\"'] li.tableDBdeleteRow\");\r\n          }\r\n          if (!!this.props.obj.dopAction) {\r\n              $(\"div#root\").off('click', \".divForTableOLAP[id='\"+this.props.obj.id+\"'] li.tableDBdopActionBlok\");\r\n\r\n              $('main').unbind('scroll', this.panelScroll);\r\n\r\n              this.props.obj.dopAction.forEach((item) => {\r\n                $(\"div#root\").off('click', \".divForTableOLAP[id='\"+this.props.obj.id+\"'] ul.tableDBdopAction.ul_cons.second-level li.tableDBdopAction[id='\"+item.id+\"']\");\r\n              })\r\n          }\r\n\r\n          //кнопка графика\r\n          if (this.graf) {\r\n            $(\"div#root\").off('click', \".divForTableOLAP[id='\"+this.props.obj.id+\"'] li.table_graf\");\r\n          }\r\n      }\r\n\r\n      $(\"div#root\").off('click', \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td a.unwrapTrOLAP\");\r\n      $(\"div#root\").off('click', \"table.tableOLAP[id='\"+this.props.obj.id+\"'] tbody tr td a.wrapTrOLAP\");\r\n\r\n      this.getDropTable();\r\n    }\r\n\r\n    getDropTableOne() {\r\n      if (!!this.state.tabname) {\r\n        const data={},\r\n              tabname=this.state.tabname;\r\n        data.execsql=`DROP TABLE `+tabname;\r\n        this.state.tabname=undefined;\r\n        getExecQuery(data,function(response) {\r\n                        console.log('Удаление таблицы '+tabname);\r\n                        console.log(response);\r\n                    });\r\n      }\r\n    }\r\n\r\n    getDropTableAll() {\r\n      const data={sql:`SELECT T.OBJECT_NAME\r\n                        FROM dba_objects T\r\n                       WHERE object_name LIKE 'REP_TAB_%'\r\n                         AND object_type = 'TABLE'\r\n                         AND 24*(SYSDATE-T.CREATED)>`+houreLifeCookies\r\n                 };\r\n      if (!!this.state.tabname) {\r\n        data.sql+=` AND object_name!='`+this.state.tabname+`'`;\r\n      }\r\n      getQuery(data,(response)=> {\r\n          if (response.data.length>0) {\r\n            const data1={};\r\n            data1.execsql=`BEGIN\\n`;\r\n            response.data.forEach((item) => {\r\n              data1.execsql+=`EXECUTE IMMEDIATE 'DROP TABLE `+item.OBJECT_NAME+`';\\n`;\r\n              console.log('Удаление таблицы '+item.OBJECT_NAME);\r\n            });\r\n            data1.execsql+=`END;`;\r\n            getExecQuery(data1,function(response1) {\r\n              console.log(response1);\r\n            });\r\n          }\r\n      });\r\n    }\r\n\r\n    getDropTable() {\r\n      if (!getTagExit()) {\r\n        this.getDropTableAll();\r\n        this.getDropTableOne();\r\n      }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        // Популярный пример (не забудьте сравнить пропсы):\r\n        //console.log(this.props);\r\n        if (getParamDiff(this.props.obj.paramGroup,prevProps.obj.paramGroup,this.props.obj.parParentID)) {\r\n            const thisV=this;\r\n            if (!!thisV.state.tabname) {\r\n              const data={};\r\n              data.execsql=`DROP TABLE `+thisV.state.tabname;\r\n              thisV.state.tabname=undefined;\r\n              getExecQuery(data,function(response) {\r\n                              thisV.getDataSQL();\r\n                            },\r\n                            thisV.props.obj.stateLoadObj\r\n                          );\r\n            }\r\n            else {\r\n                thisV.getDataSQL();\r\n            }\r\n        }\r\n        else {\r\n          let thisV=this,\r\n              b_tab=$(\".divForTableOLAP[id='\"+thisV.props.obj.id+\"']\");\r\n          //если существуют обработчики событий строки, то инициализируем их\r\n          if (!!thisV.props.obj.rowEvents) {\r\n            const trC=$(b_tab).find('tr');\r\n            if (!!thisV.props.obj.rowEvents.onClick) {\r\n              //$(\"div#root\" ).on(\"click\", \"table.tableOLAP[id='\"+thisV.props.obj.id+\"'] tr\", function(event) {\r\n              $(trC).click(function(event) {\r\n                  thisV.props.obj.rowEvents.onClick(event,this,thisV);\r\n              });\r\n            }\r\n            if (!!thisV.props.obj.rowEvents.onDoubleClick) {\r\n              //$(\"div#root\" ).on(\"dblclick\", \"table.tableOLAP[id='\"+thisV.props.obj.id+\"'] tr\", function(event) {\r\n              $(trC).dblclick(function(event) {\r\n                  thisV.props.obj.rowEvents.onDoubleClick(event,this,thisV);\r\n              });\r\n            }\r\n            if (!!thisV.props.obj.rowEvents.onMouseout) {\r\n              $(trC).mouseout(function(event) {\r\n              //$(\"div#root\" ).on(\"mouseout\", \"table.tableOLAP[id='\"+thisV.props.obj.id+\"'] tr\", function(event) {\r\n                  thisV.props.obj.rowEvents.onMouseout(event,this,thisV);\r\n              });\r\n            }\r\n            if (!!thisV.props.obj.rowEvents.onMouseover) {\r\n              //$(\"div#root\" ).on(\"mouseover\", \"table.tableOLAP[id='\"+thisV.props.obj.id+\"'] tr\", function(event) {\r\n              $(trC).mouseover(function(event) {\r\n                  thisV.props.obj.rowEvents.onMouseover(event,this,thisV);\r\n              });\r\n            }\r\n            if (!!thisV.props.obj.rowEvents.onHover) {\r\n              $(trC).hover(function(event) {\r\n              //$(\"div#root\" ).on(\"hover\", \"table.tableOLAP[id='\"+thisV.props.obj.id+\"'] tr\", function(event) {\r\n                  thisV.props.obj.rowEvents.onHover(event,this,thisV);\r\n              });\r\n            }\r\n          }\r\n        }\r\n\r\n        if (!!this.props.obj.componentDidUpdate) {\r\n            this.props.obj.componentDidUpdate(this,prevProps, prevState, snapshot);\r\n        }\r\n      }\r\n\r\n    render() {\r\n      const TableRender=({id,className}) => {\r\n          const ulBlock=this.getUlTabPol();\r\n          const panelBlock=() => {\r\n            if (this.prPanelMove) {\r\n              return null;\r\n            }\r\n            if ((!!this.props.obj.addRow) || (!!this.props.obj.deleteRow) || (!!this.props.obj.dopAction) || (!!this.props.obj.editRow) || (this.graf)){\r\n              return <div className=\"TabOLAPPanelAction\" dangerouslySetInnerHTML={{ __html:  this.panel[0].childNodes[0].innerHTML }}></div>;\r\n            }\r\n            else {\r\n              return null;\r\n            }\r\n          }\r\n          const tabOLAPPol=() => {\r\n            if (this.prPanelMove) {\r\n              return null;\r\n            }\r\n            else {\r\n              return <div className=\"TabOLAPPol\" id={id}>\r\n                      <div style={{position: 'relative'}}>\r\n                        <a className=\"TabOLAPPol\" id={id} draggable=\"true\">Поля&#9660;</a>\r\n                        <ul className=\"tableOLAP dbl-border\" id={id} dangerouslySetInnerHTML={{ __html:  ulBlock }}></ul>\r\n                      </div>\r\n                    </div>\r\n            }\r\n          }\r\n          let tabHtml;\r\n          if (!!this.state.itemsStrgrouping) {\r\n            tabHtml=this.state.itemsStrgrouping;\r\n          }\r\n          /*else if (!!this.state.itemsOrder) {\r\n              tabHtml=this.state.itemsOrder;\r\n          }*/\r\n          else {\r\n              tabHtml=this.state.items;\r\n          }\r\n          return <div className=\"divForTableOLAP\" id={id}>\r\n                    <div className=\"divContextMenu\">\r\n                    </div>\r\n                    {panelBlock()}\r\n                    {tabOLAPPol()}\r\n                    <table id={id} className={'tableOLAP'+((!!className)?' '+className:'')} dangerouslySetInnerHTML={{ __html:tabHtml }}>\r\n                    </table>\r\n                 </div>;\r\n      }\r\n\r\n        return (\r\n              <div>\r\n                <CustomAlert ref={this.refCustomAlert}/>\r\n                <TableRender\r\n                  id={this.props.obj.id}\r\n                  className={this.props.obj.className}\r\n                />\r\n              </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TableOLAP;\r\n",{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","severity":1,"message":"206","line":98,"column":29,"nodeType":"207","messageId":"208","endLine":98,"endColumn":33},{"ruleId":"205","severity":1,"message":"206","line":108,"column":11,"nodeType":"207","messageId":"208","endLine":108,"endColumn":15},{"ruleId":"209","severity":1,"message":"210","line":616,"column":15,"nodeType":"207","messageId":"211","endLine":616,"endColumn":16},{"ruleId":"212","severity":1,"message":"213","line":1,"column":1,"nodeType":"214","endLine":52,"endColumn":3},{"ruleId":"215","severity":1,"message":"216","line":62,"column":8,"nodeType":"217","endLine":62,"endColumn":10,"suggestions":"218"},{"ruleId":"215","severity":1,"message":"216","line":98,"column":8,"nodeType":"217","endLine":98,"endColumn":10,"suggestions":"219"},{"ruleId":"205","severity":1,"message":"220","line":1,"column":5,"nodeType":"207","messageId":"208","endLine":1,"endColumn":9},{"ruleId":"221","severity":1,"message":"222","line":57,"column":17,"nodeType":"223","messageId":"224","endLine":57,"endColumn":19},{"ruleId":"221","severity":1,"message":"222","line":63,"column":22,"nodeType":"223","messageId":"224","endLine":63,"endColumn":24},{"ruleId":"221","severity":1,"message":"222","line":67,"column":22,"nodeType":"223","messageId":"224","endLine":67,"endColumn":24},{"ruleId":"221","severity":1,"message":"222","line":72,"column":22,"nodeType":"223","messageId":"224","endLine":72,"endColumn":24},{"ruleId":"221","severity":1,"message":"222","line":222,"column":80,"nodeType":"223","messageId":"224","endLine":222,"endColumn":82},{"ruleId":"205","severity":1,"message":"225","line":830,"column":15,"nodeType":"207","messageId":"208","endLine":830,"endColumn":18},{"ruleId":"221","severity":1,"message":"222","line":834,"column":21,"nodeType":"223","messageId":"224","endLine":834,"endColumn":23},{"ruleId":"221","severity":1,"message":"222","line":59,"column":17,"nodeType":"223","messageId":"224","endLine":59,"endColumn":19},{"ruleId":"221","severity":1,"message":"222","line":63,"column":22,"nodeType":"223","messageId":"224","endLine":63,"endColumn":24},{"ruleId":"221","severity":1,"message":"222","line":67,"column":22,"nodeType":"223","messageId":"224","endLine":67,"endColumn":24},{"ruleId":"221","severity":1,"message":"222","line":71,"column":22,"nodeType":"223","messageId":"224","endLine":71,"endColumn":24},{"ruleId":"215","severity":1,"message":"226","line":81,"column":6,"nodeType":"217","endLine":81,"endColumn":8,"suggestions":"227"},{"ruleId":"205","severity":1,"message":"228","line":92,"column":33,"nodeType":"207","messageId":"208","endLine":92,"endColumn":49},{"ruleId":"205","severity":1,"message":"225","line":134,"column":45,"nodeType":"207","messageId":"208","endLine":134,"endColumn":48},{"ruleId":"221","severity":1,"message":"222","line":221,"column":80,"nodeType":"223","messageId":"224","endLine":221,"endColumn":82},{"ruleId":"221","severity":1,"message":"229","line":493,"column":49,"nodeType":"223","messageId":"224","endLine":493,"endColumn":51},{"ruleId":"221","severity":1,"message":"229","line":516,"column":70,"nodeType":"223","messageId":"224","endLine":516,"endColumn":72},{"ruleId":"221","severity":1,"message":"229","line":524,"column":72,"nodeType":"223","messageId":"224","endLine":524,"endColumn":74},{"ruleId":"205","severity":1,"message":"225","line":986,"column":15,"nodeType":"207","messageId":"208","endLine":986,"endColumn":18},{"ruleId":"221","severity":1,"message":"222","line":990,"column":21,"nodeType":"223","messageId":"224","endLine":990,"endColumn":23},{"ruleId":"209","severity":1,"message":"230","line":376,"column":14,"nodeType":"207","messageId":"211","endLine":376,"endColumn":18},{"ruleId":"209","severity":1,"message":"230","line":402,"column":14,"nodeType":"207","messageId":"211","endLine":402,"endColumn":18},{"ruleId":"209","severity":1,"message":"231","line":79,"column":15,"nodeType":"207","messageId":"211","endLine":79,"endColumn":20},{"ruleId":"201","replacedBy":"232"},{"ruleId":"203","replacedBy":"233"},{"ruleId":"205","severity":1,"message":"234","line":1,"column":32,"nodeType":"207","messageId":"208","endLine":1,"endColumn":41},{"ruleId":"205","severity":1,"message":"235","line":19,"column":9,"nodeType":"207","messageId":"208","endLine":19,"endColumn":21},{"ruleId":"236","severity":1,"message":"237","line":120,"column":63,"nodeType":"238","messageId":"239","endLine":120,"endColumn":64,"suggestions":"240"},{"ruleId":"205","severity":1,"message":"241","line":10,"column":10,"nodeType":"207","messageId":"208","endLine":10,"endColumn":16},{"ruleId":"205","severity":1,"message":"242","line":10,"column":17,"nodeType":"207","messageId":"208","endLine":10,"endColumn":29},{"ruleId":"205","severity":1,"message":"235","line":14,"column":9,"nodeType":"207","messageId":"208","endLine":14,"endColumn":21},{"ruleId":"205","severity":1,"message":"243","line":14,"column":22,"nodeType":"207","messageId":"208","endLine":14,"endColumn":32},{"ruleId":"205","severity":1,"message":"244","line":14,"column":33,"nodeType":"207","messageId":"208","endLine":14,"endColumn":41},{"ruleId":"205","severity":1,"message":"245","line":17,"column":9,"nodeType":"207","messageId":"208","endLine":17,"endColumn":16},{"ruleId":"246","severity":1,"message":"247","line":196,"column":62,"nodeType":"248","messageId":"249","endLine":211,"endColumn":18},{"ruleId":"209","severity":1,"message":"250","line":227,"column":24,"nodeType":"207","messageId":"211","endLine":227,"endColumn":25},{"ruleId":"209","severity":1,"message":"251","line":355,"column":22,"nodeType":"207","messageId":"211","endLine":355,"endColumn":24},{"ruleId":"221","severity":1,"message":"222","line":601,"column":15,"nodeType":"223","messageId":"224","endLine":601,"endColumn":17},{"ruleId":"252","severity":1,"message":"253","line":667,"column":9,"nodeType":"254","endLine":667,"endColumn":19},{"ruleId":"205","severity":1,"message":"255","line":676,"column":13,"nodeType":"207","messageId":"208","endLine":676,"endColumn":19},{"ruleId":"205","severity":1,"message":"256","line":814,"column":17,"nodeType":"207","messageId":"208","endLine":814,"endColumn":28},{"ruleId":"209","severity":1,"message":"251","line":1188,"column":20,"nodeType":"207","messageId":"211","endLine":1188,"endColumn":22},{"ruleId":"205","severity":1,"message":"257","line":1330,"column":17,"nodeType":"207","messageId":"208","endLine":1330,"endColumn":28},{"ruleId":"252","severity":1,"message":"253","line":1494,"column":9,"nodeType":"254","endLine":1494,"endColumn":19},{"ruleId":"258","severity":1,"message":"259","line":1619,"column":25,"nodeType":"260","endLine":1619,"endColumn":76},"no-native-reassign",["261"],"no-negated-in-lhs",["262"],"no-unused-vars","'winC' is assigned a value but never used.","Identifier","unusedVar","no-redeclare","'e' is already defined.","redeclared","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.match.params'. Either include it or remove the dependency array.","ArrayExpression",["263"],["264"],"'json' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'day' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'divImgClickObj'. Either include it or remove the dependency array.",["265"],"'tab_wtrmts_tbody' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'data' is already defined.","'b_tab' is already defined.",["261"],["262"],"'useEffect' is defined but never used.","'getExecQuery' is defined but never used.","no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["266","267"],"'format' is defined but never used.","'startOfMonth' is defined but never used.","'getHashPwd' is defined but never used.","'getQuery' is defined but never used.","'newDate' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'prop'.","FunctionExpression","unsafeRefs","'i' is already defined.","'i4' is already defined.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'time00' is assigned a value but never used.","'contextMenu' is assigned a value but never used.","'trPrevClone' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"268","fix":"269"},{"desc":"268","fix":"270"},{"desc":"271","fix":"272"},{"messageId":"273","fix":"274","desc":"275"},{"messageId":"276","fix":"277","desc":"278"},"Update the dependencies array to be: [props.match.params]",{"range":"279","text":"280"},{"range":"281","text":"280"},"Update the dependencies array to be: [divImgClickObj]",{"range":"282","text":"283"},"removeEscape",{"range":"284","text":"285"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"286","text":"287"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[2235,2237],"[props.match.params]",[3455,3457],[2771,2773],"[divImgClickObj]",[5068,5069],"",[5068,5068],"\\"]